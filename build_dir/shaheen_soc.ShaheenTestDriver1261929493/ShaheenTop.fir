;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit ShaheenTop : 
  module RX : 
    input clock : Clock
    input reset : Reset
    output io : {flip rxd : UInt<1>, valid : UInt<1>, data : UInt<8>}
    
    wire CLCK_PER_BIT : UInt<32> @[receiver.scala 14:36]
    CLCK_PER_BIT <= UInt<7>("h046") @[receiver.scala 15:16]
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[receiver.scala 18:25]
    reg clockCount : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[receiver.scala 20:27]
    reg bitIndex : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[receiver.scala 21:25]
    reg validReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[receiver.scala 22:25]
    reg _T : UInt, clock with : (reset => (reset, UInt<1>("h01"))) @[receiver.scala 24:30]
    _T <= io.rxd @[receiver.scala 24:30]
    reg rxReg : UInt, clock with : (reset => (reset, UInt<1>("h01"))) @[receiver.scala 24:22]
    rxReg <= _T @[receiver.scala 24:22]
    reg shiftReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h041"))) @[receiver.scala 25:25]
    node _T_1 = eq(UInt<3>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_1 : @[Conditional.scala 40:58]
      validReg <= UInt<1>("h00") @[receiver.scala 29:16]
      clockCount <= UInt<1>("h00") @[receiver.scala 30:18]
      bitIndex <= UInt<1>("h00") @[receiver.scala 31:16]
      node _T_2 = eq(io.rxd, UInt<1>("h00")) @[receiver.scala 33:19]
      when _T_2 : @[receiver.scala 33:28]
        stateReg <= UInt<3>("h01") @[receiver.scala 34:18]
        skip @[receiver.scala 33:28]
      else : @[receiver.scala 35:19]
        stateReg <= UInt<3>("h00") @[receiver.scala 36:18]
        skip @[receiver.scala 35:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<3>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = sub(CLCK_PER_BIT, UInt<1>("h01")) @[receiver.scala 41:42]
        node _T_5 = tail(_T_4, 1) @[receiver.scala 41:42]
        node _T_6 = div(_T_5, UInt<2>("h02")) @[receiver.scala 41:49]
        node _T_7 = eq(clockCount, _T_6) @[receiver.scala 41:23]
        when _T_7 : @[receiver.scala 41:57]
          node _T_8 = eq(io.rxd, UInt<1>("h00")) @[receiver.scala 42:21]
          when _T_8 : @[receiver.scala 42:30]
            clockCount <= UInt<1>("h00") @[receiver.scala 43:22]
            stateReg <= UInt<3>("h02") @[receiver.scala 44:20]
            skip @[receiver.scala 42:30]
          else : @[receiver.scala 45:21]
            stateReg <= UInt<3>("h00") @[receiver.scala 46:20]
            skip @[receiver.scala 45:21]
          skip @[receiver.scala 41:57]
        else : @[receiver.scala 48:19]
          node _T_9 = add(clockCount, UInt<1>("h01")) @[receiver.scala 49:34]
          node _T_10 = tail(_T_9, 1) @[receiver.scala 49:34]
          clockCount <= _T_10 @[receiver.scala 49:20]
          stateReg <= UInt<3>("h01") @[receiver.scala 50:18]
          skip @[receiver.scala 48:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_11 = eq(UInt<3>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_11 : @[Conditional.scala 39:67]
          node _T_12 = sub(CLCK_PER_BIT, UInt<1>("h01")) @[receiver.scala 55:39]
          node _T_13 = tail(_T_12, 1) @[receiver.scala 55:39]
          node _T_14 = lt(clockCount, _T_13) @[receiver.scala 55:23]
          when _T_14 : @[receiver.scala 55:47]
            node _T_15 = add(clockCount, UInt<1>("h01")) @[receiver.scala 56:34]
            node _T_16 = tail(_T_15, 1) @[receiver.scala 56:34]
            clockCount <= _T_16 @[receiver.scala 56:20]
            stateReg <= UInt<3>("h02") @[receiver.scala 57:18]
            skip @[receiver.scala 55:47]
          else : @[receiver.scala 58:19]
            clockCount <= UInt<1>("h00") @[receiver.scala 59:20]
            node _T_17 = shr(shiftReg, 1) @[receiver.scala 60:41]
            node _T_18 = cat(rxReg, _T_17) @[Cat.scala 29:58]
            shiftReg <= _T_18 @[receiver.scala 60:18]
            node _T_19 = lt(bitIndex, UInt<3>("h07")) @[receiver.scala 63:23]
            when _T_19 : @[receiver.scala 63:30]
              node _T_20 = add(bitIndex, UInt<1>("h01")) @[receiver.scala 64:32]
              node _T_21 = tail(_T_20, 1) @[receiver.scala 64:32]
              bitIndex <= _T_21 @[receiver.scala 64:20]
              stateReg <= UInt<3>("h02") @[receiver.scala 65:20]
              skip @[receiver.scala 63:30]
            else : @[receiver.scala 66:21]
              bitIndex <= UInt<1>("h00") @[receiver.scala 67:20]
              stateReg <= UInt<3>("h03") @[receiver.scala 68:20]
              skip @[receiver.scala 66:21]
            skip @[receiver.scala 58:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_22 = eq(UInt<3>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_22 : @[Conditional.scala 39:67]
            node _T_23 = sub(CLCK_PER_BIT, UInt<1>("h01")) @[receiver.scala 74:39]
            node _T_24 = tail(_T_23, 1) @[receiver.scala 74:39]
            node _T_25 = lt(clockCount, _T_24) @[receiver.scala 74:23]
            when _T_25 : @[receiver.scala 74:47]
              node _T_26 = add(clockCount, UInt<1>("h01")) @[receiver.scala 75:34]
              node _T_27 = tail(_T_26, 1) @[receiver.scala 75:34]
              clockCount <= _T_27 @[receiver.scala 75:20]
              stateReg <= UInt<3>("h03") @[receiver.scala 76:18]
              skip @[receiver.scala 74:47]
            else : @[receiver.scala 77:19]
              validReg <= UInt<1>("h01") @[receiver.scala 78:18]
              clockCount <= UInt<1>("h00") @[receiver.scala 79:20]
              stateReg <= UInt<3>("h04") @[receiver.scala 80:18]
              skip @[receiver.scala 77:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_28 = eq(UInt<3>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_28 : @[Conditional.scala 39:67]
              stateReg <= UInt<3>("h00") @[receiver.scala 85:16]
              validReg <= UInt<1>("h00") @[receiver.scala 86:16]
              skip @[Conditional.scala 39:67]
    io.data <= shiftReg @[receiver.scala 90:11]
    io.valid <= validReg @[receiver.scala 92:12]
    
  module UartController : 
    input clock : Clock
    input reset : Reset
    output io : {flip isStalled : UInt<1>, rx_data_o : UInt<32>, addr_o : UInt<8>, flip rxd : UInt<1>, valid : UInt<1>, done : UInt<1>}
    
    reg regDone : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[controller.scala 18:24]
    reg count : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[controller.scala 19:22]
    reg regFinalData : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[controller.scala 20:29]
    reg regAddr : UInt<14>, clock with : (reset => (reset, UInt<14>("h03fff"))) @[controller.scala 21:24]
    reg regValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[controller.scala 22:25]
    inst rx of RX @[controller.scala 24:18]
    rx.clock <= clock
    rx.reset <= reset
    rx.io.rxd <= io.rxd @[controller.scala 25:13]
    reg dataReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[controller.scala 27:24]
    reg regLSB1 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[controller.scala 28:24]
    reg regLSB2 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[controller.scala 29:24]
    reg regMSB1 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[controller.scala 30:24]
    reg regMSB2 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[controller.scala 31:24]
    node _T = eq(regDone, UInt<1>("h00")) @[controller.scala 33:24]
    node _T_1 = and(io.isStalled, _T) @[controller.scala 33:21]
    when _T_1 : @[controller.scala 33:34]
      node _T_2 = eq(rx.io.valid, UInt<1>("h01")) @[controller.scala 34:22]
      when _T_2 : @[controller.scala 34:31]
        dataReg <= rx.io.data @[controller.scala 37:15]
        node _T_3 = add(count, UInt<1>("h01")) @[controller.scala 38:22]
        node _T_4 = tail(_T_3, 1) @[controller.scala 38:22]
        count <= _T_4 @[controller.scala 38:13]
        regValid <= UInt<1>("h00") @[controller.scala 39:16]
        skip @[controller.scala 34:31]
      skip @[controller.scala 33:34]
    node _T_5 = eq(UInt<1>("h01"), count) @[Conditional.scala 37:30]
    when _T_5 : @[Conditional.scala 40:58]
      regLSB1 <= dataReg @[controller.scala 44:15]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_6 = eq(UInt<2>("h02"), count) @[Conditional.scala 37:30]
      when _T_6 : @[Conditional.scala 39:67]
        regLSB2 <= dataReg @[controller.scala 47:15]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h03"), count) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          regMSB1 <= dataReg @[controller.scala 50:15]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<3>("h04"), count) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            node _T_9 = cat(regLSB2, regLSB1) @[Cat.scala 29:58]
            node _T_10 = cat(dataReg, regMSB1) @[Cat.scala 29:58]
            node _T_11 = cat(_T_10, _T_9) @[Cat.scala 29:58]
            node _T_12 = eq(_T_11, UInt<12>("h0fff")) @[controller.scala 55:17]
            when _T_12 : @[controller.scala 55:36]
              regDone <= UInt<1>("h01") @[controller.scala 56:17]
              regFinalData <= UInt<1>("h00") @[controller.scala 57:22]
              regAddr <= UInt<1>("h00") @[controller.scala 58:17]
              regValid <= UInt<1>("h00") @[controller.scala 59:18]
              skip @[controller.scala 55:36]
            else : @[controller.scala 60:19]
              regFinalData <= _T_11 @[controller.scala 61:22]
              node _T_13 = add(regAddr, UInt<1>("h01")) @[controller.scala 62:28]
              node _T_14 = tail(_T_13, 1) @[controller.scala 62:28]
              regAddr <= _T_14 @[controller.scala 62:17]
              regValid <= UInt<1>("h01") @[controller.scala 63:18]
              skip @[controller.scala 60:19]
            skip @[Conditional.scala 39:67]
    node _T_15 = eq(count, UInt<3>("h04")) @[controller.scala 69:14]
    when _T_15 : @[controller.scala 69:23]
      count <= UInt<1>("h00") @[controller.scala 70:11]
      skip @[controller.scala 69:23]
    io.addr_o <= regAddr @[controller.scala 73:13]
    io.rx_data_o <= regFinalData @[controller.scala 74:16]
    io.valid <= regValid @[controller.scala 75:12]
    io.done <= regDone @[controller.scala 76:11]
    
  module ID_EX : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc_in : SInt<32>, flip pc4_in : SInt<32>, flip rs1_sel_in : UInt<5>, flip rs2_sel_in : UInt<5>, flip rs1_in : SInt<32>, flip rs2_in : SInt<32>, flip imm : SInt<32>, flip rd_sel_in : UInt<5>, flip func3_in : UInt<3>, flip func7_in : UInt<7>, flip ctrl_MemWr_in : UInt<1>, flip ctrl_MemRd_in : UInt<1>, flip ctrl_Branch_in : UInt<1>, flip ctrl_CsrWen_in : UInt<1>, flip ctrl_RegWr_in : UInt<1>, flip ctrl_MemToReg_in : UInt<1>, flip ctrl_AluOp_in : UInt<4>, flip ctrl_OpA_sel_in : UInt<2>, flip ctrl_OpB_sel_in : UInt<1>, flip ctrl_nextPc_sel_in : UInt<2>, flip inst_op_in : UInt<7>, flip csr_data_i : UInt<32>, flip stall : UInt<1>, pc_out : SInt<32>, pc4_out : SInt<32>, rs1_out : SInt<32>, rs2_out : SInt<32>, imm_out : SInt<32>, func3_out : UInt<3>, func7_out : UInt<7>, inst_op_out : UInt<7>, rd_sel_out : UInt<5>, rs1_sel_out : UInt<5>, rs2_sel_out : UInt<5>, ctrl_MemWr_out : UInt<1>, ctrl_MemRd_out : UInt<1>, ctrl_Branch_out : UInt<1>, ctrl_RegWr_out : UInt<1>, ctrl_CsrWen_out : UInt<1>, ctrl_MemToReg_out : UInt<1>, ctrl_AluOp_out : UInt<4>, ctrl_OpA_sel_out : UInt<2>, ctrl_OpB_sel_out : UInt<1>, ctrl_nextPc_sel_out : UInt<2>, csr_data_o : UInt<32>}
    
    reg pc_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 59:25]
    reg pc4_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 60:26]
    reg rs1_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 61:26]
    reg rs2_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 62:26]
    reg imm_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 63:26]
    reg rd_sel_reg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 64:29]
    reg rs1_sel_reg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 65:30]
    reg rs2_sel_reg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 66:30]
    reg func3_reg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID_EX.scala 67:28]
    reg func7_reg : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[ID_EX.scala 68:28]
    reg inst_op_reg : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[ID_EX.scala 69:30]
    reg csr_data_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EX.scala 71:31]
    reg ctrl_MemWr_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 73:33]
    reg ctrl_MemRd_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 74:33]
    reg ctrl_Branch_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 75:34]
    reg ctrl_RegWr_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 76:33]
    reg ctrl_CsrWen_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 77:34]
    reg ctrl_MemToReg_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 78:36]
    reg ctrl_AluOp_reg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[ID_EX.scala 79:33]
    reg ctrl_OpA_sel_reg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_EX.scala 80:35]
    reg ctrl_OpB_sel_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 81:35]
    reg ctrl_nextPc_sel_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 82:38]
    node _T = neq(io.stall, UInt<1>("h01")) @[ID_EX.scala 85:19]
    when _T : @[ID_EX.scala 85:28]
      pc_reg <= io.pc_in @[ID_EX.scala 86:16]
      pc4_reg <= io.pc4_in @[ID_EX.scala 87:17]
      rs1_reg <= io.rs1_in @[ID_EX.scala 88:17]
      rs2_reg <= io.rs2_in @[ID_EX.scala 89:17]
      imm_reg <= io.imm @[ID_EX.scala 90:17]
      csr_data_reg <= io.csr_data_i @[ID_EX.scala 91:22]
      rd_sel_reg <= io.rd_sel_in @[ID_EX.scala 92:20]
      rs1_sel_reg <= io.rs1_sel_in @[ID_EX.scala 93:21]
      rs2_sel_reg <= io.rs2_sel_in @[ID_EX.scala 94:21]
      func3_reg <= io.func3_in @[ID_EX.scala 95:19]
      func7_reg <= io.func7_in @[ID_EX.scala 96:19]
      inst_op_reg <= io.inst_op_in @[ID_EX.scala 97:21]
      ctrl_MemWr_reg <= io.ctrl_MemWr_in @[ID_EX.scala 99:24]
      ctrl_MemRd_reg <= io.ctrl_MemRd_in @[ID_EX.scala 100:24]
      ctrl_Branch_reg <= io.ctrl_Branch_in @[ID_EX.scala 101:25]
      ctrl_RegWr_reg <= io.ctrl_RegWr_in @[ID_EX.scala 102:24]
      ctrl_CsrWen_reg <= io.ctrl_CsrWen_in @[ID_EX.scala 103:25]
      ctrl_MemToReg_reg <= io.ctrl_MemToReg_in @[ID_EX.scala 104:27]
      ctrl_AluOp_reg <= io.ctrl_AluOp_in @[ID_EX.scala 105:24]
      ctrl_OpA_sel_reg <= io.ctrl_OpA_sel_in @[ID_EX.scala 106:26]
      ctrl_OpB_sel_reg <= io.ctrl_OpB_sel_in @[ID_EX.scala 107:26]
      ctrl_nextPc_sel_reg <= io.ctrl_nextPc_sel_in @[ID_EX.scala 108:29]
      io.pc_out <= pc_reg @[ID_EX.scala 113:19]
      io.pc4_out <= pc4_reg @[ID_EX.scala 114:20]
      io.rs1_out <= rs1_reg @[ID_EX.scala 115:20]
      io.rs2_out <= rs2_reg @[ID_EX.scala 116:20]
      io.csr_data_o <= csr_data_reg @[ID_EX.scala 117:23]
      io.imm_out <= imm_reg @[ID_EX.scala 118:20]
      io.rd_sel_out <= rd_sel_reg @[ID_EX.scala 119:23]
      io.rs1_sel_out <= rs1_sel_reg @[ID_EX.scala 120:24]
      io.rs2_sel_out <= rs2_sel_reg @[ID_EX.scala 121:24]
      io.func3_out <= func3_reg @[ID_EX.scala 122:22]
      io.func7_out <= func7_reg @[ID_EX.scala 123:22]
      io.inst_op_out <= inst_op_reg @[ID_EX.scala 124:24]
      io.ctrl_MemWr_out <= ctrl_MemWr_reg @[ID_EX.scala 126:27]
      io.ctrl_MemRd_out <= ctrl_MemRd_reg @[ID_EX.scala 127:27]
      io.ctrl_Branch_out <= ctrl_Branch_reg @[ID_EX.scala 128:28]
      io.ctrl_RegWr_out <= ctrl_RegWr_reg @[ID_EX.scala 129:27]
      io.ctrl_CsrWen_out <= ctrl_CsrWen_reg @[ID_EX.scala 130:28]
      io.ctrl_MemToReg_out <= ctrl_MemToReg_reg @[ID_EX.scala 131:30]
      io.ctrl_AluOp_out <= ctrl_AluOp_reg @[ID_EX.scala 132:27]
      io.ctrl_OpA_sel_out <= ctrl_OpA_sel_reg @[ID_EX.scala 133:29]
      io.ctrl_OpB_sel_out <= ctrl_OpB_sel_reg @[ID_EX.scala 134:29]
      io.ctrl_nextPc_sel_out <= ctrl_nextPc_sel_reg @[ID_EX.scala 135:32]
      skip @[ID_EX.scala 85:28]
    else : @[ID_EX.scala 139:17]
      io.pc_out <= pc_reg @[ID_EX.scala 140:19]
      io.pc4_out <= pc4_reg @[ID_EX.scala 141:20]
      io.rs1_out <= rs1_reg @[ID_EX.scala 142:20]
      io.rs2_out <= rs2_reg @[ID_EX.scala 143:20]
      io.csr_data_o <= csr_data_reg @[ID_EX.scala 144:23]
      io.imm_out <= imm_reg @[ID_EX.scala 145:20]
      io.rd_sel_out <= rd_sel_reg @[ID_EX.scala 146:23]
      io.rs1_sel_out <= rs1_sel_reg @[ID_EX.scala 147:24]
      io.rs2_sel_out <= rs2_sel_reg @[ID_EX.scala 148:24]
      io.func3_out <= func3_reg @[ID_EX.scala 149:22]
      io.func7_out <= func7_reg @[ID_EX.scala 150:22]
      io.inst_op_out <= inst_op_reg @[ID_EX.scala 151:24]
      io.ctrl_MemWr_out <= ctrl_MemWr_reg @[ID_EX.scala 154:27]
      io.ctrl_MemRd_out <= ctrl_MemRd_reg @[ID_EX.scala 155:27]
      io.ctrl_Branch_out <= ctrl_Branch_reg @[ID_EX.scala 156:28]
      io.ctrl_RegWr_out <= ctrl_RegWr_reg @[ID_EX.scala 157:27]
      io.ctrl_CsrWen_out <= ctrl_CsrWen_reg @[ID_EX.scala 158:28]
      io.ctrl_MemToReg_out <= ctrl_MemToReg_reg @[ID_EX.scala 159:30]
      io.ctrl_AluOp_out <= ctrl_AluOp_reg @[ID_EX.scala 160:27]
      io.ctrl_OpA_sel_out <= ctrl_OpA_sel_reg @[ID_EX.scala 161:29]
      io.ctrl_OpB_sel_out <= ctrl_OpB_sel_reg @[ID_EX.scala 162:29]
      io.ctrl_nextPc_sel_out <= ctrl_nextPc_sel_reg @[ID_EX.scala 163:32]
      skip @[ID_EX.scala 139:17]
    
  module EX_MEM : 
    input clock : Clock
    input reset : Reset
    output io : {flip ctrl_MemWr_in : UInt<1>, flip ctrl_MemRd_in : UInt<1>, flip ctrl_RegWr_in : UInt<1>, flip ctrl_CsrWen_in : UInt<1>, flip ctrl_MemToReg_in : UInt<1>, flip rs2_in : SInt<32>, flip rd_sel_in : UInt<5>, flip rs2_sel_in : UInt<5>, flip alu_in : SInt<32>, flip EX_MEM_func3 : UInt<3>, flip csr_data_i : UInt<32>, flip stall : UInt<1>, ctrl_MemWr_out : UInt<1>, ctrl_MemRd_out : UInt<1>, ctrl_RegWr_out : UInt<1>, ctrl_CsrWen_out : UInt<1>, ctrl_MemToReg_out : UInt<1>, rs2_out : SInt<32>, rd_sel_out : UInt<5>, rs2_sel_out : UInt<5>, alu_output : SInt<32>, EX_MEM_func3_out : UInt<3>, csr_data_o : UInt<32>}
    
    reg reg_memWr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 37:32]
    reg reg_memRd : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 38:32]
    reg reg_regWr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 39:32]
    reg reg_csrWen : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 40:33]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 41:35]
    reg reg_rs2 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM.scala 42:30]
    reg reg_rd_sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX_MEM.scala 43:33]
    reg reg_rs2_sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX_MEM.scala 44:34]
    reg reg_alu_output : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM.scala 45:37]
    reg reg_func3 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[EX_MEM.scala 46:37]
    reg reg_csr_data : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[EX_MEM.scala 49:35]
    node _T = neq(io.stall, UInt<1>("h01")) @[EX_MEM.scala 51:19]
    when _T : @[EX_MEM.scala 51:28]
      reg_memWr <= io.ctrl_MemWr_in @[EX_MEM.scala 52:19]
      reg_memRd <= io.ctrl_MemRd_in @[EX_MEM.scala 53:19]
      reg_regWr <= io.ctrl_RegWr_in @[EX_MEM.scala 54:19]
      reg_csrWen <= io.ctrl_CsrWen_in @[EX_MEM.scala 55:20]
      reg_memToReg <= io.ctrl_MemToReg_in @[EX_MEM.scala 56:22]
      reg_rs2 <= io.rs2_in @[EX_MEM.scala 57:17]
      reg_rd_sel <= io.rd_sel_in @[EX_MEM.scala 58:20]
      reg_rs2_sel <= io.rs2_sel_in @[EX_MEM.scala 59:21]
      reg_alu_output <= io.alu_in @[EX_MEM.scala 60:24]
      reg_func3 <= io.EX_MEM_func3 @[EX_MEM.scala 61:24]
      reg_csr_data <= io.csr_data_i @[EX_MEM.scala 64:22]
      skip @[EX_MEM.scala 51:28]
    else : @[EX_MEM.scala 66:18]
      reg_memWr <= reg_memWr @[EX_MEM.scala 67:19]
      reg_memRd <= reg_memRd @[EX_MEM.scala 68:19]
      reg_regWr <= reg_regWr @[EX_MEM.scala 69:19]
      reg_csrWen <= reg_csrWen @[EX_MEM.scala 70:20]
      reg_memToReg <= reg_memToReg @[EX_MEM.scala 71:22]
      reg_rs2 <= reg_rs2 @[EX_MEM.scala 72:17]
      reg_rd_sel <= reg_rd_sel @[EX_MEM.scala 73:20]
      reg_rs2_sel <= reg_rs2_sel @[EX_MEM.scala 74:21]
      reg_alu_output <= reg_alu_output @[EX_MEM.scala 75:24]
      reg_func3 <= reg_func3 @[EX_MEM.scala 76:23]
      reg_csr_data <= reg_csr_data @[EX_MEM.scala 79:22]
      skip @[EX_MEM.scala 66:18]
    io.ctrl_MemWr_out <= reg_memWr @[EX_MEM.scala 82:23]
    io.ctrl_MemRd_out <= reg_memRd @[EX_MEM.scala 83:23]
    io.ctrl_RegWr_out <= reg_regWr @[EX_MEM.scala 84:23]
    io.ctrl_CsrWen_out <= reg_csrWen @[EX_MEM.scala 85:24]
    io.ctrl_MemToReg_out <= reg_memToReg @[EX_MEM.scala 86:26]
    io.rs2_out <= reg_rs2 @[EX_MEM.scala 87:16]
    io.rd_sel_out <= reg_rd_sel @[EX_MEM.scala 88:19]
    io.rs2_sel_out <= reg_rs2_sel @[EX_MEM.scala 89:20]
    io.alu_output <= reg_alu_output @[EX_MEM.scala 90:19]
    io.EX_MEM_func3_out <= reg_func3 @[EX_MEM.scala 91:25]
    io.csr_data_o <= reg_csr_data @[EX_MEM.scala 94:19]
    
  module MEM_WB : 
    input clock : Clock
    input reset : Reset
    output io : {flip ctrl_RegWr_in : UInt<1>, flip ctrl_CsrWen_in : UInt<1>, flip ctrl_MemToReg_in : UInt<1>, flip rd_sel_in : UInt<5>, flip ctrl_MemRd_in : UInt<1>, flip dmem_data_in : SInt<32>, flip alu_in : SInt<32>, flip csr_data_in : UInt<32>, flip stall : UInt<1>, ctrl_RegWr_out : UInt<1>, ctrl_CsrWen_out : UInt<1>, ctrl_MemToReg_out : UInt<1>, ctrl_MemRd_out : UInt<1>, rd_sel_out : UInt<5>, dmem_data_out : SInt<32>, alu_output : SInt<32>, csr_data_out : UInt<32>}
    
    reg reg_regWr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 32:28]
    reg reg_csrWen : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 34:29]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 36:31]
    reg reg_memRd : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 38:28]
    reg reg_rdSel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[MEM_WB.scala 40:28]
    reg reg_dataMem_data : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB.scala 42:35]
    reg reg_alu_output : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB.scala 44:33]
    reg reg_csr_data : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MEM_WB.scala 50:31]
    node _T = neq(io.stall, UInt<1>("h01")) @[MEM_WB.scala 52:19]
    when _T : @[MEM_WB.scala 52:28]
      reg_regWr <= io.ctrl_RegWr_in @[MEM_WB.scala 53:19]
      reg_csrWen <= io.ctrl_CsrWen_in @[MEM_WB.scala 54:20]
      reg_memToReg <= io.ctrl_MemToReg_in @[MEM_WB.scala 55:22]
      reg_memRd <= io.ctrl_MemRd_in @[MEM_WB.scala 56:19]
      reg_rdSel <= io.rd_sel_in @[MEM_WB.scala 57:19]
      reg_dataMem_data <= io.dmem_data_in @[MEM_WB.scala 58:26]
      reg_alu_output <= io.alu_in @[MEM_WB.scala 59:24]
      reg_csr_data <= io.csr_data_in @[MEM_WB.scala 62:22]
      io.ctrl_MemToReg_out <= reg_memToReg @[MEM_WB.scala 64:30]
      io.ctrl_RegWr_out <= reg_regWr @[MEM_WB.scala 65:27]
      io.ctrl_CsrWen_out <= reg_csrWen @[MEM_WB.scala 66:28]
      io.ctrl_MemRd_out <= reg_memRd @[MEM_WB.scala 67:27]
      io.rd_sel_out <= reg_rdSel @[MEM_WB.scala 68:23]
      io.dmem_data_out <= reg_dataMem_data @[MEM_WB.scala 69:26]
      io.alu_output <= reg_alu_output @[MEM_WB.scala 70:23]
      io.csr_data_out <= reg_csr_data @[MEM_WB.scala 73:25]
      skip @[MEM_WB.scala 52:28]
    else : @[MEM_WB.scala 74:18]
      io.ctrl_MemToReg_out <= reg_memToReg @[MEM_WB.scala 75:30]
      io.ctrl_RegWr_out <= reg_regWr @[MEM_WB.scala 76:27]
      io.ctrl_CsrWen_out <= reg_csrWen @[MEM_WB.scala 77:28]
      io.ctrl_MemRd_out <= reg_memRd @[MEM_WB.scala 78:27]
      io.rd_sel_out <= reg_rdSel @[MEM_WB.scala 79:23]
      io.dmem_data_out <= reg_dataMem_data @[MEM_WB.scala 80:26]
      io.alu_output <= reg_alu_output @[MEM_WB.scala 81:23]
      io.csr_data_out <= reg_csr_data @[MEM_WB.scala 84:25]
      skip @[MEM_WB.scala 74:18]
    
  module Pc : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<32>, out : SInt<32>, pc4 : SInt<32>}
    
    node _T = sub(asSInt(UInt<32>("h00")), asSInt(UInt<32>("h04"))) @[Pc.scala 13:29]
    node _T_1 = tail(_T, 1) @[Pc.scala 13:29]
    node _T_2 = asSInt(_T_1) @[Pc.scala 13:29]
    reg reg : SInt, clock with : (reset => (reset, _T_2)) @[Pc.scala 13:18]
    reg <= io.in @[Pc.scala 14:9]
    node _T_3 = add(reg, asSInt(UInt<4>("h04"))) @[Pc.scala 15:19]
    node _T_4 = tail(_T_3, 1) @[Pc.scala 15:19]
    node _T_5 = asSInt(_T_4) @[Pc.scala 15:19]
    io.pc4 <= _T_5 @[Pc.scala 15:12]
    io.out <= reg @[Pc.scala 16:12]
    
  module Fetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip core_instr_gnt_i : UInt<1>, flip core_instr_rvalid_i : UInt<1>, flip core_instr_rdata_i : UInt<32>, flip csrRegFile_irq_pending_i : UInt<1>, flip csrRegFile_csr_mstatus_mie_i : UInt<1>, flip csrRegFile_csr_mtvec_i : UInt<32>, csrRegFile_csr_mtvec_init_o : UInt<1>, csrRegFile_csr_save_cause_o : UInt<1>, csrRegFile_csr_save_if_o : UInt<1>, csrRegFile_csr_if_pc_o : UInt<32>, csrRegFile_exc_cause_o : UInt<6>, flip csrRegFile_csr_mepc_i : UInt<32>, flip core_init_mtvec_i : UInt<1>, flip decode_sb_imm_i : SInt<32>, flip decode_uj_imm_i : SInt<32>, flip decode_jalr_imm_i : SInt<32>, flip decode_ctrl_next_pc_sel_i : UInt<2>, flip decode_ctrl_out_branch_i : UInt<1>, flip decode_branchLogic_output_i : UInt<1>, flip decode_hazardDetection_pc_i : SInt<32>, flip decode_hazardDetection_inst_i : UInt<32>, flip decode_hazardDetection_current_pc_i : SInt<32>, flip decode_hazardDetection_pc_forward_i : UInt<1>, flip decode_hazardDetection_inst_forward_i : UInt<1>, flip decode_mret_inst_i : UInt<1>, flip core_stall_i : UInt<1>, core_instr_addr_o : UInt<32>, core_instr_req_o : UInt<1>, decode_if_id_pc_o : SInt<32>, decode_if_id_pc4_o : SInt<32>, decode_if_id_inst_o : UInt<32>}
    
    inst pc of Pc @[Fetch.scala 94:18]
    pc.clock <= clock
    pc.reset <= reset
    io.csrRegFile_csr_save_if_o <= UInt<1>("h00") @[Fetch.scala 97:31]
    io.csrRegFile_csr_if_pc_o <= UInt<1>("h00") @[Fetch.scala 98:29]
    io.csrRegFile_csr_save_cause_o <= UInt<1>("h00") @[Fetch.scala 99:34]
    reg if_id_pc_reg : SInt, clock @[Fetch.scala 102:25]
    reg if_id_pc4_reg : SInt, clock @[Fetch.scala 103:26]
    reg if_id_inst_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h013"))) @[Fetch.scala 104:31]
    node handle_irq = and(io.csrRegFile_irq_pending_i, io.csrRegFile_csr_mstatus_mie_i) @[Fetch.scala 107:48]
    wire halt_if : UInt<1> @[Fetch.scala 110:21]
    node _T = mux(handle_irq, UInt<1>("h01"), UInt<1>("h00")) @[Fetch.scala 111:17]
    halt_if <= _T @[Fetch.scala 111:11]
    node _T_1 = mux(io.core_init_mtvec_i, UInt<1>("h01"), UInt<1>("h00")) @[Fetch.scala 114:40]
    io.csrRegFile_csr_mtvec_init_o <= _T_1 @[Fetch.scala 114:34]
    io.csrRegFile_csr_save_if_o <= UInt<1>("h00") @[Fetch.scala 117:31]
    io.csrRegFile_csr_save_cause_o <= UInt<1>("h00") @[Fetch.scala 118:34]
    node _T_2 = cat(UInt<1>("h01"), UInt<5>("h03")) @[Cat.scala 29:58]
    node _T_3 = cat(UInt<1>("h01"), UInt<5>("h07")) @[Cat.scala 29:58]
    node _T_4 = cat(UInt<1>("h01"), UInt<5>("h0b")) @[Cat.scala 29:58]
    node _T_5 = cat(UInt<1>("h01"), UInt<5>("h01f")) @[Cat.scala 29:58]
    node _T_6 = cat(UInt<1>("h00"), UInt<5>("h00")) @[Cat.scala 29:58]
    node _T_7 = cat(UInt<1>("h00"), UInt<5>("h02")) @[Cat.scala 29:58]
    node _T_8 = cat(UInt<1>("h00"), UInt<5>("h03")) @[Cat.scala 29:58]
    node _T_9 = cat(UInt<1>("h00"), UInt<5>("h0b")) @[Cat.scala 29:58]
    io.csrRegFile_exc_cause_o <= _T_6 @[Fetch.scala 119:29]
    node _T_10 = bits(pc.io.in, 13, 0) @[Fetch.scala 121:35]
    io.core_instr_addr_o <= _T_10 @[Fetch.scala 121:24]
    node _T_11 = mux(io.core_instr_gnt_i, UInt<1>("h01"), UInt<1>("h00")) @[Fetch.scala 123:29]
    io.core_instr_req_o <= _T_11 @[Fetch.scala 123:23]
    node instr = mux(io.core_instr_rvalid_i, io.core_instr_rdata_i, UInt<32>("h013")) @[Fetch.scala 125:18]
    node _T_12 = eq(io.core_stall_i, UInt<1>("h00")) @[Fetch.scala 127:8]
    node _T_13 = eq(halt_if, UInt<1>("h00")) @[Fetch.scala 127:28]
    node _T_14 = and(_T_12, _T_13) @[Fetch.scala 127:25]
    when _T_14 : @[Fetch.scala 127:38]
      if_id_pc_reg <= pc.io.out @[Fetch.scala 129:18]
      if_id_pc4_reg <= pc.io.pc4 @[Fetch.scala 131:19]
      skip @[Fetch.scala 127:38]
    node _T_15 = eq(io.core_stall_i, UInt<1>("h00")) @[Fetch.scala 134:8]
    node _T_16 = eq(halt_if, UInt<1>("h00")) @[Fetch.scala 134:28]
    node _T_17 = and(_T_15, _T_16) @[Fetch.scala 134:25]
    when _T_17 : @[Fetch.scala 134:38]
      node _T_18 = eq(io.decode_hazardDetection_inst_forward_i, UInt<1>("h01")) @[Fetch.scala 135:51]
      when _T_18 : @[Fetch.scala 135:60]
        if_id_inst_reg <= io.decode_hazardDetection_inst_i @[Fetch.scala 136:22]
        if_id_pc_reg <= io.decode_hazardDetection_current_pc_i @[Fetch.scala 137:20]
        skip @[Fetch.scala 135:60]
      else : @[Fetch.scala 138:17]
        if_id_inst_reg <= instr @[Fetch.scala 145:22]
        skip @[Fetch.scala 138:17]
      skip @[Fetch.scala 134:38]
    node _T_19 = eq(io.core_stall_i, UInt<1>("h00")) @[Fetch.scala 159:8]
    node _T_20 = eq(halt_if, UInt<1>("h00")) @[Fetch.scala 159:28]
    node _T_21 = and(_T_19, _T_20) @[Fetch.scala 159:25]
    when _T_21 : @[Fetch.scala 159:38]
      node _T_22 = eq(io.decode_hazardDetection_pc_forward_i, UInt<1>("h01")) @[Fetch.scala 160:49]
      when _T_22 : @[Fetch.scala 160:58]
        pc.io.in <= io.decode_hazardDetection_pc_i @[Fetch.scala 161:16]
        skip @[Fetch.scala 160:58]
      else : @[Fetch.scala 162:17]
        node _T_23 = eq(io.decode_ctrl_next_pc_sel_i, UInt<1>("h01")) @[Fetch.scala 163:41]
        when _T_23 : @[Fetch.scala 163:54]
          node _T_24 = eq(io.decode_branchLogic_output_i, UInt<1>("h01")) @[Fetch.scala 164:45]
          node _T_25 = eq(io.decode_ctrl_out_branch_i, UInt<1>("h01")) @[Fetch.scala 164:84]
          node _T_26 = and(_T_24, _T_25) @[Fetch.scala 164:53]
          when _T_26 : @[Fetch.scala 164:93]
            pc.io.in <= io.decode_sb_imm_i @[Fetch.scala 165:20]
            if_id_pc_reg <= asSInt(UInt<1>("h00")) @[Fetch.scala 166:24]
            if_id_pc4_reg <= asSInt(UInt<1>("h00")) @[Fetch.scala 167:25]
            if_id_inst_reg <= UInt<32>("h013") @[Fetch.scala 168:26]
            skip @[Fetch.scala 164:93]
          else : @[Fetch.scala 169:21]
            pc.io.in <= pc.io.pc4 @[Fetch.scala 170:20]
            skip @[Fetch.scala 169:21]
          skip @[Fetch.scala 163:54]
        else : @[Fetch.scala 172:60]
          node _T_27 = eq(io.decode_ctrl_next_pc_sel_i, UInt<2>("h02")) @[Fetch.scala 172:47]
          when _T_27 : @[Fetch.scala 172:60]
            pc.io.in <= io.decode_uj_imm_i @[Fetch.scala 173:18]
            if_id_pc_reg <= asSInt(UInt<1>("h00")) @[Fetch.scala 174:22]
            if_id_pc4_reg <= asSInt(UInt<1>("h00")) @[Fetch.scala 175:23]
            if_id_inst_reg <= UInt<32>("h013") @[Fetch.scala 176:24]
            skip @[Fetch.scala 172:60]
          else : @[Fetch.scala 177:60]
            node _T_28 = eq(io.decode_ctrl_next_pc_sel_i, UInt<2>("h03")) @[Fetch.scala 177:47]
            when _T_28 : @[Fetch.scala 177:60]
              pc.io.in <= io.decode_jalr_imm_i @[Fetch.scala 178:18]
              if_id_pc_reg <= asSInt(UInt<1>("h00")) @[Fetch.scala 179:22]
              if_id_pc4_reg <= asSInt(UInt<1>("h00")) @[Fetch.scala 180:23]
              if_id_inst_reg <= UInt<32>("h013") @[Fetch.scala 181:24]
              skip @[Fetch.scala 177:60]
            else : @[Fetch.scala 182:41]
              when io.decode_mret_inst_i : @[Fetch.scala 182:41]
                node _T_29 = asSInt(io.csrRegFile_csr_mepc_i) @[Fetch.scala 183:52]
                pc.io.in <= _T_29 @[Fetch.scala 183:18]
                if_id_pc_reg <= asSInt(UInt<1>("h00")) @[Fetch.scala 184:22]
                if_id_pc4_reg <= asSInt(UInt<1>("h00")) @[Fetch.scala 185:23]
                if_id_inst_reg <= UInt<32>("h013") @[Fetch.scala 186:24]
                skip @[Fetch.scala 182:41]
              else : @[Fetch.scala 187:19]
                pc.io.in <= pc.io.pc4 @[Fetch.scala 188:18]
                skip @[Fetch.scala 187:19]
        skip @[Fetch.scala 162:17]
      skip @[Fetch.scala 159:38]
    else : @[Fetch.scala 191:43]
      node _T_30 = eq(io.core_stall_i, UInt<1>("h00")) @[Fetch.scala 191:14]
      node _T_31 = and(_T_30, halt_if) @[Fetch.scala 191:31]
      when _T_31 : @[Fetch.scala 191:43]
        node _T_32 = bits(io.csrRegFile_csr_mtvec_i, 31, 8) @[Fetch.scala 192:46]
        node _T_33 = bits(_T_4, 4, 0) @[Fetch.scala 192:99]
        node _T_34 = cat(_T_33, UInt<2>("h00")) @[Cat.scala 29:58]
        node _T_35 = cat(_T_32, UInt<1>("h00")) @[Cat.scala 29:58]
        node _T_36 = cat(_T_35, _T_34) @[Cat.scala 29:58]
        node _T_37 = asSInt(_T_36) @[Fetch.scala 192:123]
        pc.io.in <= _T_37 @[Fetch.scala 192:14]
        if_id_inst_reg <= UInt<32>("h013") @[Fetch.scala 193:20]
        io.csrRegFile_csr_save_if_o <= UInt<1>("h01") @[Fetch.scala 194:33]
        node _T_38 = eq(io.decode_ctrl_next_pc_sel_i, UInt<1>("h01")) @[Fetch.scala 198:67]
        node _T_39 = asUInt(io.decode_sb_imm_i) @[Fetch.scala 198:105]
        node _T_40 = eq(io.decode_ctrl_next_pc_sel_i, UInt<2>("h02")) @[Fetch.scala 199:40]
        node _T_41 = asUInt(io.decode_uj_imm_i) @[Fetch.scala 199:78]
        node _T_42 = eq(io.decode_ctrl_next_pc_sel_i, UInt<2>("h03")) @[Fetch.scala 200:42]
        node _T_43 = asUInt(io.decode_jalr_imm_i) @[Fetch.scala 200:82]
        node _T_44 = asUInt(pc.io.out) @[Fetch.scala 200:102]
        node _T_45 = mux(_T_42, _T_43, _T_44) @[Fetch.scala 200:12]
        node _T_46 = mux(_T_40, _T_41, _T_45) @[Fetch.scala 199:10]
        node _T_47 = mux(_T_38, _T_39, _T_46) @[Fetch.scala 198:37]
        io.csrRegFile_csr_if_pc_o <= _T_47 @[Fetch.scala 198:31]
        io.csrRegFile_csr_save_cause_o <= UInt<1>("h01") @[Fetch.scala 201:36]
        io.csrRegFile_exc_cause_o <= _T_4 @[Fetch.scala 202:31]
        skip @[Fetch.scala 191:43]
      else : @[Fetch.scala 204:16]
        pc.io.in <= pc.io.out @[Fetch.scala 205:16]
        skip @[Fetch.scala 204:16]
    io.decode_if_id_pc_o <= if_id_pc_reg @[Fetch.scala 209:24]
    io.decode_if_id_pc4_o <= if_id_pc4_reg @[Fetch.scala 210:25]
    io.decode_if_id_inst_o <= if_id_inst_reg @[Fetch.scala 211:26]
    
  module HazardDetection : 
    input clock : Clock
    input reset : Reset
    output io : {flip IF_ID_INST : UInt<32>, flip ID_EX_MEMREAD : UInt<1>, flip ID_EX_REGRD : UInt<5>, flip pc_in : SInt<32>, flip current_pc : SInt<32>, flip IF_ID_MEMREAD : UInt<1>, inst_forward : UInt<1>, pc_forward : UInt<1>, ctrl_forward : UInt<1>, inst_out : UInt<32>, pc_out : SInt<32>, current_pc_out : SInt<32>}
    
    node rs1_sel = bits(io.IF_ID_INST, 19, 15) @[HazardDetection.scala 20:30]
    node rs2_sel = bits(io.IF_ID_INST, 24, 20) @[HazardDetection.scala 21:30]
    node _T = eq(io.IF_ID_MEMREAD, UInt<1>("h01")) @[HazardDetection.scala 22:25]
    when _T : @[HazardDetection.scala 23:3]
      node _T_1 = eq(io.ID_EX_MEMREAD, UInt<1>("h01")) @[HazardDetection.scala 24:29]
      node _T_2 = eq(io.ID_EX_REGRD, rs1_sel) @[HazardDetection.scala 24:59]
      node _T_3 = and(_T_1, _T_2) @[HazardDetection.scala 24:40]
      when _T_3 : @[HazardDetection.scala 25:7]
        io.inst_forward <= UInt<1>("h01") @[HazardDetection.scala 48:23]
        io.pc_forward <= UInt<1>("h01") @[HazardDetection.scala 49:21]
        io.ctrl_forward <= UInt<1>("h01") @[HazardDetection.scala 50:23]
        io.inst_out <= io.IF_ID_INST @[HazardDetection.scala 51:19]
        io.pc_out <= io.pc_in @[HazardDetection.scala 52:17]
        io.current_pc_out <= io.current_pc @[HazardDetection.scala 53:25]
        skip @[HazardDetection.scala 25:7]
      else : @[HazardDetection.scala 29:7]
        io.inst_forward <= UInt<1>("h00") @[HazardDetection.scala 57:21]
        io.pc_forward <= UInt<1>("h00") @[HazardDetection.scala 58:19]
        io.ctrl_forward <= UInt<1>("h00") @[HazardDetection.scala 59:21]
        io.inst_out <= io.IF_ID_INST @[HazardDetection.scala 60:17]
        io.pc_out <= io.pc_in @[HazardDetection.scala 61:15]
        io.current_pc_out <= io.current_pc @[HazardDetection.scala 62:23]
        skip @[HazardDetection.scala 29:7]
      skip @[HazardDetection.scala 23:3]
    else : @[HazardDetection.scala 34:3]
      node _T_4 = eq(io.ID_EX_MEMREAD, UInt<1>("h01")) @[HazardDetection.scala 35:27]
      node _T_5 = eq(io.ID_EX_REGRD, rs1_sel) @[HazardDetection.scala 35:58]
      node _T_6 = eq(io.ID_EX_REGRD, rs2_sel) @[HazardDetection.scala 35:90]
      node _T_7 = or(_T_5, _T_6) @[HazardDetection.scala 35:71]
      node _T_8 = and(_T_4, _T_7) @[HazardDetection.scala 35:38]
      when _T_8 : @[HazardDetection.scala 36:6]
        io.inst_forward <= UInt<1>("h01") @[HazardDetection.scala 48:23]
        io.pc_forward <= UInt<1>("h01") @[HazardDetection.scala 49:21]
        io.ctrl_forward <= UInt<1>("h01") @[HazardDetection.scala 50:23]
        io.inst_out <= io.IF_ID_INST @[HazardDetection.scala 51:19]
        io.pc_out <= io.pc_in @[HazardDetection.scala 52:17]
        io.current_pc_out <= io.current_pc @[HazardDetection.scala 53:25]
        skip @[HazardDetection.scala 36:6]
      else : @[HazardDetection.scala 40:6]
        io.inst_forward <= UInt<1>("h00") @[HazardDetection.scala 57:21]
        io.pc_forward <= UInt<1>("h00") @[HazardDetection.scala 58:19]
        io.ctrl_forward <= UInt<1>("h00") @[HazardDetection.scala 59:21]
        io.inst_out <= io.IF_ID_INST @[HazardDetection.scala 60:17]
        io.pc_out <= io.pc_in @[HazardDetection.scala 61:15]
        io.current_pc_out <= io.current_pc @[HazardDetection.scala 62:23]
        skip @[HazardDetection.scala 40:6]
      skip @[HazardDetection.scala 34:3]
    
  module InstructionTypeDecode : 
    input clock : Clock
    input reset : Reset
    output io : {flip func3 : UInt<3>, flip func7 : UInt<7>, flip opcode : UInt<7>, r_type : UInt<1>, load_type : UInt<1>, s_type : UInt<1>, sb_type : UInt<1>, i_type : UInt<1>, jalr_type : UInt<1>, jal_type : UInt<1>, lui_type : UInt<1>, Auipc : UInt<1>, multiply : UInt<1>, csr_imm_type : UInt<1>, csr_type : UInt<1>, csr_op : UInt<2>}
    
    io.r_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 89:19]
    io.load_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 90:22]
    io.s_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 91:19]
    io.sb_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 92:20]
    io.i_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 93:19]
    io.jalr_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 94:22]
    io.jal_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 95:21]
    io.lui_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 96:21]
    io.Auipc <= UInt<1>("h00") @[InstructionTypeDecode.scala 97:21]
    io.multiply <= UInt<1>("h00") @[InstructionTypeDecode.scala 98:21]
    io.csr_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 99:21]
    io.csr_imm_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 100:25]
    io.csr_op <= UInt<1>("h00") @[InstructionTypeDecode.scala 101:19]
    node _T = eq(io.opcode, UInt<6>("h033")) @[InstructionTypeDecode.scala 27:20]
    when _T : @[InstructionTypeDecode.scala 28:5]
      node _T_1 = eq(io.func7, UInt<1>("h01")) @[InstructionTypeDecode.scala 29:23]
      when _T_1 : @[InstructionTypeDecode.scala 30:9]
        io.r_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 39:29]
        skip @[InstructionTypeDecode.scala 30:9]
      else : @[InstructionTypeDecode.scala 42:8]
        io.r_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 43:23]
        skip @[InstructionTypeDecode.scala 42:8]
      skip @[InstructionTypeDecode.scala 28:5]
    else : @[InstructionTypeDecode.scala 46:43]
      node _T_2 = eq(io.opcode, UInt<2>("h03")) @[InstructionTypeDecode.scala 46:25]
      when _T_2 : @[InstructionTypeDecode.scala 46:43]
        io.load_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 47:22]
        skip @[InstructionTypeDecode.scala 46:43]
      else : @[InstructionTypeDecode.scala 48:45]
        node _T_3 = eq(io.opcode, UInt<6>("h023")) @[InstructionTypeDecode.scala 48:27]
        when _T_3 : @[InstructionTypeDecode.scala 48:45]
          io.s_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 49:19]
          skip @[InstructionTypeDecode.scala 48:45]
        else : @[InstructionTypeDecode.scala 50:45]
          node _T_4 = eq(io.opcode, UInt<7>("h063")) @[InstructionTypeDecode.scala 50:27]
          when _T_4 : @[InstructionTypeDecode.scala 50:45]
            io.sb_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 51:20]
            skip @[InstructionTypeDecode.scala 50:45]
          else : @[InstructionTypeDecode.scala 52:45]
            node _T_5 = eq(io.opcode, UInt<5>("h013")) @[InstructionTypeDecode.scala 52:27]
            when _T_5 : @[InstructionTypeDecode.scala 52:45]
              io.i_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 53:19]
              skip @[InstructionTypeDecode.scala 52:45]
            else : @[InstructionTypeDecode.scala 54:45]
              node _T_6 = eq(io.opcode, UInt<7>("h067")) @[InstructionTypeDecode.scala 54:27]
              when _T_6 : @[InstructionTypeDecode.scala 54:45]
                io.jalr_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 55:22]
                skip @[InstructionTypeDecode.scala 54:45]
              else : @[InstructionTypeDecode.scala 56:45]
                node _T_7 = eq(io.opcode, UInt<7>("h06f")) @[InstructionTypeDecode.scala 56:27]
                when _T_7 : @[InstructionTypeDecode.scala 56:45]
                  io.jal_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 57:21]
                  skip @[InstructionTypeDecode.scala 56:45]
                else : @[InstructionTypeDecode.scala 58:45]
                  node _T_8 = eq(io.opcode, UInt<6>("h037")) @[InstructionTypeDecode.scala 58:27]
                  when _T_8 : @[InstructionTypeDecode.scala 58:45]
                    io.lui_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 59:21]
                    skip @[InstructionTypeDecode.scala 58:45]
                  else : @[InstructionTypeDecode.scala 61:44]
                    node _T_9 = eq(io.opcode, UInt<5>("h017")) @[InstructionTypeDecode.scala 61:26]
                    when _T_9 : @[InstructionTypeDecode.scala 61:44]
                      io.Auipc <= UInt<1>("h01") @[InstructionTypeDecode.scala 62:18]
                      skip @[InstructionTypeDecode.scala 61:44]
                    else : @[InstructionTypeDecode.scala 63:70]
                      node _T_10 = eq(io.opcode, UInt<7>("h073")) @[InstructionTypeDecode.scala 63:27]
                      node _T_11 = eq(io.func3, UInt<1>("h01")) @[InstructionTypeDecode.scala 63:56]
                      node _T_12 = and(_T_10, _T_11) @[InstructionTypeDecode.scala 63:44]
                      when _T_12 : @[InstructionTypeDecode.scala 63:70]
                        io.csr_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 64:21]
                        io.csr_op <= UInt<1>("h01") @[InstructionTypeDecode.scala 65:19]
                        skip @[InstructionTypeDecode.scala 63:70]
                      else : @[InstructionTypeDecode.scala 66:70]
                        node _T_13 = eq(io.opcode, UInt<7>("h073")) @[InstructionTypeDecode.scala 66:27]
                        node _T_14 = eq(io.func3, UInt<2>("h02")) @[InstructionTypeDecode.scala 66:56]
                        node _T_15 = and(_T_13, _T_14) @[InstructionTypeDecode.scala 66:44]
                        when _T_15 : @[InstructionTypeDecode.scala 66:70]
                          io.csr_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 67:21]
                          io.csr_op <= UInt<2>("h02") @[InstructionTypeDecode.scala 68:19]
                          skip @[InstructionTypeDecode.scala 66:70]
                        else : @[InstructionTypeDecode.scala 69:70]
                          node _T_16 = eq(io.opcode, UInt<7>("h073")) @[InstructionTypeDecode.scala 69:27]
                          node _T_17 = eq(io.func3, UInt<2>("h03")) @[InstructionTypeDecode.scala 69:56]
                          node _T_18 = and(_T_16, _T_17) @[InstructionTypeDecode.scala 69:44]
                          when _T_18 : @[InstructionTypeDecode.scala 69:70]
                            io.csr_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 70:21]
                            io.csr_op <= UInt<2>("h03") @[InstructionTypeDecode.scala 71:19]
                            skip @[InstructionTypeDecode.scala 69:70]
                          else : @[InstructionTypeDecode.scala 72:70]
                            node _T_19 = eq(io.opcode, UInt<7>("h073")) @[InstructionTypeDecode.scala 72:27]
                            node _T_20 = eq(io.func3, UInt<3>("h05")) @[InstructionTypeDecode.scala 72:56]
                            node _T_21 = and(_T_19, _T_20) @[InstructionTypeDecode.scala 72:44]
                            when _T_21 : @[InstructionTypeDecode.scala 72:70]
                              io.csr_imm_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 73:25]
                              io.csr_op <= UInt<1>("h01") @[InstructionTypeDecode.scala 74:19]
                              skip @[InstructionTypeDecode.scala 72:70]
                            else : @[InstructionTypeDecode.scala 75:70]
                              node _T_22 = eq(io.opcode, UInt<7>("h073")) @[InstructionTypeDecode.scala 75:27]
                              node _T_23 = eq(io.func3, UInt<3>("h06")) @[InstructionTypeDecode.scala 75:56]
                              node _T_24 = and(_T_22, _T_23) @[InstructionTypeDecode.scala 75:44]
                              when _T_24 : @[InstructionTypeDecode.scala 75:70]
                                io.csr_imm_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 76:25]
                                io.csr_op <= UInt<2>("h02") @[InstructionTypeDecode.scala 77:19]
                                skip @[InstructionTypeDecode.scala 75:70]
                              else : @[InstructionTypeDecode.scala 78:70]
                                node _T_25 = eq(io.opcode, UInt<7>("h073")) @[InstructionTypeDecode.scala 78:27]
                                node _T_26 = eq(io.func3, UInt<3>("h07")) @[InstructionTypeDecode.scala 78:56]
                                node _T_27 = and(_T_25, _T_26) @[InstructionTypeDecode.scala 78:44]
                                when _T_27 : @[InstructionTypeDecode.scala 78:70]
                                  io.csr_imm_type <= UInt<1>("h01") @[InstructionTypeDecode.scala 79:25]
                                  io.csr_op <= UInt<2>("h03") @[InstructionTypeDecode.scala 80:19]
                                  skip @[InstructionTypeDecode.scala 78:70]
                                else : @[InstructionTypeDecode.scala 83:6]
                                  io.r_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 89:19]
                                  io.load_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 90:22]
                                  io.s_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 91:19]
                                  io.sb_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 92:20]
                                  io.i_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 93:19]
                                  io.jalr_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 94:22]
                                  io.jal_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 95:21]
                                  io.lui_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 96:21]
                                  io.Auipc <= UInt<1>("h00") @[InstructionTypeDecode.scala 97:21]
                                  io.multiply <= UInt<1>("h00") @[InstructionTypeDecode.scala 98:21]
                                  io.csr_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 99:21]
                                  io.csr_imm_type <= UInt<1>("h00") @[InstructionTypeDecode.scala 100:25]
                                  io.csr_op <= UInt<1>("h00") @[InstructionTypeDecode.scala 101:19]
                                  skip @[InstructionTypeDecode.scala 83:6]
    
  module ControlDecode : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_r_type : UInt<1>, flip in_load_type : UInt<1>, flip in_s_type : UInt<1>, flip in_sb_type : UInt<1>, flip in_i_type : UInt<1>, flip in_jalr_type : UInt<1>, flip in_jal_type : UInt<1>, flip in_lui_type : UInt<1>, flip in_csr_type : UInt<1>, flip in_csr_imm_type : UInt<1>, flip Auipc : UInt<1>, flip multiply : UInt<1>, memWrite : UInt<1>, memRead : UInt<1>, branch : UInt<1>, regWrite : UInt<1>, csr_wen : UInt<1>, memToReg : UInt<1>, aluOperation : UInt<4>, operand_a_sel : UInt<2>, operand_b_sel : UInt<1>, extend_sel : UInt<2>, next_pc_sel : UInt<2>}
    
    io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 188:21]
    io.memRead <= UInt<1>("h00") @[ControlDecode.scala 189:21]
    io.branch <= UInt<1>("h00") @[ControlDecode.scala 190:19]
    io.regWrite <= UInt<1>("h00") @[ControlDecode.scala 191:21]
    io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 192:21]
    io.aluOperation <= UInt<5>("h01c") @[ControlDecode.scala 193:25]
    io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 194:26]
    io.operand_b_sel <= UInt<1>("h00") @[ControlDecode.scala 195:26]
    io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 196:23]
    io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 197:24]
    io.csr_wen <= UInt<1>("h00") @[ControlDecode.scala 198:20]
    node _T = eq(io.in_r_type, UInt<1>("h01")) @[ControlDecode.scala 37:23]
    when _T : @[ControlDecode.scala 37:32]
      io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 38:21]
      io.memRead <= UInt<1>("h00") @[ControlDecode.scala 39:21]
      io.branch <= UInt<1>("h00") @[ControlDecode.scala 40:19]
      io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 41:21]
      io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 42:21]
      io.aluOperation <= UInt<1>("h00") @[ControlDecode.scala 43:25]
      io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 44:26]
      io.operand_b_sel <= UInt<1>("h00") @[ControlDecode.scala 45:26]
      io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 46:23]
      io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 47:24]
      skip @[ControlDecode.scala 37:32]
    else : @[ControlDecode.scala 50:40]
      node _T_1 = eq(io.in_load_type, UInt<1>("h01")) @[ControlDecode.scala 50:31]
      when _T_1 : @[ControlDecode.scala 50:40]
        io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 52:21]
        io.memRead <= UInt<1>("h01") @[ControlDecode.scala 53:21]
        io.branch <= UInt<1>("h00") @[ControlDecode.scala 54:19]
        io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 55:21]
        io.memToReg <= UInt<1>("h01") @[ControlDecode.scala 56:21]
        io.aluOperation <= UInt<3>("h04") @[ControlDecode.scala 57:25]
        io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 58:26]
        io.operand_b_sel <= UInt<1>("h01") @[ControlDecode.scala 59:26]
        io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 60:23]
        io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 61:24]
        skip @[ControlDecode.scala 50:40]
      else : @[ControlDecode.scala 62:39]
        node _T_2 = eq(io.in_s_type, UInt<1>("h01")) @[ControlDecode.scala 62:30]
        when _T_2 : @[ControlDecode.scala 62:39]
          io.memWrite <= UInt<1>("h01") @[ControlDecode.scala 64:21]
          io.memRead <= UInt<1>("h00") @[ControlDecode.scala 65:21]
          io.branch <= UInt<1>("h00") @[ControlDecode.scala 66:19]
          io.regWrite <= UInt<1>("h00") @[ControlDecode.scala 67:21]
          io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 68:21]
          io.aluOperation <= UInt<3>("h05") @[ControlDecode.scala 69:25]
          io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 70:26]
          io.operand_b_sel <= UInt<1>("h01") @[ControlDecode.scala 71:26]
          io.extend_sel <= UInt<1>("h01") @[ControlDecode.scala 72:23]
          io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 73:24]
          skip @[ControlDecode.scala 62:39]
        else : @[ControlDecode.scala 74:40]
          node _T_3 = eq(io.in_sb_type, UInt<1>("h01")) @[ControlDecode.scala 74:31]
          when _T_3 : @[ControlDecode.scala 74:40]
            io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 75:21]
            io.memRead <= UInt<1>("h00") @[ControlDecode.scala 76:21]
            io.branch <= UInt<1>("h01") @[ControlDecode.scala 77:19]
            io.regWrite <= UInt<1>("h00") @[ControlDecode.scala 78:21]
            io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 79:21]
            io.aluOperation <= UInt<2>("h02") @[ControlDecode.scala 80:25]
            io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 81:26]
            io.operand_b_sel <= UInt<1>("h00") @[ControlDecode.scala 82:26]
            io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 83:23]
            io.next_pc_sel <= UInt<1>("h01") @[ControlDecode.scala 84:24]
            skip @[ControlDecode.scala 74:40]
          else : @[ControlDecode.scala 85:39]
            node _T_4 = eq(io.in_i_type, UInt<1>("h01")) @[ControlDecode.scala 85:30]
            when _T_4 : @[ControlDecode.scala 85:39]
              io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 86:21]
              io.memRead <= UInt<1>("h00") @[ControlDecode.scala 87:21]
              io.branch <= UInt<1>("h00") @[ControlDecode.scala 88:19]
              io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 89:21]
              io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 90:21]
              io.aluOperation <= UInt<1>("h01") @[ControlDecode.scala 91:25]
              io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 92:26]
              io.operand_b_sel <= UInt<1>("h01") @[ControlDecode.scala 93:26]
              io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 94:23]
              io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 95:24]
              skip @[ControlDecode.scala 85:39]
            else : @[ControlDecode.scala 96:42]
              node _T_5 = eq(io.in_jalr_type, UInt<1>("h01")) @[ControlDecode.scala 96:33]
              when _T_5 : @[ControlDecode.scala 96:42]
                io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 97:21]
                io.memRead <= UInt<1>("h00") @[ControlDecode.scala 98:21]
                io.branch <= UInt<1>("h00") @[ControlDecode.scala 99:19]
                io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 100:21]
                io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 101:21]
                io.aluOperation <= UInt<2>("h03") @[ControlDecode.scala 102:25]
                io.operand_a_sel <= UInt<2>("h02") @[ControlDecode.scala 103:26]
                io.operand_b_sel <= UInt<1>("h00") @[ControlDecode.scala 104:26]
                io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 105:23]
                io.next_pc_sel <= UInt<2>("h03") @[ControlDecode.scala 106:24]
                skip @[ControlDecode.scala 96:42]
              else : @[ControlDecode.scala 107:41]
                node _T_6 = eq(io.in_jal_type, UInt<1>("h01")) @[ControlDecode.scala 107:32]
                when _T_6 : @[ControlDecode.scala 107:41]
                  io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 108:21]
                  io.memRead <= UInt<1>("h00") @[ControlDecode.scala 109:21]
                  io.branch <= UInt<1>("h00") @[ControlDecode.scala 110:19]
                  io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 111:21]
                  io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 112:21]
                  io.aluOperation <= UInt<2>("h03") @[ControlDecode.scala 113:25]
                  io.operand_a_sel <= UInt<2>("h02") @[ControlDecode.scala 114:26]
                  io.operand_b_sel <= UInt<1>("h00") @[ControlDecode.scala 115:26]
                  io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 116:23]
                  io.next_pc_sel <= UInt<2>("h02") @[ControlDecode.scala 117:24]
                  skip @[ControlDecode.scala 107:41]
                else : @[ControlDecode.scala 120:5]
                  node _T_7 = eq(io.in_lui_type, UInt<1>("h01")) @[ControlDecode.scala 119:30]
                  when _T_7 : @[ControlDecode.scala 120:5]
                    io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 121:21]
                    io.memRead <= UInt<1>("h00") @[ControlDecode.scala 122:21]
                    io.branch <= UInt<1>("h00") @[ControlDecode.scala 123:19]
                    io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 124:21]
                    io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 125:21]
                    io.aluOperation <= UInt<3>("h06") @[ControlDecode.scala 126:25]
                    io.operand_a_sel <= UInt<2>("h03") @[ControlDecode.scala 127:26]
                    io.operand_b_sel <= UInt<1>("h01") @[ControlDecode.scala 128:26]
                    io.extend_sel <= UInt<2>("h02") @[ControlDecode.scala 129:23]
                    io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 130:24]
                    skip @[ControlDecode.scala 120:5]
                  else : @[ControlDecode.scala 133:5]
                    node _T_8 = eq(io.Auipc, UInt<1>("h01")) @[ControlDecode.scala 132:24]
                    when _T_8 : @[ControlDecode.scala 133:5]
                      io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 134:21]
                      io.memRead <= UInt<1>("h00") @[ControlDecode.scala 135:21]
                      io.branch <= UInt<1>("h00") @[ControlDecode.scala 136:19]
                      io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 137:21]
                      io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 138:21]
                      io.aluOperation <= UInt<3>("h07") @[ControlDecode.scala 139:25]
                      io.operand_a_sel <= UInt<1>("h01") @[ControlDecode.scala 140:26]
                      io.operand_b_sel <= UInt<1>("h01") @[ControlDecode.scala 141:26]
                      io.extend_sel <= UInt<2>("h02") @[ControlDecode.scala 142:23]
                      io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 143:24]
                      skip @[ControlDecode.scala 133:5]
                    else : @[ControlDecode.scala 145:36]
                      node _T_9 = eq(io.multiply, UInt<1>("h01")) @[ControlDecode.scala 145:27]
                      when _T_9 : @[ControlDecode.scala 145:36]
                        io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 146:21]
                        io.memRead <= UInt<1>("h00") @[ControlDecode.scala 147:21]
                        io.branch <= UInt<1>("h00") @[ControlDecode.scala 148:19]
                        io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 149:21]
                        io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 150:21]
                        io.aluOperation <= UInt<4>("h09") @[ControlDecode.scala 151:25]
                        io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 152:26]
                        io.operand_b_sel <= UInt<1>("h00") @[ControlDecode.scala 153:26]
                        io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 154:23]
                        io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 155:24]
                        skip @[ControlDecode.scala 145:36]
                      else : @[ControlDecode.scala 157:41]
                        node _T_10 = eq(io.in_csr_type, UInt<1>("h01")) @[ControlDecode.scala 157:32]
                        when _T_10 : @[ControlDecode.scala 157:41]
                          io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 158:21]
                          io.memRead <= UInt<1>("h00") @[ControlDecode.scala 159:20]
                          io.branch <= UInt<1>("h00") @[ControlDecode.scala 160:19]
                          io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 161:21]
                          io.csr_wen <= UInt<1>("h01") @[ControlDecode.scala 162:20]
                          io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 163:21]
                          io.aluOperation <= UInt<4>("h08") @[ControlDecode.scala 164:25]
                          io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 165:26]
                          io.operand_b_sel <= UInt<1>("h01") @[ControlDecode.scala 166:26]
                          io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 167:23]
                          io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 168:24]
                          skip @[ControlDecode.scala 157:41]
                        else : @[ControlDecode.scala 169:45]
                          node _T_11 = eq(io.in_csr_imm_type, UInt<1>("h01")) @[ControlDecode.scala 169:36]
                          when _T_11 : @[ControlDecode.scala 169:45]
                            io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 170:21]
                            io.memRead <= UInt<1>("h00") @[ControlDecode.scala 171:20]
                            io.branch <= UInt<1>("h00") @[ControlDecode.scala 172:19]
                            io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 173:21]
                            io.csr_wen <= UInt<1>("h01") @[ControlDecode.scala 174:20]
                            io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 175:21]
                            io.aluOperation <= UInt<4>("h08") @[ControlDecode.scala 176:25]
                            io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 177:26]
                            io.operand_b_sel <= UInt<1>("h01") @[ControlDecode.scala 178:26]
                            io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 179:23]
                            io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 180:24]
                            skip @[ControlDecode.scala 169:45]
                          else : @[ControlDecode.scala 182:16]
                            io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 188:21]
                            io.memRead <= UInt<1>("h00") @[ControlDecode.scala 189:21]
                            io.branch <= UInt<1>("h00") @[ControlDecode.scala 190:19]
                            io.regWrite <= UInt<1>("h00") @[ControlDecode.scala 191:21]
                            io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 192:21]
                            io.aluOperation <= UInt<5>("h01c") @[ControlDecode.scala 193:25]
                            io.operand_a_sel <= UInt<1>("h00") @[ControlDecode.scala 194:26]
                            io.operand_b_sel <= UInt<1>("h00") @[ControlDecode.scala 195:26]
                            io.extend_sel <= UInt<1>("h00") @[ControlDecode.scala 196:23]
                            io.next_pc_sel <= UInt<1>("h00") @[ControlDecode.scala 197:24]
                            io.csr_wen <= UInt<1>("h00") @[ControlDecode.scala 198:20]
                            skip @[ControlDecode.scala 182:16]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_opcode : UInt<7>, flip func7 : UInt<7>, flip func3 : UInt<3>, out_memWrite : UInt<1>, out_branch : UInt<1>, out_memRead : UInt<1>, out_regWrite : UInt<1>, csr_we_o : UInt<1>, csr_imm_type : UInt<1>, csr_op_o : UInt<2>, out_memToReg : UInt<1>, out_aluOp : UInt<4>, out_operand_a_sel : UInt<2>, out_operand_b_sel : UInt<1>, out_extend_sel : UInt<2>, out_next_pc_sel : UInt<2>}
    
    inst instruction_type_decode of InstructionTypeDecode @[Control.scala 26:41]
    instruction_type_decode.clock <= clock
    instruction_type_decode.reset <= reset
    inst control_decode of ControlDecode @[Control.scala 27:32]
    control_decode.clock <= clock
    control_decode.reset <= reset
    instruction_type_decode.io.opcode <= io.in_opcode @[Control.scala 28:39]
    instruction_type_decode.io.func3 <= io.func3 @[Control.scala 29:39]
    control_decode.io.in_r_type <= instruction_type_decode.io.r_type @[Control.scala 30:33]
    control_decode.io.in_load_type <= instruction_type_decode.io.load_type @[Control.scala 31:36]
    control_decode.io.in_s_type <= instruction_type_decode.io.s_type @[Control.scala 32:33]
    control_decode.io.in_sb_type <= instruction_type_decode.io.sb_type @[Control.scala 33:34]
    control_decode.io.in_i_type <= instruction_type_decode.io.i_type @[Control.scala 34:33]
    control_decode.io.in_jalr_type <= instruction_type_decode.io.jalr_type @[Control.scala 35:36]
    control_decode.io.in_jal_type <= instruction_type_decode.io.jal_type @[Control.scala 36:35]
    control_decode.io.in_lui_type <= instruction_type_decode.io.lui_type @[Control.scala 37:35]
    control_decode.io.Auipc <= instruction_type_decode.io.Auipc @[Control.scala 38:35]
    control_decode.io.multiply <= instruction_type_decode.io.multiply @[Control.scala 39:35]
    control_decode.io.in_csr_type <= instruction_type_decode.io.csr_type @[Control.scala 40:35]
    control_decode.io.in_csr_imm_type <= instruction_type_decode.io.csr_imm_type @[Control.scala 41:39]
    io.out_memWrite <= control_decode.io.memWrite @[Control.scala 43:21]
    io.out_branch <= control_decode.io.branch @[Control.scala 44:19]
    io.out_memRead <= control_decode.io.memRead @[Control.scala 45:20]
    io.out_regWrite <= control_decode.io.regWrite @[Control.scala 46:21]
    io.csr_we_o <= control_decode.io.csr_wen @[Control.scala 47:17]
    io.out_memToReg <= control_decode.io.memToReg @[Control.scala 48:21]
    io.out_aluOp <= control_decode.io.aluOperation @[Control.scala 49:18]
    io.out_operand_a_sel <= control_decode.io.operand_a_sel @[Control.scala 50:26]
    io.out_operand_b_sel <= control_decode.io.operand_b_sel @[Control.scala 51:26]
    io.out_extend_sel <= control_decode.io.extend_sel @[Control.scala 52:23]
    io.out_next_pc_sel <= control_decode.io.next_pc_sel @[Control.scala 53:24]
    io.csr_op_o <= instruction_type_decode.io.csr_op @[Control.scala 56:17]
    io.csr_imm_type <= instruction_type_decode.io.csr_imm_type @[Control.scala 57:21]
    instruction_type_decode.io.func7 <= io.func7 @[Control.scala 58:38]
    
  module DecodeForwardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip ID_EX_REGRD : UInt<5>, flip ID_EX_MEMRD : UInt<1>, flip EX_MEM_REGRD : UInt<5>, flip EX_MEM_MEMRD : UInt<1>, flip MEM_WB_REGRD : UInt<5>, flip MEM_WB_MEMRD : UInt<1>, flip execute_regwrite : UInt<1>, flip mem_regwrite : UInt<1>, flip wb_regwrite : UInt<1>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip ctrl_branch : UInt<1>, forward_rs1 : UInt<4>, forward_rs2 : UInt<4>}
    
    io.forward_rs1 <= UInt<1>("h00") @[DecodeForwardUnit.scala 23:20]
    io.forward_rs2 <= UInt<1>("h00") @[DecodeForwardUnit.scala 24:20]
    node _T = eq(io.ctrl_branch, UInt<1>("h01")) @[DecodeForwardUnit.scala 27:25]
    when _T : @[DecodeForwardUnit.scala 27:34]
      node _T_1 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 29:27]
      node _T_2 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 29:60]
      node _T_3 = and(_T_1, _T_2) @[DecodeForwardUnit.scala 29:42]
      node _T_4 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 29:87]
      node _T_5 = and(_T_3, _T_4) @[DecodeForwardUnit.scala 29:68]
      node _T_6 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 29:122]
      node _T_7 = and(_T_5, _T_6) @[DecodeForwardUnit.scala 29:103]
      when _T_7 : @[DecodeForwardUnit.scala 29:139]
        io.forward_rs1 <= UInt<1>("h01") @[DecodeForwardUnit.scala 30:24]
        io.forward_rs2 <= UInt<1>("h01") @[DecodeForwardUnit.scala 31:24]
        skip @[DecodeForwardUnit.scala 29:139]
      else : @[DecodeForwardUnit.scala 32:111]
        node _T_8 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 32:34]
        node _T_9 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 32:67]
        node _T_10 = and(_T_8, _T_9) @[DecodeForwardUnit.scala 32:49]
        node _T_11 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 32:94]
        node _T_12 = and(_T_10, _T_11) @[DecodeForwardUnit.scala 32:75]
        when _T_12 : @[DecodeForwardUnit.scala 32:111]
          io.forward_rs1 <= UInt<1>("h01") @[DecodeForwardUnit.scala 33:24]
          skip @[DecodeForwardUnit.scala 32:111]
        else : @[DecodeForwardUnit.scala 34:111]
          node _T_13 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 34:34]
          node _T_14 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 34:67]
          node _T_15 = and(_T_13, _T_14) @[DecodeForwardUnit.scala 34:49]
          node _T_16 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 34:94]
          node _T_17 = and(_T_15, _T_16) @[DecodeForwardUnit.scala 34:75]
          when _T_17 : @[DecodeForwardUnit.scala 34:111]
            io.forward_rs2 <= UInt<1>("h01") @[DecodeForwardUnit.scala 35:24]
            skip @[DecodeForwardUnit.scala 34:111]
      node _T_18 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 39:28]
      node _T_19 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 39:62]
      node _T_20 = and(_T_18, _T_19) @[DecodeForwardUnit.scala 39:43]
      node _T_21 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 40:27]
      node _T_22 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 40:62]
      node _T_23 = and(_T_21, _T_22) @[DecodeForwardUnit.scala 40:43]
      node _T_24 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 40:97]
      node _T_25 = and(_T_23, _T_24) @[DecodeForwardUnit.scala 40:78]
      node _T_26 = not(_T_25) @[DecodeForwardUnit.scala 40:9]
      node _T_27 = and(_T_20, _T_26) @[DecodeForwardUnit.scala 39:70]
      node _T_28 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 41:26]
      node _T_29 = and(_T_27, _T_28) @[DecodeForwardUnit.scala 40:114]
      node _T_30 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 41:62]
      node _T_31 = and(_T_29, _T_30) @[DecodeForwardUnit.scala 41:42]
      when _T_31 : @[DecodeForwardUnit.scala 41:79]
        io.forward_rs1 <= UInt<2>("h02") @[DecodeForwardUnit.scala 43:24]
        io.forward_rs2 <= UInt<2>("h02") @[DecodeForwardUnit.scala 44:24]
        skip @[DecodeForwardUnit.scala 41:79]
      else : @[DecodeForwardUnit.scala 48:43]
        node _T_32 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 46:35]
        node _T_33 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 46:69]
        node _T_34 = and(_T_32, _T_33) @[DecodeForwardUnit.scala 46:50]
        node _T_35 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 47:27]
        node _T_36 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 47:62]
        node _T_37 = and(_T_35, _T_36) @[DecodeForwardUnit.scala 47:43]
        node _T_38 = not(_T_37) @[DecodeForwardUnit.scala 47:9]
        node _T_39 = and(_T_34, _T_38) @[DecodeForwardUnit.scala 46:77]
        node _T_40 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 48:26]
        node _T_41 = and(_T_39, _T_40) @[DecodeForwardUnit.scala 47:79]
        when _T_41 : @[DecodeForwardUnit.scala 48:43]
          io.forward_rs2 <= UInt<2>("h02") @[DecodeForwardUnit.scala 50:24]
          skip @[DecodeForwardUnit.scala 48:43]
        else : @[DecodeForwardUnit.scala 54:43]
          node _T_42 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 52:35]
          node _T_43 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 52:69]
          node _T_44 = and(_T_42, _T_43) @[DecodeForwardUnit.scala 52:50]
          node _T_45 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 53:27]
          node _T_46 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 53:62]
          node _T_47 = and(_T_45, _T_46) @[DecodeForwardUnit.scala 53:43]
          node _T_48 = not(_T_47) @[DecodeForwardUnit.scala 53:9]
          node _T_49 = and(_T_44, _T_48) @[DecodeForwardUnit.scala 52:77]
          node _T_50 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 54:26]
          node _T_51 = and(_T_49, _T_50) @[DecodeForwardUnit.scala 53:79]
          when _T_51 : @[DecodeForwardUnit.scala 54:43]
            io.forward_rs1 <= UInt<2>("h02") @[DecodeForwardUnit.scala 56:24]
            skip @[DecodeForwardUnit.scala 54:43]
          else : @[DecodeForwardUnit.scala 60:79]
            node _T_52 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 58:35]
            node _T_53 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 58:69]
            node _T_54 = and(_T_52, _T_53) @[DecodeForwardUnit.scala 58:50]
            node _T_55 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 59:27]
            node _T_56 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 59:62]
            node _T_57 = and(_T_55, _T_56) @[DecodeForwardUnit.scala 59:43]
            node _T_58 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 59:97]
            node _T_59 = and(_T_57, _T_58) @[DecodeForwardUnit.scala 59:78]
            node _T_60 = not(_T_59) @[DecodeForwardUnit.scala 59:9]
            node _T_61 = and(_T_54, _T_60) @[DecodeForwardUnit.scala 58:77]
            node _T_62 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 60:26]
            node _T_63 = and(_T_61, _T_62) @[DecodeForwardUnit.scala 59:114]
            node _T_64 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 60:62]
            node _T_65 = and(_T_63, _T_64) @[DecodeForwardUnit.scala 60:42]
            when _T_65 : @[DecodeForwardUnit.scala 60:79]
              io.forward_rs1 <= UInt<3>("h04") @[DecodeForwardUnit.scala 62:24]
              io.forward_rs2 <= UInt<3>("h04") @[DecodeForwardUnit.scala 63:24]
              skip @[DecodeForwardUnit.scala 60:79]
            else : @[DecodeForwardUnit.scala 67:43]
              node _T_66 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 65:35]
              node _T_67 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 65:69]
              node _T_68 = and(_T_66, _T_67) @[DecodeForwardUnit.scala 65:50]
              node _T_69 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 66:27]
              node _T_70 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 66:62]
              node _T_71 = and(_T_69, _T_70) @[DecodeForwardUnit.scala 66:43]
              node _T_72 = not(_T_71) @[DecodeForwardUnit.scala 66:9]
              node _T_73 = and(_T_68, _T_72) @[DecodeForwardUnit.scala 65:77]
              node _T_74 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 67:26]
              node _T_75 = and(_T_73, _T_74) @[DecodeForwardUnit.scala 66:79]
              when _T_75 : @[DecodeForwardUnit.scala 67:43]
                io.forward_rs2 <= UInt<3>("h04") @[DecodeForwardUnit.scala 69:24]
                skip @[DecodeForwardUnit.scala 67:43]
              else : @[DecodeForwardUnit.scala 73:43]
                node _T_76 = eq(io.ctrl_branch, UInt<1>("h01")) @[DecodeForwardUnit.scala 71:34]
                node _T_77 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 71:61]
                node _T_78 = and(_T_76, _T_77) @[DecodeForwardUnit.scala 71:42]
                node _T_79 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 71:95]
                node _T_80 = and(_T_78, _T_79) @[DecodeForwardUnit.scala 71:76]
                node _T_81 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 72:27]
                node _T_82 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 72:62]
                node _T_83 = and(_T_81, _T_82) @[DecodeForwardUnit.scala 72:43]
                node _T_84 = not(_T_83) @[DecodeForwardUnit.scala 72:9]
                node _T_85 = and(_T_80, _T_84) @[DecodeForwardUnit.scala 71:103]
                node _T_86 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 73:26]
                node _T_87 = and(_T_85, _T_86) @[DecodeForwardUnit.scala 72:79]
                when _T_87 : @[DecodeForwardUnit.scala 73:43]
                  io.forward_rs1 <= UInt<3>("h04") @[DecodeForwardUnit.scala 75:24]
                  skip @[DecodeForwardUnit.scala 73:43]
      node _T_88 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 80:28]
      node _T_89 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 80:62]
      node _T_90 = and(_T_88, _T_89) @[DecodeForwardUnit.scala 80:43]
      node _T_91 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 82:27]
      node _T_92 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 82:62]
      node _T_93 = and(_T_91, _T_92) @[DecodeForwardUnit.scala 82:43]
      node _T_94 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 82:97]
      node _T_95 = and(_T_93, _T_94) @[DecodeForwardUnit.scala 82:78]
      node _T_96 = not(_T_95) @[DecodeForwardUnit.scala 82:9]
      node _T_97 = and(_T_90, _T_96) @[DecodeForwardUnit.scala 80:70]
      node _T_98 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 84:28]
      node _T_99 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 84:64]
      node _T_100 = and(_T_98, _T_99) @[DecodeForwardUnit.scala 84:44]
      node _T_101 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 84:100]
      node _T_102 = and(_T_100, _T_101) @[DecodeForwardUnit.scala 84:80]
      node _T_103 = not(_T_102) @[DecodeForwardUnit.scala 84:9]
      node _T_104 = and(_T_97, _T_103) @[DecodeForwardUnit.scala 82:114]
      node _T_105 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 85:26]
      node _T_106 = and(_T_104, _T_105) @[DecodeForwardUnit.scala 84:117]
      node _T_107 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 85:62]
      node _T_108 = and(_T_106, _T_107) @[DecodeForwardUnit.scala 85:42]
      when _T_108 : @[DecodeForwardUnit.scala 85:79]
        io.forward_rs1 <= UInt<2>("h03") @[DecodeForwardUnit.scala 87:24]
        io.forward_rs2 <= UInt<2>("h03") @[DecodeForwardUnit.scala 88:24]
        skip @[DecodeForwardUnit.scala 85:79]
      else : @[DecodeForwardUnit.scala 96:45]
        node _T_109 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 91:35]
        node _T_110 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 91:69]
        node _T_111 = and(_T_109, _T_110) @[DecodeForwardUnit.scala 91:50]
        node _T_112 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 93:29]
        node _T_113 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 93:64]
        node _T_114 = and(_T_112, _T_113) @[DecodeForwardUnit.scala 93:45]
        node _T_115 = not(_T_114) @[DecodeForwardUnit.scala 93:11]
        node _T_116 = and(_T_111, _T_115) @[DecodeForwardUnit.scala 91:77]
        node _T_117 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 95:30]
        node _T_118 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 95:66]
        node _T_119 = and(_T_117, _T_118) @[DecodeForwardUnit.scala 95:46]
        node _T_120 = not(_T_119) @[DecodeForwardUnit.scala 95:11]
        node _T_121 = and(_T_116, _T_120) @[DecodeForwardUnit.scala 93:81]
        node _T_122 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 96:28]
        node _T_123 = and(_T_121, _T_122) @[DecodeForwardUnit.scala 95:83]
        when _T_123 : @[DecodeForwardUnit.scala 96:45]
          io.forward_rs2 <= UInt<2>("h03") @[DecodeForwardUnit.scala 98:26]
          skip @[DecodeForwardUnit.scala 96:45]
        else : @[DecodeForwardUnit.scala 106:45]
          node _T_124 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 101:35]
          node _T_125 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 101:69]
          node _T_126 = and(_T_124, _T_125) @[DecodeForwardUnit.scala 101:50]
          node _T_127 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 103:29]
          node _T_128 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 103:64]
          node _T_129 = and(_T_127, _T_128) @[DecodeForwardUnit.scala 103:45]
          node _T_130 = not(_T_129) @[DecodeForwardUnit.scala 103:11]
          node _T_131 = and(_T_126, _T_130) @[DecodeForwardUnit.scala 101:77]
          node _T_132 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 105:30]
          node _T_133 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 105:66]
          node _T_134 = and(_T_132, _T_133) @[DecodeForwardUnit.scala 105:46]
          node _T_135 = not(_T_134) @[DecodeForwardUnit.scala 105:11]
          node _T_136 = and(_T_131, _T_135) @[DecodeForwardUnit.scala 103:81]
          node _T_137 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 106:28]
          node _T_138 = and(_T_136, _T_137) @[DecodeForwardUnit.scala 105:83]
          when _T_138 : @[DecodeForwardUnit.scala 106:45]
            io.forward_rs1 <= UInt<2>("h03") @[DecodeForwardUnit.scala 108:26]
            skip @[DecodeForwardUnit.scala 106:45]
          else : @[DecodeForwardUnit.scala 115:79]
            node _T_139 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 110:37]
            node _T_140 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 110:71]
            node _T_141 = and(_T_139, _T_140) @[DecodeForwardUnit.scala 110:52]
            node _T_142 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 112:27]
            node _T_143 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 112:62]
            node _T_144 = and(_T_142, _T_143) @[DecodeForwardUnit.scala 112:43]
            node _T_145 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 112:97]
            node _T_146 = and(_T_144, _T_145) @[DecodeForwardUnit.scala 112:78]
            node _T_147 = not(_T_146) @[DecodeForwardUnit.scala 112:9]
            node _T_148 = and(_T_141, _T_147) @[DecodeForwardUnit.scala 110:79]
            node _T_149 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 114:28]
            node _T_150 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 114:64]
            node _T_151 = and(_T_149, _T_150) @[DecodeForwardUnit.scala 114:44]
            node _T_152 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 114:100]
            node _T_153 = and(_T_151, _T_152) @[DecodeForwardUnit.scala 114:80]
            node _T_154 = not(_T_153) @[DecodeForwardUnit.scala 114:9]
            node _T_155 = and(_T_148, _T_154) @[DecodeForwardUnit.scala 112:114]
            node _T_156 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 115:26]
            node _T_157 = and(_T_155, _T_156) @[DecodeForwardUnit.scala 114:117]
            node _T_158 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 115:62]
            node _T_159 = and(_T_157, _T_158) @[DecodeForwardUnit.scala 115:42]
            when _T_159 : @[DecodeForwardUnit.scala 115:79]
              io.forward_rs1 <= UInt<3>("h05") @[DecodeForwardUnit.scala 117:24]
              io.forward_rs2 <= UInt<3>("h05") @[DecodeForwardUnit.scala 118:24]
              skip @[DecodeForwardUnit.scala 115:79]
            else : @[DecodeForwardUnit.scala 126:45]
              node _T_160 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 121:35]
              node _T_161 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 121:69]
              node _T_162 = and(_T_160, _T_161) @[DecodeForwardUnit.scala 121:50]
              node _T_163 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 123:29]
              node _T_164 = eq(io.ID_EX_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 123:64]
              node _T_165 = and(_T_163, _T_164) @[DecodeForwardUnit.scala 123:45]
              node _T_166 = not(_T_165) @[DecodeForwardUnit.scala 123:11]
              node _T_167 = and(_T_162, _T_166) @[DecodeForwardUnit.scala 121:77]
              node _T_168 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 125:30]
              node _T_169 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 125:66]
              node _T_170 = and(_T_168, _T_169) @[DecodeForwardUnit.scala 125:46]
              node _T_171 = not(_T_170) @[DecodeForwardUnit.scala 125:11]
              node _T_172 = and(_T_167, _T_171) @[DecodeForwardUnit.scala 123:81]
              node _T_173 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[DecodeForwardUnit.scala 126:28]
              node _T_174 = and(_T_172, _T_173) @[DecodeForwardUnit.scala 125:83]
              when _T_174 : @[DecodeForwardUnit.scala 126:45]
                io.forward_rs2 <= UInt<3>("h05") @[DecodeForwardUnit.scala 128:26]
                skip @[DecodeForwardUnit.scala 126:45]
              else : @[DecodeForwardUnit.scala 136:45]
                node _T_175 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 131:35]
                node _T_176 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 131:69]
                node _T_177 = and(_T_175, _T_176) @[DecodeForwardUnit.scala 131:50]
                node _T_178 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 133:29]
                node _T_179 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 133:64]
                node _T_180 = and(_T_178, _T_179) @[DecodeForwardUnit.scala 133:45]
                node _T_181 = not(_T_180) @[DecodeForwardUnit.scala 133:11]
                node _T_182 = and(_T_177, _T_181) @[DecodeForwardUnit.scala 131:77]
                node _T_183 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 135:30]
                node _T_184 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 135:66]
                node _T_185 = and(_T_183, _T_184) @[DecodeForwardUnit.scala 135:46]
                node _T_186 = not(_T_185) @[DecodeForwardUnit.scala 135:11]
                node _T_187 = and(_T_182, _T_186) @[DecodeForwardUnit.scala 133:81]
                node _T_188 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 136:28]
                node _T_189 = and(_T_187, _T_188) @[DecodeForwardUnit.scala 135:82]
                when _T_189 : @[DecodeForwardUnit.scala 136:45]
                  io.forward_rs1 <= UInt<3>("h05") @[DecodeForwardUnit.scala 138:26]
                  skip @[DecodeForwardUnit.scala 136:45]
      skip @[DecodeForwardUnit.scala 27:34]
    else : @[DecodeForwardUnit.scala 144:41]
      node _T_190 = eq(io.ctrl_branch, UInt<1>("h00")) @[DecodeForwardUnit.scala 144:32]
      when _T_190 : @[DecodeForwardUnit.scala 144:41]
        node _T_191 = eq(io.execute_regwrite, UInt<1>("h01")) @[DecodeForwardUnit.scala 146:34]
        node _T_192 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 146:60]
        node _T_193 = and(_T_191, _T_192) @[DecodeForwardUnit.scala 146:42]
        node _T_194 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 146:93]
        node _T_195 = and(_T_193, _T_194) @[DecodeForwardUnit.scala 146:75]
        node _T_196 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 146:120]
        node _T_197 = and(_T_195, _T_196) @[DecodeForwardUnit.scala 146:101]
        when _T_197 : @[DecodeForwardUnit.scala 146:136]
          io.forward_rs1 <= UInt<3>("h06") @[DecodeForwardUnit.scala 147:26]
          skip @[DecodeForwardUnit.scala 146:136]
        node _T_198 = eq(io.mem_regwrite, UInt<1>("h01")) @[DecodeForwardUnit.scala 151:30]
        node _T_199 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 151:57]
        node _T_200 = and(_T_198, _T_199) @[DecodeForwardUnit.scala 151:38]
        node _T_201 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 151:91]
        node _T_202 = and(_T_200, _T_201) @[DecodeForwardUnit.scala 151:72]
        node _T_203 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 152:29]
        node _T_204 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 152:64]
        node _T_205 = and(_T_203, _T_204) @[DecodeForwardUnit.scala 152:45]
        node _T_206 = not(_T_205) @[DecodeForwardUnit.scala 152:11]
        node _T_207 = and(_T_202, _T_206) @[DecodeForwardUnit.scala 151:99]
        node _T_208 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 153:28]
        node _T_209 = and(_T_207, _T_208) @[DecodeForwardUnit.scala 152:81]
        when _T_209 : @[DecodeForwardUnit.scala 153:45]
          io.forward_rs1 <= UInt<3>("h07") @[DecodeForwardUnit.scala 155:26]
          skip @[DecodeForwardUnit.scala 153:45]
        else : @[DecodeForwardUnit.scala 160:47]
          node _T_210 = eq(io.mem_regwrite, UInt<1>("h01")) @[DecodeForwardUnit.scala 158:37]
          node _T_211 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 158:64]
          node _T_212 = and(_T_210, _T_211) @[DecodeForwardUnit.scala 158:45]
          node _T_213 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 158:98]
          node _T_214 = and(_T_212, _T_213) @[DecodeForwardUnit.scala 158:79]
          node _T_215 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 159:31]
          node _T_216 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 159:66]
          node _T_217 = and(_T_215, _T_216) @[DecodeForwardUnit.scala 159:47]
          node _T_218 = not(_T_217) @[DecodeForwardUnit.scala 159:13]
          node _T_219 = and(_T_214, _T_218) @[DecodeForwardUnit.scala 158:106]
          node _T_220 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 160:30]
          node _T_221 = and(_T_219, _T_220) @[DecodeForwardUnit.scala 159:83]
          when _T_221 : @[DecodeForwardUnit.scala 160:47]
            io.forward_rs1 <= UInt<4>("h09") @[DecodeForwardUnit.scala 162:28]
            skip @[DecodeForwardUnit.scala 160:47]
        node _T_222 = eq(io.wb_regwrite, UInt<1>("h01")) @[DecodeForwardUnit.scala 168:29]
        node _T_223 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 168:56]
        node _T_224 = and(_T_222, _T_223) @[DecodeForwardUnit.scala 168:37]
        node _T_225 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 168:90]
        node _T_226 = and(_T_224, _T_225) @[DecodeForwardUnit.scala 168:71]
        node _T_227 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 170:29]
        node _T_228 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 170:64]
        node _T_229 = and(_T_227, _T_228) @[DecodeForwardUnit.scala 170:45]
        node _T_230 = not(_T_229) @[DecodeForwardUnit.scala 170:11]
        node _T_231 = and(_T_226, _T_230) @[DecodeForwardUnit.scala 168:98]
        node _T_232 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 172:30]
        node _T_233 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 172:66]
        node _T_234 = and(_T_232, _T_233) @[DecodeForwardUnit.scala 172:46]
        node _T_235 = not(_T_234) @[DecodeForwardUnit.scala 172:11]
        node _T_236 = and(_T_231, _T_235) @[DecodeForwardUnit.scala 170:81]
        node _T_237 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 173:28]
        node _T_238 = and(_T_236, _T_237) @[DecodeForwardUnit.scala 172:83]
        when _T_238 : @[DecodeForwardUnit.scala 173:45]
          io.forward_rs1 <= UInt<4>("h08") @[DecodeForwardUnit.scala 175:26]
          skip @[DecodeForwardUnit.scala 173:45]
        else : @[DecodeForwardUnit.scala 183:45]
          node _T_239 = eq(io.wb_regwrite, UInt<1>("h01")) @[DecodeForwardUnit.scala 178:37]
          node _T_240 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 178:64]
          node _T_241 = and(_T_239, _T_240) @[DecodeForwardUnit.scala 178:45]
          node _T_242 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[DecodeForwardUnit.scala 178:98]
          node _T_243 = and(_T_241, _T_242) @[DecodeForwardUnit.scala 178:79]
          node _T_244 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 180:29]
          node _T_245 = eq(io.ID_EX_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 180:64]
          node _T_246 = and(_T_244, _T_245) @[DecodeForwardUnit.scala 180:45]
          node _T_247 = not(_T_246) @[DecodeForwardUnit.scala 180:11]
          node _T_248 = and(_T_243, _T_247) @[DecodeForwardUnit.scala 178:106]
          node _T_249 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[DecodeForwardUnit.scala 182:30]
          node _T_250 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 182:66]
          node _T_251 = and(_T_249, _T_250) @[DecodeForwardUnit.scala 182:46]
          node _T_252 = not(_T_251) @[DecodeForwardUnit.scala 182:11]
          node _T_253 = and(_T_248, _T_252) @[DecodeForwardUnit.scala 180:81]
          node _T_254 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[DecodeForwardUnit.scala 183:28]
          node _T_255 = and(_T_253, _T_254) @[DecodeForwardUnit.scala 182:83]
          when _T_255 : @[DecodeForwardUnit.scala 183:45]
            io.forward_rs1 <= UInt<4>("h0a") @[DecodeForwardUnit.scala 185:26]
            skip @[DecodeForwardUnit.scala 183:45]
        skip @[DecodeForwardUnit.scala 144:41]
    
  module BranchLogic : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_rs1 : SInt<32>, flip in_rs2 : SInt<32>, flip in_func3 : UInt<3>, output : UInt<1>}
    
    node _T = eq(io.in_func3, UInt<1>("h00")) @[BranchLogic.scala 13:20]
    when _T : @[BranchLogic.scala 13:34]
      node _T_1 = eq(io.in_rs1, io.in_rs2) @[BranchLogic.scala 15:20]
      when _T_1 : @[BranchLogic.scala 15:35]
        io.output <= UInt<1>("h01") @[BranchLogic.scala 16:17]
        skip @[BranchLogic.scala 15:35]
      else : @[BranchLogic.scala 17:18]
        io.output <= UInt<1>("h00") @[BranchLogic.scala 18:17]
        skip @[BranchLogic.scala 17:18]
      skip @[BranchLogic.scala 13:34]
    else : @[BranchLogic.scala 20:41]
      node _T_2 = eq(io.in_func3, UInt<1>("h01")) @[BranchLogic.scala 20:27]
      when _T_2 : @[BranchLogic.scala 20:41]
        node _T_3 = neq(io.in_rs1, io.in_rs2) @[BranchLogic.scala 22:20]
        when _T_3 : @[BranchLogic.scala 22:35]
          io.output <= UInt<1>("h01") @[BranchLogic.scala 23:17]
          skip @[BranchLogic.scala 22:35]
        else : @[BranchLogic.scala 24:18]
          io.output <= UInt<1>("h00") @[BranchLogic.scala 25:17]
          skip @[BranchLogic.scala 24:18]
        skip @[BranchLogic.scala 20:41]
      else : @[BranchLogic.scala 27:41]
        node _T_4 = eq(io.in_func3, UInt<3>("h04")) @[BranchLogic.scala 27:27]
        when _T_4 : @[BranchLogic.scala 27:41]
          node _T_5 = lt(io.in_rs1, io.in_rs2) @[BranchLogic.scala 29:20]
          when _T_5 : @[BranchLogic.scala 29:33]
            io.output <= UInt<1>("h01") @[BranchLogic.scala 30:17]
            skip @[BranchLogic.scala 29:33]
          else : @[BranchLogic.scala 31:18]
            io.output <= UInt<1>("h00") @[BranchLogic.scala 32:17]
            skip @[BranchLogic.scala 31:18]
          skip @[BranchLogic.scala 27:41]
        else : @[BranchLogic.scala 34:41]
          node _T_6 = eq(io.in_func3, UInt<3>("h05")) @[BranchLogic.scala 34:27]
          when _T_6 : @[BranchLogic.scala 34:41]
            node _T_7 = geq(io.in_rs1, io.in_rs2) @[BranchLogic.scala 36:20]
            when _T_7 : @[BranchLogic.scala 36:34]
              io.output <= UInt<1>("h01") @[BranchLogic.scala 37:17]
              skip @[BranchLogic.scala 36:34]
            else : @[BranchLogic.scala 38:18]
              io.output <= UInt<1>("h00") @[BranchLogic.scala 39:17]
              skip @[BranchLogic.scala 38:18]
            skip @[BranchLogic.scala 34:41]
          else : @[BranchLogic.scala 41:41]
            node _T_8 = eq(io.in_func3, UInt<3>("h06")) @[BranchLogic.scala 41:27]
            when _T_8 : @[BranchLogic.scala 41:41]
              node _T_9 = asUInt(io.in_rs1) @[BranchLogic.scala 43:20]
              node _T_10 = asUInt(io.in_rs2) @[BranchLogic.scala 43:39]
              node _T_11 = lt(_T_9, _T_10) @[BranchLogic.scala 43:27]
              when _T_11 : @[BranchLogic.scala 43:47]
                io.output <= UInt<1>("h01") @[BranchLogic.scala 44:17]
                skip @[BranchLogic.scala 43:47]
              else : @[BranchLogic.scala 45:18]
                io.output <= UInt<1>("h00") @[BranchLogic.scala 46:17]
                skip @[BranchLogic.scala 45:18]
              skip @[BranchLogic.scala 41:41]
            else : @[BranchLogic.scala 48:41]
              node _T_12 = eq(io.in_func3, UInt<3>("h07")) @[BranchLogic.scala 48:27]
              when _T_12 : @[BranchLogic.scala 48:41]
                node _T_13 = asUInt(io.in_rs1) @[BranchLogic.scala 50:20]
                node _T_14 = asUInt(io.in_rs2) @[BranchLogic.scala 50:40]
                node _T_15 = geq(_T_13, _T_14) @[BranchLogic.scala 50:27]
                when _T_15 : @[BranchLogic.scala 50:48]
                  io.output <= UInt<1>("h01") @[BranchLogic.scala 51:17]
                  skip @[BranchLogic.scala 50:48]
                else : @[BranchLogic.scala 52:18]
                  io.output <= UInt<1>("h00") @[BranchLogic.scala 53:17]
                  skip @[BranchLogic.scala 52:18]
                skip @[BranchLogic.scala 48:41]
              else : @[BranchLogic.scala 55:16]
                io.output <= UInt<1>("h00") @[BranchLogic.scala 56:15]
                skip @[BranchLogic.scala 55:16]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip regWrite : UInt<1>, flip rd_sel : UInt<5>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip writeData : SInt<32>, rs1 : SInt<32>, rs2 : SInt<32>, reg_7 : SInt<32>}
    
    wire _T : SInt<32>[32] @[RegisterFile.scala 20:36]
    _T[0] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[1] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[2] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[3] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[4] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[5] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[6] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[7] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[8] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[9] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[10] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[11] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[12] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[13] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[14] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[15] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[16] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[17] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[18] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[19] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[20] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[21] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[22] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[23] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[24] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[25] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[26] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[27] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[28] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[29] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[30] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    _T[31] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 20:36]
    reg registers : SInt<32>[32], clock with : (reset => (reset, _T)) @[RegisterFile.scala 20:28]
    io.reg_7 <= registers[7] @[RegisterFile.scala 22:14]
    registers[0] <= asSInt(UInt<1>("h00")) @[RegisterFile.scala 24:18]
    io.rs1 <= registers[io.rs1_sel] @[RegisterFile.scala 25:12]
    io.rs2 <= registers[io.rs2_sel] @[RegisterFile.scala 26:12]
    node _T_1 = eq(io.regWrite, UInt<1>("h01")) @[RegisterFile.scala 27:22]
    when _T_1 : @[RegisterFile.scala 27:55]
      node _T_2 = eq(io.rd_sel, UInt<1>("h00")) @[RegisterFile.scala 28:24]
      when _T_2 : @[RegisterFile.scala 28:40]
        registers[io.rd_sel] <= asSInt(UInt<1>("h00")) @[RegisterFile.scala 29:34]
        skip @[RegisterFile.scala 28:40]
      else : @[RegisterFile.scala 30:22]
        registers[io.rd_sel] <= io.writeData @[RegisterFile.scala 31:34]
        skip @[RegisterFile.scala 30:22]
      skip @[RegisterFile.scala 27:55]
    
  module ImmediateGeneration : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, flip pc : SInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, u_imm : SInt<32>, uj_imm : SInt<32>, i_imm : SInt<32>}
    
    node s_lower_half = bits(io.instruction, 11, 7) @[ImmediateGeneration.scala 19:38]
    node s_upper_half = bits(io.instruction, 31, 25) @[ImmediateGeneration.scala 20:38]
    node s_imm_12 = cat(s_upper_half, s_lower_half) @[Cat.scala 29:58]
    node _T = bits(s_imm_12, 11, 11) @[ImmediateGeneration.scala 22:41]
    node _T_1 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_2 = mux(_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node s_imm_32 = cat(_T_2, s_imm_12) @[Cat.scala 29:58]
    node _T_3 = asSInt(s_imm_32) @[ImmediateGeneration.scala 23:26]
    io.s_imm <= _T_3 @[ImmediateGeneration.scala 23:14]
    node sb_lower_half = bits(io.instruction, 11, 8) @[ImmediateGeneration.scala 28:39]
    node sb_upper_half = bits(io.instruction, 30, 25) @[ImmediateGeneration.scala 29:39]
    node sb_11thbit = bits(io.instruction, 7, 7) @[ImmediateGeneration.scala 30:36]
    node sb_12thbit = bits(io.instruction, 31, 31) @[ImmediateGeneration.scala 31:36]
    node _T_4 = asUInt(asSInt(UInt<1>("h00"))) @[Cat.scala 29:58]
    node _T_5 = cat(sb_lower_half, _T_4) @[Cat.scala 29:58]
    node _T_6 = cat(sb_12thbit, sb_11thbit) @[Cat.scala 29:58]
    node _T_7 = cat(_T_6, sb_upper_half) @[Cat.scala 29:58]
    node sb_imm_13 = cat(_T_7, _T_5) @[Cat.scala 29:58]
    node _T_8 = bits(sb_imm_13, 12, 12) @[ImmediateGeneration.scala 33:43]
    node _T_9 = bits(_T_8, 0, 0) @[Bitwise.scala 72:15]
    node _T_10 = mux(_T_9, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_11 = cat(_T_10, sb_imm_13) @[Cat.scala 29:58]
    node sb_imm_32 = asSInt(_T_11) @[ImmediateGeneration.scala 33:61]
    node _T_12 = add(sb_imm_32, io.pc) @[ImmediateGeneration.scala 34:28]
    node _T_13 = tail(_T_12, 1) @[ImmediateGeneration.scala 34:28]
    node _T_14 = asSInt(_T_13) @[ImmediateGeneration.scala 34:28]
    io.sb_imm <= _T_14 @[ImmediateGeneration.scala 34:15]
    node u_imm_20 = bits(io.instruction, 31, 12) @[ImmediateGeneration.scala 39:34]
    node _T_15 = bits(u_imm_20, 19, 19) @[ImmediateGeneration.scala 40:41]
    node _T_16 = bits(_T_15, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node u_imm_32 = cat(_T_17, u_imm_20) @[Cat.scala 29:58]
    node u_imm_32_shifted = dshl(u_imm_32, UInt<4>("h0c")) @[ImmediateGeneration.scala 42:37]
    node _T_18 = asSInt(u_imm_32_shifted) @[ImmediateGeneration.scala 43:34]
    io.u_imm <= _T_18 @[ImmediateGeneration.scala 43:14]
    node uj_lower_half = bits(io.instruction, 30, 21) @[ImmediateGeneration.scala 48:39]
    node uj_11thbit = bits(io.instruction, 20, 20) @[ImmediateGeneration.scala 49:36]
    node uj_upper_half = bits(io.instruction, 19, 12) @[ImmediateGeneration.scala 50:39]
    node uj_20thbit = bits(io.instruction, 31, 31) @[ImmediateGeneration.scala 51:36]
    node _T_19 = asUInt(asSInt(UInt<1>("h00"))) @[Cat.scala 29:58]
    node _T_20 = cat(uj_lower_half, _T_19) @[Cat.scala 29:58]
    node _T_21 = cat(uj_20thbit, uj_upper_half) @[Cat.scala 29:58]
    node _T_22 = cat(_T_21, uj_11thbit) @[Cat.scala 29:58]
    node uj_imm_21 = cat(_T_22, _T_20) @[Cat.scala 29:58]
    node _T_23 = bits(uj_imm_21, 20, 20) @[ImmediateGeneration.scala 53:43]
    node _T_24 = bits(_T_23, 0, 0) @[Bitwise.scala 72:15]
    node _T_25 = mux(_T_24, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node _T_26 = cat(_T_25, uj_imm_21) @[Cat.scala 29:58]
    node uj_imm_32 = asSInt(_T_26) @[ImmediateGeneration.scala 53:61]
    node _T_27 = add(uj_imm_32, io.pc) @[ImmediateGeneration.scala 54:28]
    node _T_28 = tail(_T_27, 1) @[ImmediateGeneration.scala 54:28]
    node _T_29 = asSInt(_T_28) @[ImmediateGeneration.scala 54:28]
    io.uj_imm <= _T_29 @[ImmediateGeneration.scala 54:15]
    node i_imm_12 = bits(io.instruction, 31, 20) @[ImmediateGeneration.scala 59:34]
    node _T_30 = bits(i_imm_12, 11, 11) @[ImmediateGeneration.scala 60:41]
    node _T_31 = bits(_T_30, 0, 0) @[Bitwise.scala 72:15]
    node _T_32 = mux(_T_31, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node i_imm_32 = cat(_T_32, i_imm_12) @[Cat.scala 29:58]
    node _T_33 = asSInt(i_imm_32) @[ImmediateGeneration.scala 61:26]
    io.i_imm <= _T_33 @[ImmediateGeneration.scala 61:14]
    
  module StructuralDetector : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip MEM_WB_regWr : UInt<1>, flip MEM_WB_REGRD : UInt<5>, flip inst_op_in : UInt<7>, fwd_rs1 : UInt<1>, fwd_rs2 : UInt<1>}
    
    node _T = eq(io.MEM_WB_regWr, UInt<1>("h01")) @[StructuralDetector.scala 27:24]
    node _T_1 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[StructuralDetector.scala 27:51]
    node _T_2 = and(_T, _T_1) @[StructuralDetector.scala 27:32]
    node _T_3 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[StructuralDetector.scala 27:86]
    node _T_4 = and(_T_2, _T_3) @[StructuralDetector.scala 27:66]
    node _T_5 = neq(io.inst_op_in, UInt<6>("h037")) @[StructuralDetector.scala 27:118]
    node _T_6 = and(_T_4, _T_5) @[StructuralDetector.scala 27:101]
    when _T_6 : @[StructuralDetector.scala 27:136]
      io.fwd_rs1 <= UInt<1>("h01") @[StructuralDetector.scala 28:16]
      skip @[StructuralDetector.scala 27:136]
    else : @[StructuralDetector.scala 29:16]
      io.fwd_rs1 <= UInt<1>("h00") @[StructuralDetector.scala 30:16]
      skip @[StructuralDetector.scala 29:16]
    node _T_7 = eq(io.MEM_WB_regWr, UInt<1>("h01")) @[StructuralDetector.scala 33:24]
    node _T_8 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[StructuralDetector.scala 33:51]
    node _T_9 = and(_T_7, _T_8) @[StructuralDetector.scala 33:32]
    node _T_10 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[StructuralDetector.scala 33:86]
    node _T_11 = and(_T_9, _T_10) @[StructuralDetector.scala 33:67]
    node _T_12 = neq(io.inst_op_in, UInt<6>("h037")) @[StructuralDetector.scala 33:118]
    node _T_13 = and(_T_11, _T_12) @[StructuralDetector.scala 33:101]
    when _T_13 : @[StructuralDetector.scala 33:136]
      io.fwd_rs2 <= UInt<1>("h01") @[StructuralDetector.scala 34:16]
      skip @[StructuralDetector.scala 33:136]
    else : @[StructuralDetector.scala 35:16]
      io.fwd_rs2 <= UInt<1>("h00") @[StructuralDetector.scala 36:16]
      skip @[StructuralDetector.scala 35:16]
    
  module Jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip input_a : SInt<32>, flip input_b : SInt<32>, output : SInt<32>}
    
    node _T = add(io.input_a, io.input_b) @[Jalr.scala 12:26]
    node _T_1 = tail(_T, 1) @[Jalr.scala 12:26]
    node sum = asSInt(_T_1) @[Jalr.scala 12:26]
    node _T_2 = and(sum, asSInt(UInt<33>("h0fffffffe"))) @[Jalr.scala 13:22]
    node _T_3 = asSInt(_T_2) @[Jalr.scala 13:22]
    io.output <= _T_3 @[Jalr.scala 13:15]
    
  module CsrPrimitive : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<6>, flip i_wr_en : UInt<1>, o_rd_data : UInt<6>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<6>, clock with : (reset => (reset, UInt<6>("h0d"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<32>, flip i_wr_en : UInt<1>, o_rd_data : UInt<32>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<3>, flip i_wr_en : UInt<1>, o_rd_data : UInt<3>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<3>, clock with : (reset => (reset, UInt<3>("h04"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<32>, flip i_wr_en : UInt<1>, o_rd_data : UInt<32>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<6>, flip i_wr_en : UInt<1>, o_rd_data : UInt<6>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<32>, flip i_wr_en : UInt<1>, o_rd_data : UInt<32>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<32>, flip i_wr_en : UInt<1>, o_rd_data : UInt<32>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h01"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<28>, flip i_wr_en : UInt<1>, o_rd_data : UInt<28>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<28>, clock with : (reset => (reset, UInt<28>("h00"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<32>, flip i_wr_en : UInt<1>, o_rd_data : UInt<32>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<32>, flip i_wr_en : UInt<1>, o_rd_data : UInt<32>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module CsrPrimitive_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_wrdata : UInt<32>, flip i_wr_en : UInt<1>, o_rd_data : UInt<32>, o_rd_error : UInt<1>}
    
    reg rdata_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[CsrPrimitive.scala 13:24]
    when io.i_wr_en : @[CsrPrimitive.scala 15:3]
      rdata_q <= io.i_wrdata @[CsrPrimitive.scala 16:13]
      skip @[CsrPrimitive.scala 15:3]
    io.o_rd_data <= rdata_q @[CsrPrimitive.scala 18:16]
    io.o_rd_error <= UInt<1>("h00") @[CsrPrimitive.scala 31:19]
    
  module BrqCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<64> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<64> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<64> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<64> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 63, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<63>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 63, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 63, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 63, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    counter <= counter_q @[BrqCounter.scala 72:13]
    cn_lsb <= UInt<1>("h00") @[BrqCounter.scala 73:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 74:12]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<64> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<64> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<64> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<64> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 63, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<63>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 63, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 63, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 63, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    counter <= counter_q @[BrqCounter.scala 72:13]
    cn_lsb <= UInt<1>("h00") @[BrqCounter.scala 73:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 74:12]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module BrqCounter_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_counter_inc : UInt<1>, flip i_counterh_we : UInt<1>, flip i_counter_we : UInt<1>, flip i_counter_val : UInt<32>, o_counter_val : UInt<64>}
    
    wire counter : UInt<64> @[BrqCounter.scala 16:21]
    wire counter_upd : UInt<40> @[BrqCounter.scala 17:25]
    wire counter_load : UInt<64> @[BrqCounter.scala 18:26]
    wire we : UInt<1> @[BrqCounter.scala 19:17]
    wire counter_d : UInt<40> @[BrqCounter.scala 20:23]
    wire counter_msb : UInt<32> @[BrqCounter.scala 21:25]
    wire counter_lsb : UInt<32> @[BrqCounter.scala 22:25]
    wire cn_lsb : UInt<40> @[BrqCounter.scala 23:25]
    wire cn_msb : UInt<40> @[BrqCounter.scala 24:25]
    node _T = or(io.i_counter_we, io.i_counterh_we) @[BrqCounter.scala 27:35]
    we <= _T @[BrqCounter.scala 27:16]
    node _T_1 = cat(cn_msb, cn_lsb) @[Cat.scala 29:58]
    counter <= _T_1 @[BrqCounter.scala 28:16]
    node _T_2 = cat(counter_msb, counter_lsb) @[Cat.scala 29:58]
    counter_load <= _T_2 @[BrqCounter.scala 29:16]
    node _T_3 = bits(counter, 63, 32) @[BrqCounter.scala 30:26]
    counter_msb <= _T_3 @[BrqCounter.scala 30:16]
    counter_lsb <= io.i_counter_val @[BrqCounter.scala 31:16]
    when io.i_counterh_we : @[BrqCounter.scala 34:3]
      counter_msb <= io.i_counter_val @[BrqCounter.scala 35:17]
      node _T_4 = bits(counter, 31, 0) @[BrqCounter.scala 36:28]
      counter_lsb <= _T_4 @[BrqCounter.scala 36:18]
      skip @[BrqCounter.scala 34:3]
    node _T_5 = bits(counter, 39, 0) @[BrqCounter.scala 41:25]
    node _T_6 = cat(UInt<39>("h00"), UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_7 = add(_T_5, _T_6) @[BrqCounter.scala 41:47]
    node _T_8 = tail(_T_7, 1) @[BrqCounter.scala 41:47]
    counter_upd <= _T_8 @[BrqCounter.scala 41:15]
    when we : @[BrqCounter.scala 45:3]
      node _T_9 = bits(counter_load, 39, 0) @[BrqCounter.scala 46:30]
      counter_d <= _T_9 @[BrqCounter.scala 46:15]
      skip @[BrqCounter.scala 45:3]
    else : @[BrqCounter.scala 49:5]
      when io.i_counter_inc : @[BrqCounter.scala 49:5]
        node _T_10 = bits(counter_upd, 39, 0) @[BrqCounter.scala 50:31]
        counter_d <= _T_10 @[BrqCounter.scala 50:17]
        skip @[BrqCounter.scala 49:5]
      else : @[BrqCounter.scala 53:5]
        node _T_11 = bits(counter, 39, 0) @[BrqCounter.scala 54:27]
        counter_d <= _T_11 @[BrqCounter.scala 54:17]
        skip @[BrqCounter.scala 53:5]
    reg counter_q : UInt<40>, clock with : (reset => (reset, UInt<40>("h00"))) @[BrqCounter.scala 57:26]
    counter_q <= counter_d @[BrqCounter.scala 59:13]
    wire _T_12 : UInt<72> @[BrqCounter.scala 63:35]
    cn_lsb <= counter_q @[BrqCounter.scala 65:12]
    cn_msb <= UInt<1>("h00") @[BrqCounter.scala 66:12]
    node _T_13 = bits(counter_load, 63, 40) @[BrqCounter.scala 68:46]
    _T_12 <= _T_13 @[BrqCounter.scala 68:31]
    io.o_counter_val <= counter @[BrqCounter.scala 76:20]
    
  module CsrRegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_hart_id : UInt<32>, o_priv_mode_id : UInt<2>, o_priv_mode_if : UInt<2>, o_priv_mode_lsu : UInt<2>, o_csr_mstatus_tw : UInt<1>, o_csr_mtvec : UInt<32>, flip i_csr_mtvec_init : UInt<1>, flip i_boot_addr : UInt<32>, flip i_csr_access : UInt<1>, flip i_csr_addr : UInt<12>, flip i_csr_wdata : UInt<32>, flip i_csr_op : UInt<2>, flip i_csr_op_en : UInt<1>, o_csr_rdata : UInt<32>, flip i_irq_software : UInt<1>, flip i_irq_timer : UInt<1>, flip i_irq_external : UInt<1>, flip i_nmi_mode : UInt<1>, o_irq_pending : UInt<1>, o_irqs : UInt<3>, o_csr_mstatus_mie : UInt<1>, o_csr_mepc : UInt<32>, flip i_debug_mode : UInt<1>, flip i_debug_cause : UInt<5>, flip i_debug_csr_save : UInt<1>, o_csr_depc : UInt<32>, o_debug_single_step : UInt<1>, o_debug_ebreakm : UInt<1>, o_trigger_match : UInt<1>, flip i_pc_if : UInt<32>, flip i_pc_id : UInt<32>, flip i_pc_wb : UInt<32>, flip i_csr_save_if : UInt<1>, flip i_csr_save_id : UInt<1>, flip i_csr_save_wb : UInt<1>, flip i_csr_restore_mret : UInt<1>, flip i_csr_restore_dret : UInt<1>, flip i_csr_save_cause : UInt<1>, flip i_csr_mcause : UInt<6>, flip i_csr_mtval : UInt<32>, o_illegal_csr_insn : UInt<1>, flip i_instr_ret : UInt<1>, flip i_iside_wait : UInt<1>, flip i_dside_wait : UInt<1>, flip i_jump : UInt<1>, flip i_branch : UInt<1>, flip i_branch_taken : UInt<1>, flip i_mem_load : UInt<1>, flip i_mem_store : UInt<1>}
    
    wire MISA_VALUE : UInt<32> @[CsrRegisterFile.scala 87:24]
    node _T = shl(UInt<1>("h00"), 1) @[CsrRegisterFile.scala 90:21]
    node _T_1 = shl(UInt<1>("h00"), 2) @[CsrRegisterFile.scala 90:35]
    node _T_2 = or(_T, _T_1) @[CsrRegisterFile.scala 90:28]
    node _T_3 = shl(UInt<1>("h00"), 3) @[CsrRegisterFile.scala 90:50]
    node _T_4 = or(_T_2, _T_3) @[CsrRegisterFile.scala 90:43]
    node _T_5 = shl(UInt<1>("h00"), 4) @[CsrRegisterFile.scala 90:71]
    node _T_6 = or(_T_4, _T_5) @[CsrRegisterFile.scala 90:64]
    node _T_7 = shl(UInt<1>("h00"), 5) @[CsrRegisterFile.scala 90:84]
    node _T_8 = or(_T_6, _T_7) @[CsrRegisterFile.scala 90:77]
    node _T_9 = shl(UInt<1>("h01"), 8) @[CsrRegisterFile.scala 90:105]
    node _T_10 = or(_T_8, _T_9) @[CsrRegisterFile.scala 90:98]
    node _T_11 = shl(UInt<1>("h01"), 12) @[CsrRegisterFile.scala 93:11]
    node _T_12 = or(_T_10, _T_11) @[CsrRegisterFile.scala 93:5]
    node _T_13 = shl(UInt<1>("h00"), 13) @[CsrRegisterFile.scala 93:25]
    node _T_14 = or(_T_12, _T_13) @[CsrRegisterFile.scala 93:18]
    node _T_15 = shl(UInt<1>("h00"), 18) @[CsrRegisterFile.scala 93:40]
    node _T_16 = or(_T_14, _T_15) @[CsrRegisterFile.scala 93:33]
    node _T_17 = shl(UInt<1>("h00"), 20) @[CsrRegisterFile.scala 93:61]
    node _T_18 = or(_T_16, _T_17) @[CsrRegisterFile.scala 93:54]
    node _T_19 = shl(UInt<1>("h00"), 23) @[CsrRegisterFile.scala 93:74]
    node _T_20 = or(_T_18, _T_19) @[CsrRegisterFile.scala 93:67]
    node _T_21 = shl(UInt<1>("h01"), 30) @[CsrRegisterFile.scala 93:95]
    node _T_22 = or(_T_20, _T_21) @[CsrRegisterFile.scala 93:88]
    MISA_VALUE <= _T_22 @[CsrRegisterFile.scala 90:13]
    wire exception_pc : UInt<32> @[CsrRegisterFile.scala 96:26]
    wire priv_lvl_d : UInt<2> @[CsrRegisterFile.scala 99:24]
    reg priv_lvl_q : UInt<2>, clock with : (reset => (reset, UInt<2>("h03"))) @[CsrRegisterFile.scala 100:27]
    wire _T_23 : {tw : UInt<1>, mprv : UInt<1>, mpp : UInt<2>, mpie : UInt<1>, mie : UInt<1>} @[CsrRegisterFile.scala 102:63]
    _T_23.mie <= UInt<1>("h00") @[CsrRegisterFile.scala 102:63]
    _T_23.mpie <= UInt<1>("h00") @[CsrRegisterFile.scala 102:63]
    _T_23.mpp <= UInt<2>("h00") @[CsrRegisterFile.scala 102:63]
    _T_23.mprv <= UInt<1>("h00") @[CsrRegisterFile.scala 102:63]
    _T_23.tw <= UInt<1>("h00") @[CsrRegisterFile.scala 102:63]
    wire mstatus_q : {tw : UInt<1>, mprv : UInt<1>, mpp : UInt<2>, mpie : UInt<1>, mie : UInt<1>}
    mstatus_q.mie <= _T_23.mie
    mstatus_q.mpie <= _T_23.mpie
    mstatus_q.mpp <= _T_23.mpp
    mstatus_q.mprv <= _T_23.mprv
    mstatus_q.tw <= _T_23.tw
    wire _T_24 : {tw : UInt<1>, mprv : UInt<1>, mpp : UInt<2>, mpie : UInt<1>, mie : UInt<1>} @[CsrRegisterFile.scala 103:63]
    _T_24.mie <= UInt<1>("h00") @[CsrRegisterFile.scala 103:63]
    _T_24.mpie <= UInt<1>("h00") @[CsrRegisterFile.scala 103:63]
    _T_24.mpp <= UInt<2>("h00") @[CsrRegisterFile.scala 103:63]
    _T_24.mprv <= UInt<1>("h00") @[CsrRegisterFile.scala 103:63]
    _T_24.tw <= UInt<1>("h00") @[CsrRegisterFile.scala 103:63]
    wire mstatus_d : {tw : UInt<1>, mprv : UInt<1>, mpp : UInt<2>, mpie : UInt<1>, mie : UInt<1>}
    mstatus_d.mie <= _T_24.mie
    mstatus_d.mpie <= _T_24.mpie
    mstatus_d.mpp <= _T_24.mpp
    mstatus_d.mprv <= _T_24.mprv
    mstatus_d.tw <= _T_24.tw
    wire mstatus_en : UInt<1> @[CsrRegisterFile.scala 104:46]
    wire _T_25 : {irq_external : UInt<1>, irq_timer : UInt<1>, irq_software : UInt<1>} @[CsrRegisterFile.scala 105:63]
    _T_25.irq_software <= UInt<1>("h00") @[CsrRegisterFile.scala 105:63]
    _T_25.irq_timer <= UInt<1>("h00") @[CsrRegisterFile.scala 105:63]
    _T_25.irq_external <= UInt<1>("h00") @[CsrRegisterFile.scala 105:63]
    wire mie_q : {irq_external : UInt<1>, irq_timer : UInt<1>, irq_software : UInt<1>}
    mie_q.irq_software <= _T_25.irq_software
    mie_q.irq_timer <= _T_25.irq_timer
    mie_q.irq_external <= _T_25.irq_external
    wire _T_26 : {irq_external : UInt<1>, irq_timer : UInt<1>, irq_software : UInt<1>} @[CsrRegisterFile.scala 106:63]
    _T_26.irq_software <= UInt<1>("h00") @[CsrRegisterFile.scala 106:63]
    _T_26.irq_timer <= UInt<1>("h00") @[CsrRegisterFile.scala 106:63]
    _T_26.irq_external <= UInt<1>("h00") @[CsrRegisterFile.scala 106:63]
    wire mie_d : {irq_external : UInt<1>, irq_timer : UInt<1>, irq_software : UInt<1>}
    mie_d.irq_software <= _T_26.irq_software
    mie_d.irq_timer <= _T_26.irq_timer
    mie_d.irq_external <= _T_26.irq_external
    wire mie_en : UInt<1> @[CsrRegisterFile.scala 107:46]
    wire mscratch_q : UInt<32> @[CsrRegisterFile.scala 108:46]
    wire mscratch_en : UInt<1> @[CsrRegisterFile.scala 109:46]
    wire mepc_q : UInt<32> @[CsrRegisterFile.scala 110:46]
    wire mepc_d : UInt<32> @[CsrRegisterFile.scala 111:46]
    wire mepc_en : UInt<1> @[CsrRegisterFile.scala 112:46]
    wire mcause_q : UInt<6> @[CsrRegisterFile.scala 113:46]
    wire mcause_d : UInt<6> @[CsrRegisterFile.scala 113:46]
    wire mcause_en : UInt<1> @[CsrRegisterFile.scala 114:46]
    wire mtval_q : UInt<32> @[CsrRegisterFile.scala 115:46]
    wire mtval_d : UInt<32> @[CsrRegisterFile.scala 115:46]
    wire mtval_en : UInt<1> @[CsrRegisterFile.scala 116:46]
    wire mtvec_q : UInt<32> @[CsrRegisterFile.scala 117:46]
    wire mtvec_d : UInt<32> @[CsrRegisterFile.scala 117:46]
    wire mtvec_en : UInt<1> @[CsrRegisterFile.scala 118:46]
    wire _T_27 : {irq_external : UInt<1>, irq_timer : UInt<1>, irq_software : UInt<1>} @[CsrRegisterFile.scala 119:63]
    _T_27.irq_software <= UInt<1>("h00") @[CsrRegisterFile.scala 119:63]
    _T_27.irq_timer <= UInt<1>("h00") @[CsrRegisterFile.scala 119:63]
    _T_27.irq_external <= UInt<1>("h00") @[CsrRegisterFile.scala 119:63]
    wire mip : {irq_external : UInt<1>, irq_timer : UInt<1>, irq_software : UInt<1>}
    mip.irq_software <= _T_27.irq_software
    mip.irq_timer <= _T_27.irq_timer
    mip.irq_external <= _T_27.irq_external
    wire _T_28 : {xdebugver : UInt<4>, zero2 : UInt<12>, ebreakm : UInt<1>, zero1 : UInt<1>, ebreaks : UInt<1>, stepie : UInt<1>, stopcount : UInt<1>, stoptime : UInt<1>, cause : UInt<1>, zero0 : UInt<1>, mprven : UInt<1>, nmip : UInt<1>, step : UInt<1>, prv : UInt<1>} @[CsrRegisterFile.scala 120:63]
    _T_28.prv <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.step <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.nmip <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.mprven <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.zero0 <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.cause <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.stoptime <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.stopcount <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.stepie <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.ebreaks <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.zero1 <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.ebreakm <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.zero2 <= UInt<12>("h00") @[CsrRegisterFile.scala 120:63]
    _T_28.xdebugver <= UInt<4>("h00") @[CsrRegisterFile.scala 120:63]
    wire dcsr_d : {xdebugver : UInt<4>, zero2 : UInt<12>, ebreakm : UInt<1>, zero1 : UInt<1>, ebreaks : UInt<1>, stepie : UInt<1>, stopcount : UInt<1>, stoptime : UInt<1>, cause : UInt<1>, zero0 : UInt<1>, mprven : UInt<1>, nmip : UInt<1>, step : UInt<1>, prv : UInt<1>}
    dcsr_d.prv <= _T_28.prv
    dcsr_d.step <= _T_28.step
    dcsr_d.nmip <= _T_28.nmip
    dcsr_d.mprven <= _T_28.mprven
    dcsr_d.zero0 <= _T_28.zero0
    dcsr_d.cause <= _T_28.cause
    dcsr_d.stoptime <= _T_28.stoptime
    dcsr_d.stopcount <= _T_28.stopcount
    dcsr_d.stepie <= _T_28.stepie
    dcsr_d.ebreaks <= _T_28.ebreaks
    dcsr_d.zero1 <= _T_28.zero1
    dcsr_d.ebreakm <= _T_28.ebreakm
    dcsr_d.zero2 <= _T_28.zero2
    dcsr_d.xdebugver <= _T_28.xdebugver
    wire _T_29 : {xdebugver : UInt<4>, zero2 : UInt<12>, ebreakm : UInt<1>, zero1 : UInt<1>, ebreaks : UInt<1>, stepie : UInt<1>, stopcount : UInt<1>, stoptime : UInt<1>, cause : UInt<1>, zero0 : UInt<1>, mprven : UInt<1>, nmip : UInt<1>, step : UInt<1>, prv : UInt<1>} @[CsrRegisterFile.scala 120:63]
    _T_29.prv <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.step <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.nmip <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.mprven <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.zero0 <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.cause <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.stoptime <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.stopcount <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.stepie <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.ebreaks <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.zero1 <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.ebreakm <= UInt<1>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.zero2 <= UInt<12>("h00") @[CsrRegisterFile.scala 120:63]
    _T_29.xdebugver <= UInt<4>("h00") @[CsrRegisterFile.scala 120:63]
    wire dcsr_q : {xdebugver : UInt<4>, zero2 : UInt<12>, ebreakm : UInt<1>, zero1 : UInt<1>, ebreaks : UInt<1>, stepie : UInt<1>, stopcount : UInt<1>, stoptime : UInt<1>, cause : UInt<1>, zero0 : UInt<1>, mprven : UInt<1>, nmip : UInt<1>, step : UInt<1>, prv : UInt<1>}
    dcsr_q.prv <= _T_29.prv
    dcsr_q.step <= _T_29.step
    dcsr_q.nmip <= _T_29.nmip
    dcsr_q.mprven <= _T_29.mprven
    dcsr_q.zero0 <= _T_29.zero0
    dcsr_q.cause <= _T_29.cause
    dcsr_q.stoptime <= _T_29.stoptime
    dcsr_q.stopcount <= _T_29.stopcount
    dcsr_q.stepie <= _T_29.stepie
    dcsr_q.ebreaks <= _T_29.ebreaks
    dcsr_q.zero1 <= _T_29.zero1
    dcsr_q.ebreakm <= _T_29.ebreakm
    dcsr_q.zero2 <= _T_29.zero2
    dcsr_q.xdebugver <= _T_29.xdebugver
    wire dcsr_en : UInt<1> @[CsrRegisterFile.scala 121:46]
    wire depc_q : UInt<32> @[CsrRegisterFile.scala 122:46]
    wire depc_d : UInt<32> @[CsrRegisterFile.scala 122:46]
    wire depc_en : UInt<1> @[CsrRegisterFile.scala 123:46]
    wire dscratch0_q : UInt<32> @[CsrRegisterFile.scala 124:46]
    wire dscratch1_q : UInt<32> @[CsrRegisterFile.scala 125:46]
    wire dscratch0_en : UInt<1> @[CsrRegisterFile.scala 126:46]
    wire dscratch1_en : UInt<1> @[CsrRegisterFile.scala 127:46]
    wire mcountinhibit : UInt<32> @[CsrRegisterFile.scala 131:46]
    wire mcountinhibit_d : UInt<13> @[CsrRegisterFile.scala 132:46]
    reg mcountinhibit_q : UInt<13>, clock with : (reset => (reset, UInt<13>("h00"))) @[CsrRegisterFile.scala 133:49]
    wire _T_30 : UInt<64>[32] @[CsrRegisterFile.scala 137:57]
    _T_30[0] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[1] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[2] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[3] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[4] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[5] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[6] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[7] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[8] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[9] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[10] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[11] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[12] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[13] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[14] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[15] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[16] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[17] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[18] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[19] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[20] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[21] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[22] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[23] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[24] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[25] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[26] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[27] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[28] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[29] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[30] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    _T_30[31] <= UInt<64>("h00") @[CsrRegisterFile.scala 137:57]
    reg mhpmcounter : UInt<64>[32], clock with : (reset => (reset, _T_30)) @[CsrRegisterFile.scala 137:49]
    wire mhpmcounter_we : UInt<32> @[CsrRegisterFile.scala 138:46]
    wire mcountinhibit_we : UInt<1> @[CsrRegisterFile.scala 139:46]
    wire mhpmcounterh_we : UInt<32> @[CsrRegisterFile.scala 140:46]
    wire mhpmcounter_incr : UInt<32> @[CsrRegisterFile.scala 141:46]
    wire _T_31 : UInt<32>[32] @[CsrRegisterFile.scala 142:57]
    _T_31[0] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[1] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[2] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[3] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[4] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[5] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[6] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[7] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[8] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[9] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[10] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[11] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[12] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[13] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[14] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[15] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[16] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[17] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[18] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[19] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[20] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[21] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[22] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[23] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[24] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[25] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[26] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[27] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[28] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[29] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[30] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    _T_31[31] <= UInt<32>("h00") @[CsrRegisterFile.scala 142:57]
    reg mhpmevent : UInt<32>[32], clock with : (reset => (reset, _T_31)) @[CsrRegisterFile.scala 142:49]
    wire mhpmcounter_idx : UInt<5> @[CsrRegisterFile.scala 143:46]
    wire tselect_rdata : UInt<32> @[CsrRegisterFile.scala 147:36]
    wire tmatch_control_rdata : UInt<32> @[CsrRegisterFile.scala 148:36]
    wire tmatch_value_rdata : UInt<32> @[CsrRegisterFile.scala 149:36]
    wire csr_wdata_int : UInt<32> @[CsrRegisterFile.scala 152:36]
    wire csr_rdata_int : UInt<32> @[CsrRegisterFile.scala 153:36]
    wire csr_we_int : UInt<1> @[CsrRegisterFile.scala 154:46]
    wire csr_wreq : UInt<1> @[CsrRegisterFile.scala 155:36]
    wire illegal_csr : UInt<1> @[CsrRegisterFile.scala 158:36]
    wire illegal_csr_priv : UInt<1> @[CsrRegisterFile.scala 159:36]
    wire illegal_csr_write : UInt<1> @[CsrRegisterFile.scala 160:36]
    wire unused_boot_addr : UInt<8> @[CsrRegisterFile.scala 162:36]
    wire unused_csr_addr : UInt<3> @[CsrRegisterFile.scala 163:36]
    node _T_32 = bits(io.i_boot_addr, 7, 0) @[CsrRegisterFile.scala 165:39]
    unused_boot_addr <= _T_32 @[CsrRegisterFile.scala 165:22]
    wire csr_addr : UInt<12> @[CsrRegisterFile.scala 169:28]
    wire _T_33 : {xdebugver : UInt<4>, zero2 : UInt<12>, ebreakm : UInt<1>, zero1 : UInt<1>, ebreaks : UInt<1>, stepie : UInt<1>, stopcount : UInt<1>, stoptime : UInt<1>, cause : UInt<1>, zero0 : UInt<1>, mprven : UInt<1>, nmip : UInt<1>, step : UInt<1>, prv : UInt<1>} @[CsrRegisterFile.scala 170:45]
    _T_33.prv <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.step <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.nmip <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.mprven <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.zero0 <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.cause <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.stoptime <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.stopcount <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.stepie <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.ebreaks <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.zero1 <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.ebreakm <= UInt<1>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.zero2 <= UInt<12>("h00") @[CsrRegisterFile.scala 170:45]
    _T_33.xdebugver <= UInt<4>("h00") @[CsrRegisterFile.scala 170:45]
    wire dcsr_wire : {xdebugver : UInt<4>, zero2 : UInt<12>, ebreakm : UInt<1>, zero1 : UInt<1>, ebreaks : UInt<1>, stepie : UInt<1>, stopcount : UInt<1>, stoptime : UInt<1>, cause : UInt<1>, zero0 : UInt<1>, mprven : UInt<1>, nmip : UInt<1>, step : UInt<1>, prv : UInt<1>}
    dcsr_wire.prv <= _T_33.prv
    dcsr_wire.step <= _T_33.step
    dcsr_wire.nmip <= _T_33.nmip
    dcsr_wire.mprven <= _T_33.mprven
    dcsr_wire.zero0 <= _T_33.zero0
    dcsr_wire.cause <= _T_33.cause
    dcsr_wire.stoptime <= _T_33.stoptime
    dcsr_wire.stopcount <= _T_33.stopcount
    dcsr_wire.stepie <= _T_33.stepie
    dcsr_wire.ebreaks <= _T_33.ebreaks
    dcsr_wire.zero1 <= _T_33.zero1
    dcsr_wire.ebreakm <= _T_33.ebreakm
    dcsr_wire.zero2 <= _T_33.zero2
    dcsr_wire.xdebugver <= _T_33.xdebugver
    csr_addr <= io.i_csr_addr @[CsrRegisterFile.scala 172:13]
    node _T_34 = bits(csr_addr, 7, 5) @[CsrRegisterFile.scala 174:30]
    unused_csr_addr <= _T_34 @[CsrRegisterFile.scala 174:19]
    node _T_35 = bits(csr_addr, 4, 0) @[CsrRegisterFile.scala 175:30]
    mhpmcounter_idx <= _T_35 @[CsrRegisterFile.scala 175:19]
    mstatus_en <= UInt<1>("h00") @[CsrRegisterFile.scala 177:14]
    mstatus_d.mie <= mstatus_q.mie @[CsrRegisterFile.scala 178:18]
    mstatus_d.mpie <= mstatus_q.mpie @[CsrRegisterFile.scala 179:18]
    mstatus_d.mpp <= mstatus_q.mpp @[CsrRegisterFile.scala 180:18]
    mstatus_d.mprv <= mstatus_q.mprv @[CsrRegisterFile.scala 181:18]
    mstatus_d.tw <= mstatus_q.tw @[CsrRegisterFile.scala 182:18]
    mscratch_en <= UInt<1>("h00") @[CsrRegisterFile.scala 183:14]
    mie_en <= UInt<1>("h00") @[CsrRegisterFile.scala 184:14]
    mepc_en <= UInt<1>("h00") @[CsrRegisterFile.scala 185:14]
    mcause_en <= UInt<1>("h00") @[CsrRegisterFile.scala 186:14]
    mtval_en <= UInt<1>("h00") @[CsrRegisterFile.scala 187:14]
    depc_en <= UInt<1>("h00") @[CsrRegisterFile.scala 188:14]
    dscratch0_en <= UInt<1>("h00") @[CsrRegisterFile.scala 189:16]
    dscratch1_en <= UInt<1>("h00") @[CsrRegisterFile.scala 190:16]
    dcsr_en <= UInt<1>("h00") @[CsrRegisterFile.scala 191:14]
    mcountinhibit_we <= UInt<1>("h00") @[CsrRegisterFile.scala 192:20]
    mhpmcounter_we <= UInt<1>("h00") @[CsrRegisterFile.scala 193:20]
    mhpmcounterh_we <= UInt<1>("h00") @[CsrRegisterFile.scala 194:20]
    node _T_36 = bits(io.i_csr_addr, 9, 8) @[CsrRegisterFile.scala 201:37]
    node _T_37 = gt(_T_36, priv_lvl_q) @[CsrRegisterFile.scala 201:43]
    illegal_csr_priv <= _T_37 @[CsrRegisterFile.scala 201:20]
    node _T_38 = bits(io.i_csr_addr, 11, 10) @[CsrRegisterFile.scala 203:39]
    node _T_39 = eq(_T_38, UInt<2>("h03")) @[CsrRegisterFile.scala 203:47]
    node _T_40 = and(_T_39, csr_wreq) @[CsrRegisterFile.scala 203:60]
    illegal_csr_write <= _T_40 @[CsrRegisterFile.scala 203:21]
    node _T_41 = or(illegal_csr, illegal_csr_priv) @[CsrRegisterFile.scala 205:61]
    node _T_42 = or(_T_41, illegal_csr_write) @[CsrRegisterFile.scala 205:80]
    node _T_43 = and(io.i_csr_access, _T_42) @[CsrRegisterFile.scala 205:46]
    io.o_illegal_csr_insn <= _T_43 @[CsrRegisterFile.scala 205:26]
    mip.irq_software <= io.i_irq_software @[CsrRegisterFile.scala 208:21]
    mip.irq_external <= io.i_irq_external @[CsrRegisterFile.scala 209:21]
    mip.irq_timer <= io.i_irq_timer @[CsrRegisterFile.scala 210:21]
    csr_rdata_int <= UInt<1>("h00") @[CsrRegisterFile.scala 214:17]
    illegal_csr <= UInt<1>("h00") @[CsrRegisterFile.scala 215:17]
    node _T_44 = eq(io.i_csr_addr, UInt<12>("h0f14")) @[CsrRegisterFile.scala 218:22]
    when _T_44 : @[CsrRegisterFile.scala 219:3]
      csr_rdata_int <= io.i_hart_id @[CsrRegisterFile.scala 221:19]
      skip @[CsrRegisterFile.scala 219:3]
    else : @[CsrRegisterFile.scala 224:5]
      node _T_45 = eq(io.i_csr_addr, UInt<10>("h0300")) @[CsrRegisterFile.scala 223:29]
      when _T_45 : @[CsrRegisterFile.scala 224:5]
        node _T_46 = cat(mstatus_q.mie, UInt<3>("h00")) @[Cat.scala 29:58]
        node _T_47 = cat(UInt<3>("h00"), mstatus_q.mpie) @[Cat.scala 29:58]
        node _T_48 = cat(_T_47, UInt<3>("h00")) @[Cat.scala 29:58]
        node _T_49 = cat(_T_48, _T_46) @[Cat.scala 29:58]
        node _T_50 = cat(mstatus_q.mprv, UInt<4>("h00")) @[Cat.scala 29:58]
        node _T_51 = cat(_T_50, mstatus_q.mpp) @[Cat.scala 29:58]
        node _T_52 = cat(UInt<10>("h00"), mstatus_q.tw) @[Cat.scala 29:58]
        node _T_53 = cat(_T_52, UInt<3>("h00")) @[Cat.scala 29:58]
        node _T_54 = cat(_T_53, _T_51) @[Cat.scala 29:58]
        node _T_55 = cat(_T_54, _T_49) @[Cat.scala 29:58]
        csr_rdata_int <= _T_55 @[CsrRegisterFile.scala 226:21]
        skip @[CsrRegisterFile.scala 224:5]
      else : @[CsrRegisterFile.scala 232:5]
        node _T_56 = eq(io.i_csr_addr, UInt<10>("h0301")) @[CsrRegisterFile.scala 231:29]
        when _T_56 : @[CsrRegisterFile.scala 232:5]
          csr_rdata_int <= MISA_VALUE @[CsrRegisterFile.scala 234:21]
          skip @[CsrRegisterFile.scala 232:5]
        else : @[CsrRegisterFile.scala 237:5]
          node _T_57 = eq(io.i_csr_addr, UInt<10>("h0304")) @[CsrRegisterFile.scala 236:29]
          when _T_57 : @[CsrRegisterFile.scala 237:5]
            node _T_58 = cat(UInt<3>("h00"), mie_q.irq_software) @[Cat.scala 29:58]
            node _T_59 = cat(_T_58, UInt<3>("h00")) @[Cat.scala 29:58]
            node _T_60 = cat(UInt<3>("h00"), mie_q.irq_timer) @[Cat.scala 29:58]
            node _T_61 = cat(UInt<20>("h00"), mie_q.irq_external) @[Cat.scala 29:58]
            node _T_62 = cat(_T_61, _T_60) @[Cat.scala 29:58]
            node _T_63 = cat(_T_62, _T_59) @[Cat.scala 29:58]
            csr_rdata_int <= _T_63 @[CsrRegisterFile.scala 239:21]
            skip @[CsrRegisterFile.scala 237:5]
          else : @[CsrRegisterFile.scala 245:5]
            node _T_64 = eq(io.i_csr_addr, UInt<10>("h0340")) @[CsrRegisterFile.scala 244:29]
            when _T_64 : @[CsrRegisterFile.scala 245:5]
              csr_rdata_int <= mscratch_q @[CsrRegisterFile.scala 248:21]
              skip @[CsrRegisterFile.scala 245:5]
            else : @[CsrRegisterFile.scala 251:5]
              node _T_65 = eq(io.i_csr_addr, UInt<10>("h0305")) @[CsrRegisterFile.scala 250:29]
              when _T_65 : @[CsrRegisterFile.scala 251:5]
                csr_rdata_int <= mtvec_q @[CsrRegisterFile.scala 257:21]
                skip @[CsrRegisterFile.scala 251:5]
              else : @[CsrRegisterFile.scala 260:5]
                node _T_66 = eq(io.i_csr_addr, UInt<10>("h0341")) @[CsrRegisterFile.scala 259:29]
                when _T_66 : @[CsrRegisterFile.scala 260:5]
                  csr_rdata_int <= mepc_q @[CsrRegisterFile.scala 263:21]
                  skip @[CsrRegisterFile.scala 260:5]
                else : @[CsrRegisterFile.scala 266:5]
                  node _T_67 = eq(io.i_csr_addr, UInt<10>("h0342")) @[CsrRegisterFile.scala 265:29]
                  when _T_67 : @[CsrRegisterFile.scala 266:5]
                    node _T_68 = bits(mcause_q, 5, 5) @[CsrRegisterFile.scala 270:36]
                    node _T_69 = bits(mcause_q, 4, 0) @[CsrRegisterFile.scala 270:63]
                    node _T_70 = cat(_T_68, UInt<26>("h00")) @[Cat.scala 29:58]
                    node _T_71 = cat(_T_70, _T_69) @[Cat.scala 29:58]
                    csr_rdata_int <= _T_71 @[CsrRegisterFile.scala 270:21]
                    skip @[CsrRegisterFile.scala 266:5]
                  else : @[CsrRegisterFile.scala 273:5]
                    node _T_72 = eq(io.i_csr_addr, UInt<10>("h0343")) @[CsrRegisterFile.scala 272:29]
                    when _T_72 : @[CsrRegisterFile.scala 273:5]
                      csr_rdata_int <= mtval_q @[CsrRegisterFile.scala 275:21]
                      skip @[CsrRegisterFile.scala 273:5]
                    else : @[CsrRegisterFile.scala 278:5]
                      node _T_73 = eq(io.i_csr_addr, UInt<10>("h0344")) @[CsrRegisterFile.scala 277:29]
                      when _T_73 : @[CsrRegisterFile.scala 278:5]
                        node _T_74 = cat(UInt<3>("h00"), mip.irq_software) @[Cat.scala 29:58]
                        node _T_75 = cat(_T_74, UInt<3>("h00")) @[Cat.scala 29:58]
                        node _T_76 = cat(UInt<3>("h00"), mip.irq_timer) @[Cat.scala 29:58]
                        node _T_77 = cat(UInt<20>("h00"), mip.irq_external) @[Cat.scala 29:58]
                        node _T_78 = cat(_T_77, _T_76) @[Cat.scala 29:58]
                        node _T_79 = cat(_T_78, _T_75) @[Cat.scala 29:58]
                        csr_rdata_int <= _T_79 @[CsrRegisterFile.scala 280:21]
                        skip @[CsrRegisterFile.scala 278:5]
                      else : @[CsrRegisterFile.scala 286:5]
                        node _T_80 = eq(io.i_csr_addr, UInt<11>("h07b0")) @[CsrRegisterFile.scala 285:29]
                        when _T_80 : @[CsrRegisterFile.scala 286:5]
                          node _T_81 = cat(dcsr_q.nmip, dcsr_q.step) @[CsrRegisterFile.scala 287:31]
                          node _T_82 = cat(_T_81, dcsr_q.prv) @[CsrRegisterFile.scala 287:31]
                          node _T_83 = cat(dcsr_q.zero0, dcsr_q.mprven) @[CsrRegisterFile.scala 287:31]
                          node _T_84 = cat(dcsr_q.stoptime, dcsr_q.cause) @[CsrRegisterFile.scala 287:31]
                          node _T_85 = cat(_T_84, _T_83) @[CsrRegisterFile.scala 287:31]
                          node _T_86 = cat(_T_85, _T_82) @[CsrRegisterFile.scala 287:31]
                          node _T_87 = cat(dcsr_q.ebreaks, dcsr_q.stepie) @[CsrRegisterFile.scala 287:31]
                          node _T_88 = cat(_T_87, dcsr_q.stopcount) @[CsrRegisterFile.scala 287:31]
                          node _T_89 = cat(dcsr_q.ebreakm, dcsr_q.zero1) @[CsrRegisterFile.scala 287:31]
                          node _T_90 = cat(dcsr_q.xdebugver, dcsr_q.zero2) @[CsrRegisterFile.scala 287:31]
                          node _T_91 = cat(_T_90, _T_89) @[CsrRegisterFile.scala 287:31]
                          node _T_92 = cat(_T_91, _T_88) @[CsrRegisterFile.scala 287:31]
                          node _T_93 = cat(_T_92, _T_86) @[CsrRegisterFile.scala 287:31]
                          csr_rdata_int <= _T_93 @[CsrRegisterFile.scala 287:21]
                          node _T_94 = not(io.i_debug_mode) @[CsrRegisterFile.scala 288:24]
                          illegal_csr <= _T_94 @[CsrRegisterFile.scala 288:21]
                          skip @[CsrRegisterFile.scala 286:5]
                        else : @[CsrRegisterFile.scala 291:5]
                          node _T_95 = eq(io.i_csr_addr, UInt<11>("h07b1")) @[CsrRegisterFile.scala 290:29]
                          when _T_95 : @[CsrRegisterFile.scala 291:5]
                            csr_rdata_int <= depc_q @[CsrRegisterFile.scala 292:21]
                            node _T_96 = not(io.i_debug_mode) @[CsrRegisterFile.scala 293:24]
                            illegal_csr <= _T_96 @[CsrRegisterFile.scala 293:21]
                            skip @[CsrRegisterFile.scala 291:5]
                          else : @[CsrRegisterFile.scala 296:5]
                            node _T_97 = eq(io.i_csr_addr, UInt<11>("h07b2")) @[CsrRegisterFile.scala 295:29]
                            when _T_97 : @[CsrRegisterFile.scala 296:5]
                              csr_rdata_int <= dscratch0_q @[CsrRegisterFile.scala 297:21]
                              skip @[CsrRegisterFile.scala 296:5]
                            else : @[CsrRegisterFile.scala 300:5]
                              node _T_98 = eq(io.i_csr_addr, UInt<11>("h07b3")) @[CsrRegisterFile.scala 299:29]
                              when _T_98 : @[CsrRegisterFile.scala 300:5]
                                csr_rdata_int <= dscratch1_q @[CsrRegisterFile.scala 301:21]
                                node _T_99 = not(io.i_debug_mode) @[CsrRegisterFile.scala 302:24]
                                illegal_csr <= _T_99 @[CsrRegisterFile.scala 302:21]
                                skip @[CsrRegisterFile.scala 300:5]
                              else : @[CsrRegisterFile.scala 306:5]
                                node _T_100 = eq(io.i_csr_addr, UInt<10>("h0320")) @[CsrRegisterFile.scala 305:29]
                                when _T_100 : @[CsrRegisterFile.scala 306:5]
                                  csr_rdata_int <= mcountinhibit @[CsrRegisterFile.scala 308:21]
                                  skip @[CsrRegisterFile.scala 306:5]
                                else : @[CsrRegisterFile.scala 318:5]
                                  node _T_101 = eq(io.i_csr_addr, UInt<10>("h0323")) @[CsrRegisterFile.scala 310:30]
                                  node _T_102 = eq(io.i_csr_addr, UInt<10>("h0324")) @[CsrRegisterFile.scala 310:77]
                                  node _T_103 = or(_T_101, _T_102) @[CsrRegisterFile.scala 310:60]
                                  node _T_104 = eq(io.i_csr_addr, UInt<10>("h0325")) @[CsrRegisterFile.scala 310:124]
                                  node _T_105 = or(_T_103, _T_104) @[CsrRegisterFile.scala 310:107]
                                  node _T_106 = eq(io.i_csr_addr, UInt<10>("h0326")) @[CsrRegisterFile.scala 310:171]
                                  node _T_107 = or(_T_105, _T_106) @[CsrRegisterFile.scala 310:154]
                                  node _T_108 = eq(io.i_csr_addr, UInt<10>("h0327")) @[CsrRegisterFile.scala 311:22]
                                  node _T_109 = or(_T_107, _T_108) @[CsrRegisterFile.scala 310:201]
                                  node _T_110 = eq(io.i_csr_addr, UInt<10>("h0328")) @[CsrRegisterFile.scala 311:69]
                                  node _T_111 = or(_T_109, _T_110) @[CsrRegisterFile.scala 311:52]
                                  node _T_112 = eq(io.i_csr_addr, UInt<10>("h0329")) @[CsrRegisterFile.scala 311:116]
                                  node _T_113 = or(_T_111, _T_112) @[CsrRegisterFile.scala 311:99]
                                  node _T_114 = eq(io.i_csr_addr, UInt<10>("h032a")) @[CsrRegisterFile.scala 311:163]
                                  node _T_115 = or(_T_113, _T_114) @[CsrRegisterFile.scala 311:146]
                                  node _T_116 = eq(io.i_csr_addr, UInt<10>("h032b")) @[CsrRegisterFile.scala 312:22]
                                  node _T_117 = or(_T_115, _T_116) @[CsrRegisterFile.scala 311:193]
                                  node _T_118 = eq(io.i_csr_addr, UInt<10>("h032c")) @[CsrRegisterFile.scala 312:69]
                                  node _T_119 = or(_T_117, _T_118) @[CsrRegisterFile.scala 312:52]
                                  node _T_120 = eq(io.i_csr_addr, UInt<10>("h032d")) @[CsrRegisterFile.scala 312:116]
                                  node _T_121 = or(_T_119, _T_120) @[CsrRegisterFile.scala 312:99]
                                  node _T_122 = eq(io.i_csr_addr, UInt<10>("h032e")) @[CsrRegisterFile.scala 312:163]
                                  node _T_123 = or(_T_121, _T_122) @[CsrRegisterFile.scala 312:146]
                                  node _T_124 = eq(io.i_csr_addr, UInt<10>("h032f")) @[CsrRegisterFile.scala 313:22]
                                  node _T_125 = or(_T_123, _T_124) @[CsrRegisterFile.scala 312:193]
                                  node _T_126 = eq(io.i_csr_addr, UInt<10>("h0330")) @[CsrRegisterFile.scala 313:69]
                                  node _T_127 = or(_T_125, _T_126) @[CsrRegisterFile.scala 313:52]
                                  node _T_128 = eq(io.i_csr_addr, UInt<10>("h0331")) @[CsrRegisterFile.scala 313:116]
                                  node _T_129 = or(_T_127, _T_128) @[CsrRegisterFile.scala 313:99]
                                  node _T_130 = eq(io.i_csr_addr, UInt<10>("h0332")) @[CsrRegisterFile.scala 313:163]
                                  node _T_131 = or(_T_129, _T_130) @[CsrRegisterFile.scala 313:146]
                                  node _T_132 = eq(io.i_csr_addr, UInt<10>("h0333")) @[CsrRegisterFile.scala 314:22]
                                  node _T_133 = or(_T_131, _T_132) @[CsrRegisterFile.scala 313:193]
                                  node _T_134 = eq(io.i_csr_addr, UInt<10>("h0334")) @[CsrRegisterFile.scala 314:69]
                                  node _T_135 = or(_T_133, _T_134) @[CsrRegisterFile.scala 314:52]
                                  node _T_136 = eq(io.i_csr_addr, UInt<10>("h0335")) @[CsrRegisterFile.scala 314:116]
                                  node _T_137 = or(_T_135, _T_136) @[CsrRegisterFile.scala 314:99]
                                  node _T_138 = eq(io.i_csr_addr, UInt<10>("h0336")) @[CsrRegisterFile.scala 314:163]
                                  node _T_139 = or(_T_137, _T_138) @[CsrRegisterFile.scala 314:146]
                                  node _T_140 = eq(io.i_csr_addr, UInt<10>("h0337")) @[CsrRegisterFile.scala 315:22]
                                  node _T_141 = or(_T_139, _T_140) @[CsrRegisterFile.scala 314:193]
                                  node _T_142 = eq(io.i_csr_addr, UInt<10>("h0338")) @[CsrRegisterFile.scala 315:69]
                                  node _T_143 = or(_T_141, _T_142) @[CsrRegisterFile.scala 315:52]
                                  node _T_144 = eq(io.i_csr_addr, UInt<10>("h0339")) @[CsrRegisterFile.scala 315:116]
                                  node _T_145 = or(_T_143, _T_144) @[CsrRegisterFile.scala 315:99]
                                  node _T_146 = eq(io.i_csr_addr, UInt<10>("h033a")) @[CsrRegisterFile.scala 315:163]
                                  node _T_147 = or(_T_145, _T_146) @[CsrRegisterFile.scala 315:146]
                                  node _T_148 = eq(io.i_csr_addr, UInt<10>("h033b")) @[CsrRegisterFile.scala 316:22]
                                  node _T_149 = or(_T_147, _T_148) @[CsrRegisterFile.scala 315:193]
                                  node _T_150 = eq(io.i_csr_addr, UInt<10>("h033c")) @[CsrRegisterFile.scala 316:69]
                                  node _T_151 = or(_T_149, _T_150) @[CsrRegisterFile.scala 316:52]
                                  node _T_152 = eq(io.i_csr_addr, UInt<10>("h033d")) @[CsrRegisterFile.scala 316:116]
                                  node _T_153 = or(_T_151, _T_152) @[CsrRegisterFile.scala 316:99]
                                  node _T_154 = eq(io.i_csr_addr, UInt<10>("h033e")) @[CsrRegisterFile.scala 316:163]
                                  node _T_155 = or(_T_153, _T_154) @[CsrRegisterFile.scala 316:146]
                                  node _T_156 = eq(io.i_csr_addr, UInt<10>("h033f")) @[CsrRegisterFile.scala 317:22]
                                  node _T_157 = or(_T_155, _T_156) @[CsrRegisterFile.scala 316:193]
                                  when _T_157 : @[CsrRegisterFile.scala 318:5]
                                    csr_rdata_int <= mhpmevent[mhpmcounter_idx] @[CsrRegisterFile.scala 319:21]
                                    skip @[CsrRegisterFile.scala 318:5]
                                  else : @[CsrRegisterFile.scala 329:5]
                                    node _T_158 = eq(io.i_csr_addr, UInt<12>("h0b00")) @[CsrRegisterFile.scala 321:30]
                                    node _T_159 = eq(io.i_csr_addr, UInt<12>("h0b02")) @[CsrRegisterFile.scala 321:79]
                                    node _T_160 = or(_T_158, _T_159) @[CsrRegisterFile.scala 321:62]
                                    node _T_161 = eq(io.i_csr_addr, UInt<12>("h0b03")) @[CsrRegisterFile.scala 321:128]
                                    node _T_162 = or(_T_160, _T_161) @[CsrRegisterFile.scala 321:111]
                                    node _T_163 = eq(io.i_csr_addr, UInt<12>("h0b04")) @[CsrRegisterFile.scala 321:177]
                                    node _T_164 = or(_T_162, _T_163) @[CsrRegisterFile.scala 321:160]
                                    node _T_165 = eq(io.i_csr_addr, UInt<12>("h0b05")) @[CsrRegisterFile.scala 322:22]
                                    node _T_166 = or(_T_164, _T_165) @[CsrRegisterFile.scala 321:209]
                                    node _T_167 = eq(io.i_csr_addr, UInt<12>("h0b06")) @[CsrRegisterFile.scala 322:71]
                                    node _T_168 = or(_T_166, _T_167) @[CsrRegisterFile.scala 322:54]
                                    node _T_169 = eq(io.i_csr_addr, UInt<12>("h0b07")) @[CsrRegisterFile.scala 322:120]
                                    node _T_170 = or(_T_168, _T_169) @[CsrRegisterFile.scala 322:103]
                                    node _T_171 = eq(io.i_csr_addr, UInt<12>("h0b08")) @[CsrRegisterFile.scala 322:169]
                                    node _T_172 = or(_T_170, _T_171) @[CsrRegisterFile.scala 322:152]
                                    node _T_173 = eq(io.i_csr_addr, UInt<12>("h0b09")) @[CsrRegisterFile.scala 323:22]
                                    node _T_174 = or(_T_172, _T_173) @[CsrRegisterFile.scala 322:201]
                                    node _T_175 = eq(io.i_csr_addr, UInt<12>("h0b0a")) @[CsrRegisterFile.scala 323:71]
                                    node _T_176 = or(_T_174, _T_175) @[CsrRegisterFile.scala 323:54]
                                    node _T_177 = eq(io.i_csr_addr, UInt<12>("h0b0b")) @[CsrRegisterFile.scala 323:120]
                                    node _T_178 = or(_T_176, _T_177) @[CsrRegisterFile.scala 323:103]
                                    node _T_179 = eq(io.i_csr_addr, UInt<12>("h0b0c")) @[CsrRegisterFile.scala 323:169]
                                    node _T_180 = or(_T_178, _T_179) @[CsrRegisterFile.scala 323:152]
                                    node _T_181 = eq(io.i_csr_addr, UInt<12>("h0b0d")) @[CsrRegisterFile.scala 324:22]
                                    node _T_182 = or(_T_180, _T_181) @[CsrRegisterFile.scala 323:201]
                                    node _T_183 = eq(io.i_csr_addr, UInt<12>("h0b0e")) @[CsrRegisterFile.scala 324:71]
                                    node _T_184 = or(_T_182, _T_183) @[CsrRegisterFile.scala 324:54]
                                    node _T_185 = eq(io.i_csr_addr, UInt<12>("h0b0f")) @[CsrRegisterFile.scala 324:120]
                                    node _T_186 = or(_T_184, _T_185) @[CsrRegisterFile.scala 324:103]
                                    node _T_187 = eq(io.i_csr_addr, UInt<12>("h0b10")) @[CsrRegisterFile.scala 324:169]
                                    node _T_188 = or(_T_186, _T_187) @[CsrRegisterFile.scala 324:152]
                                    node _T_189 = eq(io.i_csr_addr, UInt<12>("h0b11")) @[CsrRegisterFile.scala 325:22]
                                    node _T_190 = or(_T_188, _T_189) @[CsrRegisterFile.scala 324:201]
                                    node _T_191 = eq(io.i_csr_addr, UInt<12>("h0b12")) @[CsrRegisterFile.scala 325:71]
                                    node _T_192 = or(_T_190, _T_191) @[CsrRegisterFile.scala 325:54]
                                    node _T_193 = eq(io.i_csr_addr, UInt<12>("h0b13")) @[CsrRegisterFile.scala 325:120]
                                    node _T_194 = or(_T_192, _T_193) @[CsrRegisterFile.scala 325:103]
                                    node _T_195 = eq(io.i_csr_addr, UInt<12>("h0b14")) @[CsrRegisterFile.scala 325:169]
                                    node _T_196 = or(_T_194, _T_195) @[CsrRegisterFile.scala 325:152]
                                    node _T_197 = eq(io.i_csr_addr, UInt<12>("h0b15")) @[CsrRegisterFile.scala 326:22]
                                    node _T_198 = or(_T_196, _T_197) @[CsrRegisterFile.scala 325:201]
                                    node _T_199 = eq(io.i_csr_addr, UInt<12>("h0b16")) @[CsrRegisterFile.scala 326:71]
                                    node _T_200 = or(_T_198, _T_199) @[CsrRegisterFile.scala 326:54]
                                    node _T_201 = eq(io.i_csr_addr, UInt<12>("h0b17")) @[CsrRegisterFile.scala 326:120]
                                    node _T_202 = or(_T_200, _T_201) @[CsrRegisterFile.scala 326:103]
                                    node _T_203 = eq(io.i_csr_addr, UInt<12>("h0b18")) @[CsrRegisterFile.scala 326:169]
                                    node _T_204 = or(_T_202, _T_203) @[CsrRegisterFile.scala 326:152]
                                    node _T_205 = eq(io.i_csr_addr, UInt<12>("h0b19")) @[CsrRegisterFile.scala 327:22]
                                    node _T_206 = or(_T_204, _T_205) @[CsrRegisterFile.scala 326:201]
                                    node _T_207 = eq(io.i_csr_addr, UInt<12>("h0b1a")) @[CsrRegisterFile.scala 327:71]
                                    node _T_208 = or(_T_206, _T_207) @[CsrRegisterFile.scala 327:54]
                                    node _T_209 = eq(io.i_csr_addr, UInt<12>("h0b1b")) @[CsrRegisterFile.scala 327:120]
                                    node _T_210 = or(_T_208, _T_209) @[CsrRegisterFile.scala 327:103]
                                    node _T_211 = eq(io.i_csr_addr, UInt<12>("h0b1c")) @[CsrRegisterFile.scala 327:169]
                                    node _T_212 = or(_T_210, _T_211) @[CsrRegisterFile.scala 327:152]
                                    node _T_213 = eq(io.i_csr_addr, UInt<12>("h0b1d")) @[CsrRegisterFile.scala 328:22]
                                    node _T_214 = or(_T_212, _T_213) @[CsrRegisterFile.scala 327:201]
                                    node _T_215 = eq(io.i_csr_addr, UInt<12>("h0b1e")) @[CsrRegisterFile.scala 328:71]
                                    node _T_216 = or(_T_214, _T_215) @[CsrRegisterFile.scala 328:54]
                                    node _T_217 = eq(io.i_csr_addr, UInt<12>("h0b1f")) @[CsrRegisterFile.scala 328:120]
                                    node _T_218 = or(_T_216, _T_217) @[CsrRegisterFile.scala 328:103]
                                    when _T_218 : @[CsrRegisterFile.scala 329:5]
                                      wire _T_219 : UInt<64> @[CsrRegisterFile.scala 330:21]
                                      _T_219 <= mhpmcounter[mhpmcounter_idx] @[CsrRegisterFile.scala 331:11]
                                      node _T_220 = bits(_T_219, 31, 0) @[CsrRegisterFile.scala 332:27]
                                      csr_rdata_int <= _T_220 @[CsrRegisterFile.scala 332:21]
                                      skip @[CsrRegisterFile.scala 329:5]
                                    else : @[CsrRegisterFile.scala 342:5]
                                      node _T_221 = eq(io.i_csr_addr, UInt<12>("h0b80")) @[CsrRegisterFile.scala 334:30]
                                      node _T_222 = eq(io.i_csr_addr, UInt<12>("h0b82")) @[CsrRegisterFile.scala 334:80]
                                      node _T_223 = or(_T_221, _T_222) @[CsrRegisterFile.scala 334:63]
                                      node _T_224 = eq(io.i_csr_addr, UInt<12>("h0b83")) @[CsrRegisterFile.scala 334:130]
                                      node _T_225 = or(_T_223, _T_224) @[CsrRegisterFile.scala 334:113]
                                      node _T_226 = eq(io.i_csr_addr, UInt<12>("h0b84")) @[CsrRegisterFile.scala 334:180]
                                      node _T_227 = or(_T_225, _T_226) @[CsrRegisterFile.scala 334:163]
                                      node _T_228 = eq(io.i_csr_addr, UInt<12>("h0b85")) @[CsrRegisterFile.scala 335:22]
                                      node _T_229 = or(_T_227, _T_228) @[CsrRegisterFile.scala 334:213]
                                      node _T_230 = eq(io.i_csr_addr, UInt<12>("h0b86")) @[CsrRegisterFile.scala 335:72]
                                      node _T_231 = or(_T_229, _T_230) @[CsrRegisterFile.scala 335:55]
                                      node _T_232 = eq(io.i_csr_addr, UInt<12>("h0b87")) @[CsrRegisterFile.scala 335:122]
                                      node _T_233 = or(_T_231, _T_232) @[CsrRegisterFile.scala 335:105]
                                      node _T_234 = eq(io.i_csr_addr, UInt<12>("h0b88")) @[CsrRegisterFile.scala 335:172]
                                      node _T_235 = or(_T_233, _T_234) @[CsrRegisterFile.scala 335:155]
                                      node _T_236 = eq(io.i_csr_addr, UInt<12>("h0b89")) @[CsrRegisterFile.scala 336:22]
                                      node _T_237 = or(_T_235, _T_236) @[CsrRegisterFile.scala 335:205]
                                      node _T_238 = eq(io.i_csr_addr, UInt<12>("h0b8a")) @[CsrRegisterFile.scala 336:72]
                                      node _T_239 = or(_T_237, _T_238) @[CsrRegisterFile.scala 336:55]
                                      node _T_240 = eq(io.i_csr_addr, UInt<12>("h0b8b")) @[CsrRegisterFile.scala 336:122]
                                      node _T_241 = or(_T_239, _T_240) @[CsrRegisterFile.scala 336:105]
                                      node _T_242 = eq(io.i_csr_addr, UInt<12>("h0b8c")) @[CsrRegisterFile.scala 336:172]
                                      node _T_243 = or(_T_241, _T_242) @[CsrRegisterFile.scala 336:155]
                                      node _T_244 = eq(io.i_csr_addr, UInt<12>("h0b8d")) @[CsrRegisterFile.scala 337:22]
                                      node _T_245 = or(_T_243, _T_244) @[CsrRegisterFile.scala 336:205]
                                      node _T_246 = eq(io.i_csr_addr, UInt<12>("h0b8e")) @[CsrRegisterFile.scala 337:72]
                                      node _T_247 = or(_T_245, _T_246) @[CsrRegisterFile.scala 337:55]
                                      node _T_248 = eq(io.i_csr_addr, UInt<12>("h0b8f")) @[CsrRegisterFile.scala 337:122]
                                      node _T_249 = or(_T_247, _T_248) @[CsrRegisterFile.scala 337:105]
                                      node _T_250 = eq(io.i_csr_addr, UInt<12>("h0b90")) @[CsrRegisterFile.scala 337:172]
                                      node _T_251 = or(_T_249, _T_250) @[CsrRegisterFile.scala 337:155]
                                      node _T_252 = eq(io.i_csr_addr, UInt<12>("h0b91")) @[CsrRegisterFile.scala 338:22]
                                      node _T_253 = or(_T_251, _T_252) @[CsrRegisterFile.scala 337:205]
                                      node _T_254 = eq(io.i_csr_addr, UInt<12>("h0b92")) @[CsrRegisterFile.scala 338:72]
                                      node _T_255 = or(_T_253, _T_254) @[CsrRegisterFile.scala 338:55]
                                      node _T_256 = eq(io.i_csr_addr, UInt<12>("h0b93")) @[CsrRegisterFile.scala 338:122]
                                      node _T_257 = or(_T_255, _T_256) @[CsrRegisterFile.scala 338:105]
                                      node _T_258 = eq(io.i_csr_addr, UInt<12>("h0b94")) @[CsrRegisterFile.scala 338:172]
                                      node _T_259 = or(_T_257, _T_258) @[CsrRegisterFile.scala 338:155]
                                      node _T_260 = eq(io.i_csr_addr, UInt<12>("h0b95")) @[CsrRegisterFile.scala 339:22]
                                      node _T_261 = or(_T_259, _T_260) @[CsrRegisterFile.scala 338:205]
                                      node _T_262 = eq(io.i_csr_addr, UInt<12>("h0b96")) @[CsrRegisterFile.scala 339:72]
                                      node _T_263 = or(_T_261, _T_262) @[CsrRegisterFile.scala 339:55]
                                      node _T_264 = eq(io.i_csr_addr, UInt<12>("h0b97")) @[CsrRegisterFile.scala 339:122]
                                      node _T_265 = or(_T_263, _T_264) @[CsrRegisterFile.scala 339:105]
                                      node _T_266 = eq(io.i_csr_addr, UInt<12>("h0b98")) @[CsrRegisterFile.scala 339:172]
                                      node _T_267 = or(_T_265, _T_266) @[CsrRegisterFile.scala 339:155]
                                      node _T_268 = eq(io.i_csr_addr, UInt<12>("h0b99")) @[CsrRegisterFile.scala 340:22]
                                      node _T_269 = or(_T_267, _T_268) @[CsrRegisterFile.scala 339:205]
                                      node _T_270 = eq(io.i_csr_addr, UInt<12>("h0b9a")) @[CsrRegisterFile.scala 340:72]
                                      node _T_271 = or(_T_269, _T_270) @[CsrRegisterFile.scala 340:55]
                                      node _T_272 = eq(io.i_csr_addr, UInt<12>("h0b9b")) @[CsrRegisterFile.scala 340:122]
                                      node _T_273 = or(_T_271, _T_272) @[CsrRegisterFile.scala 340:105]
                                      node _T_274 = eq(io.i_csr_addr, UInt<12>("h0b9c")) @[CsrRegisterFile.scala 340:172]
                                      node _T_275 = or(_T_273, _T_274) @[CsrRegisterFile.scala 340:155]
                                      node _T_276 = eq(io.i_csr_addr, UInt<12>("h0b9d")) @[CsrRegisterFile.scala 341:22]
                                      node _T_277 = or(_T_275, _T_276) @[CsrRegisterFile.scala 340:205]
                                      node _T_278 = eq(io.i_csr_addr, UInt<12>("h0b9e")) @[CsrRegisterFile.scala 341:72]
                                      node _T_279 = or(_T_277, _T_278) @[CsrRegisterFile.scala 341:55]
                                      node _T_280 = eq(io.i_csr_addr, UInt<12>("h0b9f")) @[CsrRegisterFile.scala 341:122]
                                      node _T_281 = or(_T_279, _T_280) @[CsrRegisterFile.scala 341:105]
                                      when _T_281 : @[CsrRegisterFile.scala 342:5]
                                        wire _T_282 : UInt<64> @[CsrRegisterFile.scala 343:21]
                                        _T_282 <= mhpmcounter[mhpmcounter_idx] @[CsrRegisterFile.scala 344:11]
                                        node _T_283 = bits(_T_282, 63, 32) @[CsrRegisterFile.scala 345:27]
                                        csr_rdata_int <= _T_283 @[CsrRegisterFile.scala 345:21]
                                        skip @[CsrRegisterFile.scala 342:5]
                                      else : @[CsrRegisterFile.scala 349:5]
                                        node _T_284 = eq(io.i_csr_addr, UInt<11>("h07a0")) @[CsrRegisterFile.scala 348:29]
                                        when _T_284 : @[CsrRegisterFile.scala 349:5]
                                          csr_rdata_int <= tselect_rdata @[CsrRegisterFile.scala 350:21]
                                          node _T_285 = not(UInt<1>("h00")) @[CsrRegisterFile.scala 351:24]
                                          illegal_csr <= _T_285 @[CsrRegisterFile.scala 351:21]
                                          skip @[CsrRegisterFile.scala 349:5]
                                        else : @[CsrRegisterFile.scala 354:5]
                                          node _T_286 = eq(io.i_csr_addr, UInt<11>("h07a1")) @[CsrRegisterFile.scala 353:29]
                                          when _T_286 : @[CsrRegisterFile.scala 354:5]
                                            csr_rdata_int <= tmatch_control_rdata @[CsrRegisterFile.scala 355:21]
                                            node _T_287 = not(UInt<1>("h00")) @[CsrRegisterFile.scala 356:24]
                                            illegal_csr <= _T_287 @[CsrRegisterFile.scala 356:21]
                                            skip @[CsrRegisterFile.scala 354:5]
                                          else : @[CsrRegisterFile.scala 359:5]
                                            node _T_288 = eq(io.i_csr_addr, UInt<11>("h07a2")) @[CsrRegisterFile.scala 358:29]
                                            when _T_288 : @[CsrRegisterFile.scala 359:5]
                                              csr_rdata_int <= tmatch_value_rdata @[CsrRegisterFile.scala 360:21]
                                              node _T_289 = not(UInt<1>("h00")) @[CsrRegisterFile.scala 361:24]
                                              illegal_csr <= _T_289 @[CsrRegisterFile.scala 361:21]
                                              skip @[CsrRegisterFile.scala 359:5]
                                            else : @[CsrRegisterFile.scala 364:5]
                                              node _T_290 = eq(io.i_csr_addr, UInt<11>("h07a3")) @[CsrRegisterFile.scala 363:29]
                                              when _T_290 : @[CsrRegisterFile.scala 364:5]
                                                csr_rdata_int <= UInt<1>("h00") @[CsrRegisterFile.scala 365:21]
                                                node _T_291 = not(UInt<1>("h00")) @[CsrRegisterFile.scala 366:24]
                                                illegal_csr <= _T_291 @[CsrRegisterFile.scala 366:21]
                                                skip @[CsrRegisterFile.scala 364:5]
                                              else : @[CsrRegisterFile.scala 369:5]
                                                node _T_292 = eq(io.i_csr_addr, UInt<11>("h07a8")) @[CsrRegisterFile.scala 368:29]
                                                when _T_292 : @[CsrRegisterFile.scala 369:5]
                                                  csr_rdata_int <= UInt<1>("h00") @[CsrRegisterFile.scala 370:21]
                                                  skip @[CsrRegisterFile.scala 369:5]
                                                else : @[CsrRegisterFile.scala 373:5]
                                                  node _T_293 = eq(io.i_csr_addr, UInt<11>("h07aa")) @[CsrRegisterFile.scala 372:29]
                                                  when _T_293 : @[CsrRegisterFile.scala 373:5]
                                                    csr_rdata_int <= UInt<1>("h00") @[CsrRegisterFile.scala 374:21]
                                                    node _T_294 = not(UInt<1>("h00")) @[CsrRegisterFile.scala 375:24]
                                                    illegal_csr <= _T_294 @[CsrRegisterFile.scala 375:21]
                                                    skip @[CsrRegisterFile.scala 373:5]
                                                  else : @[CsrRegisterFile.scala 378:5]
                                                    csr_rdata_int <= UInt<1>("h00") @[CsrRegisterFile.scala 379:21]
                                                    illegal_csr <= UInt<1>("h01") @[CsrRegisterFile.scala 380:21]
                                                    skip @[CsrRegisterFile.scala 378:5]
    wire mstat_priv : UInt<1> @[CsrRegisterFile.scala 391:34]
    node _T_295 = asUInt(UInt<2>("h03")) @[CsrRegisterFile.scala 392:66]
    node _T_296 = neq(mstatus_d.mpp, _T_295) @[CsrRegisterFile.scala 392:40]
    node _T_297 = asUInt(UInt<1>("h00")) @[CsrRegisterFile.scala 392:125]
    node _T_298 = neq(mstatus_d.mpp, _T_297) @[CsrRegisterFile.scala 392:99]
    node _T_299 = and(_T_296, _T_298) @[CsrRegisterFile.scala 392:74]
    mstat_priv <= _T_299 @[CsrRegisterFile.scala 392:14]
    node _T_300 = not(io.o_illegal_csr_insn) @[CsrRegisterFile.scala 393:28]
    node _T_301 = and(csr_wreq, _T_300) @[CsrRegisterFile.scala 393:26]
    csr_we_int <= _T_301 @[CsrRegisterFile.scala 393:14]
    node _T_302 = eq(io.i_csr_addr, UInt<10>("h0300")) @[CsrRegisterFile.scala 397:36]
    node _T_303 = and(csr_we_int, _T_302) @[CsrRegisterFile.scala 397:19]
    when _T_303 : @[CsrRegisterFile.scala 398:3]
      mstatus_en <= UInt<1>("h01") @[CsrRegisterFile.scala 399:16]
      node _T_304 = bits(csr_wdata_int, 3, 3) @[CsrRegisterFile.scala 400:36]
      mstatus_d.mie <= _T_304 @[CsrRegisterFile.scala 400:20]
      node _T_305 = bits(csr_wdata_int, 7, 7) @[CsrRegisterFile.scala 401:36]
      mstatus_d.mpie <= _T_305 @[CsrRegisterFile.scala 401:20]
      node _T_306 = bits(csr_wdata_int, 12, 11) @[CsrRegisterFile.scala 402:36]
      mstatus_d.mpp <= _T_306 @[CsrRegisterFile.scala 402:20]
      node _T_307 = bits(csr_wdata_int, 21, 21) @[CsrRegisterFile.scala 403:36]
      mstatus_d.tw <= _T_307 @[CsrRegisterFile.scala 403:20]
      node _T_308 = asUInt(UInt<2>("h03")) @[CsrRegisterFile.scala 404:58]
      node _T_309 = neq(mstatus_q.mpp, _T_308) @[CsrRegisterFile.scala 404:32]
      node _T_310 = asUInt(UInt<1>("h00")) @[CsrRegisterFile.scala 404:117]
      node _T_311 = neq(mstatus_q.mpp, _T_310) @[CsrRegisterFile.scala 404:91]
      node _T_312 = and(_T_309, _T_311) @[CsrRegisterFile.scala 404:66]
      when _T_312 : @[CsrRegisterFile.scala 405:5]
        node _T_313 = asUInt(UInt<2>("h03")) @[CsrRegisterFile.scala 406:46]
        mstatus_d.mpp <= _T_313 @[CsrRegisterFile.scala 406:21]
        skip @[CsrRegisterFile.scala 405:5]
      skip @[CsrRegisterFile.scala 398:3]
    else : @[CsrRegisterFile.scala 411:5]
      node _T_314 = eq(io.i_csr_addr, UInt<10>("h0304")) @[CsrRegisterFile.scala 410:43]
      node _T_315 = and(csr_we_int, _T_314) @[CsrRegisterFile.scala 410:26]
      when _T_315 : @[CsrRegisterFile.scala 411:5]
        mie_en <= UInt<1>("h01") @[CsrRegisterFile.scala 412:14]
        skip @[CsrRegisterFile.scala 411:5]
      else : @[CsrRegisterFile.scala 415:5]
        node _T_316 = eq(io.i_csr_addr, UInt<10>("h0340")) @[CsrRegisterFile.scala 414:43]
        node _T_317 = and(csr_we_int, _T_316) @[CsrRegisterFile.scala 414:26]
        when _T_317 : @[CsrRegisterFile.scala 415:5]
          mscratch_en <= UInt<1>("h01") @[CsrRegisterFile.scala 416:19]
          skip @[CsrRegisterFile.scala 415:5]
        else : @[CsrRegisterFile.scala 419:5]
          node _T_318 = eq(io.i_csr_addr, UInt<10>("h0341")) @[CsrRegisterFile.scala 418:43]
          node _T_319 = and(csr_we_int, _T_318) @[CsrRegisterFile.scala 418:26]
          when _T_319 : @[CsrRegisterFile.scala 419:5]
            mepc_en <= UInt<1>("h01") @[CsrRegisterFile.scala 420:15]
            skip @[CsrRegisterFile.scala 419:5]
          else : @[CsrRegisterFile.scala 423:5]
            node _T_320 = eq(io.i_csr_addr, UInt<10>("h0342")) @[CsrRegisterFile.scala 422:43]
            node _T_321 = and(csr_we_int, _T_320) @[CsrRegisterFile.scala 422:26]
            when _T_321 : @[CsrRegisterFile.scala 423:5]
              mcause_en <= UInt<1>("h01") @[CsrRegisterFile.scala 424:17]
              skip @[CsrRegisterFile.scala 423:5]
            else : @[CsrRegisterFile.scala 427:5]
              node _T_322 = eq(io.i_csr_addr, UInt<10>("h0343")) @[CsrRegisterFile.scala 426:43]
              node _T_323 = and(csr_we_int, _T_322) @[CsrRegisterFile.scala 426:26]
              when _T_323 : @[CsrRegisterFile.scala 427:5]
                mtval_en <= UInt<1>("h01") @[CsrRegisterFile.scala 428:16]
                skip @[CsrRegisterFile.scala 427:5]
              else : @[CsrRegisterFile.scala 431:5]
                node _T_324 = eq(io.i_csr_addr, UInt<10>("h0305")) @[CsrRegisterFile.scala 430:43]
                node _T_325 = and(csr_we_int, _T_324) @[CsrRegisterFile.scala 430:26]
                when _T_325 : @[CsrRegisterFile.scala 431:5]
                  mtvec_en <= UInt<1>("h01") @[CsrRegisterFile.scala 432:16]
                  skip @[CsrRegisterFile.scala 431:5]
                else : @[CsrRegisterFile.scala 435:5]
                  node _T_326 = eq(io.i_csr_addr, UInt<11>("h07b0")) @[CsrRegisterFile.scala 434:43]
                  node _T_327 = and(csr_we_int, _T_326) @[CsrRegisterFile.scala 434:26]
                  when _T_327 : @[CsrRegisterFile.scala 435:5]
                    wire _T_328 : {xdebugver : UInt<4>, zero2 : UInt<12>, ebreakm : UInt<1>, zero1 : UInt<1>, ebreaks : UInt<1>, stepie : UInt<1>, stopcount : UInt<1>, stoptime : UInt<1>, cause : UInt<1>, zero0 : UInt<1>, mprven : UInt<1>, nmip : UInt<1>, step : UInt<1>, prv : UInt<1>} @[CsrRegisterFile.scala 436:39]
                    wire _T_329 : UInt<28>
                    _T_329 <= csr_wdata_int
                    node _T_330 = bits(_T_329, 0, 0) @[CsrRegisterFile.scala 436:39]
                    _T_328.prv <= _T_330 @[CsrRegisterFile.scala 436:39]
                    node _T_331 = bits(_T_329, 1, 1) @[CsrRegisterFile.scala 436:39]
                    _T_328.step <= _T_331 @[CsrRegisterFile.scala 436:39]
                    node _T_332 = bits(_T_329, 2, 2) @[CsrRegisterFile.scala 436:39]
                    _T_328.nmip <= _T_332 @[CsrRegisterFile.scala 436:39]
                    node _T_333 = bits(_T_329, 3, 3) @[CsrRegisterFile.scala 436:39]
                    _T_328.mprven <= _T_333 @[CsrRegisterFile.scala 436:39]
                    node _T_334 = bits(_T_329, 4, 4) @[CsrRegisterFile.scala 436:39]
                    _T_328.zero0 <= _T_334 @[CsrRegisterFile.scala 436:39]
                    node _T_335 = bits(_T_329, 5, 5) @[CsrRegisterFile.scala 436:39]
                    _T_328.cause <= _T_335 @[CsrRegisterFile.scala 436:39]
                    node _T_336 = bits(_T_329, 6, 6) @[CsrRegisterFile.scala 436:39]
                    _T_328.stoptime <= _T_336 @[CsrRegisterFile.scala 436:39]
                    node _T_337 = bits(_T_329, 7, 7) @[CsrRegisterFile.scala 436:39]
                    _T_328.stopcount <= _T_337 @[CsrRegisterFile.scala 436:39]
                    node _T_338 = bits(_T_329, 8, 8) @[CsrRegisterFile.scala 436:39]
                    _T_328.stepie <= _T_338 @[CsrRegisterFile.scala 436:39]
                    node _T_339 = bits(_T_329, 9, 9) @[CsrRegisterFile.scala 436:39]
                    _T_328.ebreaks <= _T_339 @[CsrRegisterFile.scala 436:39]
                    node _T_340 = bits(_T_329, 10, 10) @[CsrRegisterFile.scala 436:39]
                    _T_328.zero1 <= _T_340 @[CsrRegisterFile.scala 436:39]
                    node _T_341 = bits(_T_329, 11, 11) @[CsrRegisterFile.scala 436:39]
                    _T_328.ebreakm <= _T_341 @[CsrRegisterFile.scala 436:39]
                    node _T_342 = bits(_T_329, 23, 12) @[CsrRegisterFile.scala 436:39]
                    _T_328.zero2 <= _T_342 @[CsrRegisterFile.scala 436:39]
                    node _T_343 = bits(_T_329, 27, 24) @[CsrRegisterFile.scala 436:39]
                    _T_328.xdebugver <= _T_343 @[CsrRegisterFile.scala 436:39]
                    dcsr_d.prv <= _T_328.prv @[CsrRegisterFile.scala 436:14]
                    dcsr_d.step <= _T_328.step @[CsrRegisterFile.scala 436:14]
                    dcsr_d.nmip <= _T_328.nmip @[CsrRegisterFile.scala 436:14]
                    dcsr_d.mprven <= _T_328.mprven @[CsrRegisterFile.scala 436:14]
                    dcsr_d.zero0 <= _T_328.zero0 @[CsrRegisterFile.scala 436:14]
                    dcsr_d.cause <= _T_328.cause @[CsrRegisterFile.scala 436:14]
                    dcsr_d.stoptime <= _T_328.stoptime @[CsrRegisterFile.scala 436:14]
                    dcsr_d.stopcount <= _T_328.stopcount @[CsrRegisterFile.scala 436:14]
                    dcsr_d.stepie <= _T_328.stepie @[CsrRegisterFile.scala 436:14]
                    dcsr_d.ebreaks <= _T_328.ebreaks @[CsrRegisterFile.scala 436:14]
                    dcsr_d.zero1 <= _T_328.zero1 @[CsrRegisterFile.scala 436:14]
                    dcsr_d.ebreakm <= _T_328.ebreakm @[CsrRegisterFile.scala 436:14]
                    dcsr_d.zero2 <= _T_328.zero2 @[CsrRegisterFile.scala 436:14]
                    dcsr_d.xdebugver <= _T_328.xdebugver @[CsrRegisterFile.scala 436:14]
                    node _T_344 = asUInt(UInt<3>("h04")) @[CsrRegisterFile.scala 437:59]
                    dcsr_wire.xdebugver <= _T_344 @[CsrRegisterFile.scala 437:28]
                    dcsr_d.xdebugver <= dcsr_wire.xdebugver @[CsrRegisterFile.scala 438:24]
                    node _T_345 = asUInt(UInt<2>("h03")) @[CsrRegisterFile.scala 440:51]
                    node _T_346 = neq(dcsr_d.prv, _T_345) @[CsrRegisterFile.scala 440:24]
                    node _T_347 = asUInt(UInt<1>("h00")) @[CsrRegisterFile.scala 440:100]
                    node _T_348 = neq(dcsr_d.prv, _T_347) @[CsrRegisterFile.scala 440:73]
                    node _T_349 = and(_T_346, _T_348) @[CsrRegisterFile.scala 440:59]
                    when _T_349 : @[CsrRegisterFile.scala 441:7]
                      node _T_350 = asUInt(UInt<2>("h03")) @[CsrRegisterFile.scala 442:45]
                      dcsr_d.prv <= _T_350 @[CsrRegisterFile.scala 442:20]
                      skip @[CsrRegisterFile.scala 441:7]
                    dcsr_d.cause <= dcsr_q.cause @[CsrRegisterFile.scala 445:20]
                    dcsr_d.nmip <= UInt<1>("h00") @[CsrRegisterFile.scala 448:24]
                    dcsr_d.mprven <= UInt<1>("h00") @[CsrRegisterFile.scala 449:24]
                    dcsr_d.stopcount <= UInt<1>("h00") @[CsrRegisterFile.scala 450:24]
                    dcsr_d.stoptime <= UInt<1>("h00") @[CsrRegisterFile.scala 451:24]
                    skip @[CsrRegisterFile.scala 435:5]
                  else : @[CsrRegisterFile.scala 454:5]
                    node _T_351 = eq(io.i_csr_addr, UInt<11>("h07b2")) @[CsrRegisterFile.scala 453:43]
                    node _T_352 = and(csr_we_int, _T_351) @[CsrRegisterFile.scala 453:26]
                    when _T_352 : @[CsrRegisterFile.scala 454:5]
                      dscratch0_en <= UInt<1>("h01") @[CsrRegisterFile.scala 455:20]
                      skip @[CsrRegisterFile.scala 454:5]
                    else : @[CsrRegisterFile.scala 458:5]
                      node _T_353 = eq(io.i_csr_addr, UInt<11>("h07b3")) @[CsrRegisterFile.scala 457:43]
                      node _T_354 = and(csr_we_int, _T_353) @[CsrRegisterFile.scala 457:26]
                      when _T_354 : @[CsrRegisterFile.scala 458:5]
                        dscratch1_en <= UInt<1>("h01") @[CsrRegisterFile.scala 459:20]
                        skip @[CsrRegisterFile.scala 458:5]
                      else : @[CsrRegisterFile.scala 462:5]
                        node _T_355 = eq(io.i_csr_addr, UInt<10>("h0320")) @[CsrRegisterFile.scala 461:43]
                        node _T_356 = and(csr_we_int, _T_355) @[CsrRegisterFile.scala 461:26]
                        when _T_356 : @[CsrRegisterFile.scala 462:5]
                          mcountinhibit_we <= UInt<1>("h01") @[CsrRegisterFile.scala 463:24]
                          skip @[CsrRegisterFile.scala 462:5]
                        else : @[CsrRegisterFile.scala 473:5]
                          node _T_357 = eq(io.i_csr_addr, UInt<12>("h0b00")) @[CsrRegisterFile.scala 465:44]
                          node _T_358 = eq(io.i_csr_addr, UInt<12>("h0b02")) @[CsrRegisterFile.scala 465:93]
                          node _T_359 = or(_T_357, _T_358) @[CsrRegisterFile.scala 465:76]
                          node _T_360 = eq(io.i_csr_addr, UInt<12>("h0b03")) @[CsrRegisterFile.scala 465:142]
                          node _T_361 = or(_T_359, _T_360) @[CsrRegisterFile.scala 465:125]
                          node _T_362 = eq(io.i_csr_addr, UInt<12>("h0b04")) @[CsrRegisterFile.scala 465:191]
                          node _T_363 = or(_T_361, _T_362) @[CsrRegisterFile.scala 465:174]
                          node _T_364 = eq(io.i_csr_addr, UInt<12>("h0b05")) @[CsrRegisterFile.scala 466:22]
                          node _T_365 = or(_T_363, _T_364) @[CsrRegisterFile.scala 465:223]
                          node _T_366 = eq(io.i_csr_addr, UInt<12>("h0b06")) @[CsrRegisterFile.scala 466:71]
                          node _T_367 = or(_T_365, _T_366) @[CsrRegisterFile.scala 466:54]
                          node _T_368 = eq(io.i_csr_addr, UInt<12>("h0b07")) @[CsrRegisterFile.scala 466:120]
                          node _T_369 = or(_T_367, _T_368) @[CsrRegisterFile.scala 466:103]
                          node _T_370 = eq(io.i_csr_addr, UInt<12>("h0b08")) @[CsrRegisterFile.scala 466:169]
                          node _T_371 = or(_T_369, _T_370) @[CsrRegisterFile.scala 466:152]
                          node _T_372 = eq(io.i_csr_addr, UInt<12>("h0b09")) @[CsrRegisterFile.scala 467:22]
                          node _T_373 = or(_T_371, _T_372) @[CsrRegisterFile.scala 466:201]
                          node _T_374 = eq(io.i_csr_addr, UInt<12>("h0b0a")) @[CsrRegisterFile.scala 467:71]
                          node _T_375 = or(_T_373, _T_374) @[CsrRegisterFile.scala 467:54]
                          node _T_376 = eq(io.i_csr_addr, UInt<12>("h0b0b")) @[CsrRegisterFile.scala 467:120]
                          node _T_377 = or(_T_375, _T_376) @[CsrRegisterFile.scala 467:103]
                          node _T_378 = eq(io.i_csr_addr, UInt<12>("h0b0c")) @[CsrRegisterFile.scala 467:169]
                          node _T_379 = or(_T_377, _T_378) @[CsrRegisterFile.scala 467:152]
                          node _T_380 = eq(io.i_csr_addr, UInt<12>("h0b0d")) @[CsrRegisterFile.scala 468:22]
                          node _T_381 = or(_T_379, _T_380) @[CsrRegisterFile.scala 467:201]
                          node _T_382 = eq(io.i_csr_addr, UInt<12>("h0b0e")) @[CsrRegisterFile.scala 468:71]
                          node _T_383 = or(_T_381, _T_382) @[CsrRegisterFile.scala 468:54]
                          node _T_384 = eq(io.i_csr_addr, UInt<12>("h0b0f")) @[CsrRegisterFile.scala 468:120]
                          node _T_385 = or(_T_383, _T_384) @[CsrRegisterFile.scala 468:103]
                          node _T_386 = eq(io.i_csr_addr, UInt<12>("h0b10")) @[CsrRegisterFile.scala 468:169]
                          node _T_387 = or(_T_385, _T_386) @[CsrRegisterFile.scala 468:152]
                          node _T_388 = eq(io.i_csr_addr, UInt<12>("h0b11")) @[CsrRegisterFile.scala 469:22]
                          node _T_389 = or(_T_387, _T_388) @[CsrRegisterFile.scala 468:201]
                          node _T_390 = eq(io.i_csr_addr, UInt<12>("h0b12")) @[CsrRegisterFile.scala 469:71]
                          node _T_391 = or(_T_389, _T_390) @[CsrRegisterFile.scala 469:54]
                          node _T_392 = eq(io.i_csr_addr, UInt<12>("h0b13")) @[CsrRegisterFile.scala 469:120]
                          node _T_393 = or(_T_391, _T_392) @[CsrRegisterFile.scala 469:103]
                          node _T_394 = eq(io.i_csr_addr, UInt<12>("h0b14")) @[CsrRegisterFile.scala 469:169]
                          node _T_395 = or(_T_393, _T_394) @[CsrRegisterFile.scala 469:152]
                          node _T_396 = eq(io.i_csr_addr, UInt<12>("h0b15")) @[CsrRegisterFile.scala 470:22]
                          node _T_397 = or(_T_395, _T_396) @[CsrRegisterFile.scala 469:201]
                          node _T_398 = eq(io.i_csr_addr, UInt<12>("h0b16")) @[CsrRegisterFile.scala 470:71]
                          node _T_399 = or(_T_397, _T_398) @[CsrRegisterFile.scala 470:54]
                          node _T_400 = eq(io.i_csr_addr, UInt<12>("h0b17")) @[CsrRegisterFile.scala 470:120]
                          node _T_401 = or(_T_399, _T_400) @[CsrRegisterFile.scala 470:103]
                          node _T_402 = eq(io.i_csr_addr, UInt<12>("h0b18")) @[CsrRegisterFile.scala 470:169]
                          node _T_403 = or(_T_401, _T_402) @[CsrRegisterFile.scala 470:152]
                          node _T_404 = eq(io.i_csr_addr, UInt<12>("h0b19")) @[CsrRegisterFile.scala 471:22]
                          node _T_405 = or(_T_403, _T_404) @[CsrRegisterFile.scala 470:201]
                          node _T_406 = eq(io.i_csr_addr, UInt<12>("h0b1a")) @[CsrRegisterFile.scala 471:71]
                          node _T_407 = or(_T_405, _T_406) @[CsrRegisterFile.scala 471:54]
                          node _T_408 = eq(io.i_csr_addr, UInt<12>("h0b1b")) @[CsrRegisterFile.scala 471:120]
                          node _T_409 = or(_T_407, _T_408) @[CsrRegisterFile.scala 471:103]
                          node _T_410 = eq(io.i_csr_addr, UInt<12>("h0b1c")) @[CsrRegisterFile.scala 471:169]
                          node _T_411 = or(_T_409, _T_410) @[CsrRegisterFile.scala 471:152]
                          node _T_412 = eq(io.i_csr_addr, UInt<12>("h0b1d")) @[CsrRegisterFile.scala 472:22]
                          node _T_413 = or(_T_411, _T_412) @[CsrRegisterFile.scala 471:201]
                          node _T_414 = eq(io.i_csr_addr, UInt<12>("h0b1e")) @[CsrRegisterFile.scala 472:71]
                          node _T_415 = or(_T_413, _T_414) @[CsrRegisterFile.scala 472:54]
                          node _T_416 = eq(io.i_csr_addr, UInt<12>("h0b1f")) @[CsrRegisterFile.scala 472:120]
                          node _T_417 = or(_T_415, _T_416) @[CsrRegisterFile.scala 472:103]
                          node _T_418 = and(csr_we_int, _T_417) @[CsrRegisterFile.scala 465:26]
                          when _T_418 : @[CsrRegisterFile.scala 473:5]
                            node _T_419 = dshl(UInt<1>("h01"), mhpmcounter_idx) @[CsrRegisterFile.scala 474:32]
                            mhpmcounter_we <= _T_419 @[CsrRegisterFile.scala 474:22]
                            skip @[CsrRegisterFile.scala 473:5]
                          else : @[CsrRegisterFile.scala 484:5]
                            node _T_420 = eq(io.i_csr_addr, UInt<12>("h0b80")) @[CsrRegisterFile.scala 476:44]
                            node _T_421 = eq(io.i_csr_addr, UInt<12>("h0b82")) @[CsrRegisterFile.scala 476:94]
                            node _T_422 = or(_T_420, _T_421) @[CsrRegisterFile.scala 476:77]
                            node _T_423 = eq(io.i_csr_addr, UInt<12>("h0b83")) @[CsrRegisterFile.scala 476:144]
                            node _T_424 = or(_T_422, _T_423) @[CsrRegisterFile.scala 476:127]
                            node _T_425 = eq(io.i_csr_addr, UInt<12>("h0b84")) @[CsrRegisterFile.scala 476:194]
                            node _T_426 = or(_T_424, _T_425) @[CsrRegisterFile.scala 476:177]
                            node _T_427 = eq(io.i_csr_addr, UInt<12>("h0b85")) @[CsrRegisterFile.scala 477:22]
                            node _T_428 = or(_T_426, _T_427) @[CsrRegisterFile.scala 476:227]
                            node _T_429 = eq(io.i_csr_addr, UInt<12>("h0b86")) @[CsrRegisterFile.scala 477:72]
                            node _T_430 = or(_T_428, _T_429) @[CsrRegisterFile.scala 477:55]
                            node _T_431 = eq(io.i_csr_addr, UInt<12>("h0b87")) @[CsrRegisterFile.scala 477:122]
                            node _T_432 = or(_T_430, _T_431) @[CsrRegisterFile.scala 477:105]
                            node _T_433 = eq(io.i_csr_addr, UInt<12>("h0b88")) @[CsrRegisterFile.scala 477:172]
                            node _T_434 = or(_T_432, _T_433) @[CsrRegisterFile.scala 477:155]
                            node _T_435 = eq(io.i_csr_addr, UInt<12>("h0b89")) @[CsrRegisterFile.scala 478:22]
                            node _T_436 = or(_T_434, _T_435) @[CsrRegisterFile.scala 477:205]
                            node _T_437 = eq(io.i_csr_addr, UInt<12>("h0b8a")) @[CsrRegisterFile.scala 478:72]
                            node _T_438 = or(_T_436, _T_437) @[CsrRegisterFile.scala 478:55]
                            node _T_439 = eq(io.i_csr_addr, UInt<12>("h0b8b")) @[CsrRegisterFile.scala 478:122]
                            node _T_440 = or(_T_438, _T_439) @[CsrRegisterFile.scala 478:105]
                            node _T_441 = eq(io.i_csr_addr, UInt<12>("h0b8c")) @[CsrRegisterFile.scala 478:172]
                            node _T_442 = or(_T_440, _T_441) @[CsrRegisterFile.scala 478:155]
                            node _T_443 = eq(io.i_csr_addr, UInt<12>("h0b8d")) @[CsrRegisterFile.scala 479:22]
                            node _T_444 = or(_T_442, _T_443) @[CsrRegisterFile.scala 478:205]
                            node _T_445 = eq(io.i_csr_addr, UInt<12>("h0b8e")) @[CsrRegisterFile.scala 479:72]
                            node _T_446 = or(_T_444, _T_445) @[CsrRegisterFile.scala 479:55]
                            node _T_447 = eq(io.i_csr_addr, UInt<12>("h0b8f")) @[CsrRegisterFile.scala 479:122]
                            node _T_448 = or(_T_446, _T_447) @[CsrRegisterFile.scala 479:105]
                            node _T_449 = eq(io.i_csr_addr, UInt<12>("h0b90")) @[CsrRegisterFile.scala 479:172]
                            node _T_450 = or(_T_448, _T_449) @[CsrRegisterFile.scala 479:155]
                            node _T_451 = eq(io.i_csr_addr, UInt<12>("h0b91")) @[CsrRegisterFile.scala 480:22]
                            node _T_452 = or(_T_450, _T_451) @[CsrRegisterFile.scala 479:205]
                            node _T_453 = eq(io.i_csr_addr, UInt<12>("h0b92")) @[CsrRegisterFile.scala 480:72]
                            node _T_454 = or(_T_452, _T_453) @[CsrRegisterFile.scala 480:55]
                            node _T_455 = eq(io.i_csr_addr, UInt<12>("h0b93")) @[CsrRegisterFile.scala 480:122]
                            node _T_456 = or(_T_454, _T_455) @[CsrRegisterFile.scala 480:105]
                            node _T_457 = eq(io.i_csr_addr, UInt<12>("h0b94")) @[CsrRegisterFile.scala 480:172]
                            node _T_458 = or(_T_456, _T_457) @[CsrRegisterFile.scala 480:155]
                            node _T_459 = eq(io.i_csr_addr, UInt<12>("h0b95")) @[CsrRegisterFile.scala 481:22]
                            node _T_460 = or(_T_458, _T_459) @[CsrRegisterFile.scala 480:205]
                            node _T_461 = eq(io.i_csr_addr, UInt<12>("h0b96")) @[CsrRegisterFile.scala 481:72]
                            node _T_462 = or(_T_460, _T_461) @[CsrRegisterFile.scala 481:55]
                            node _T_463 = eq(io.i_csr_addr, UInt<12>("h0b97")) @[CsrRegisterFile.scala 481:122]
                            node _T_464 = or(_T_462, _T_463) @[CsrRegisterFile.scala 481:105]
                            node _T_465 = eq(io.i_csr_addr, UInt<12>("h0b98")) @[CsrRegisterFile.scala 481:172]
                            node _T_466 = or(_T_464, _T_465) @[CsrRegisterFile.scala 481:155]
                            node _T_467 = eq(io.i_csr_addr, UInt<12>("h0b99")) @[CsrRegisterFile.scala 482:22]
                            node _T_468 = or(_T_466, _T_467) @[CsrRegisterFile.scala 481:205]
                            node _T_469 = eq(io.i_csr_addr, UInt<12>("h0b9a")) @[CsrRegisterFile.scala 482:72]
                            node _T_470 = or(_T_468, _T_469) @[CsrRegisterFile.scala 482:55]
                            node _T_471 = eq(io.i_csr_addr, UInt<12>("h0b9b")) @[CsrRegisterFile.scala 482:122]
                            node _T_472 = or(_T_470, _T_471) @[CsrRegisterFile.scala 482:105]
                            node _T_473 = eq(io.i_csr_addr, UInt<12>("h0b9c")) @[CsrRegisterFile.scala 482:172]
                            node _T_474 = or(_T_472, _T_473) @[CsrRegisterFile.scala 482:155]
                            node _T_475 = eq(io.i_csr_addr, UInt<12>("h0b9d")) @[CsrRegisterFile.scala 483:22]
                            node _T_476 = or(_T_474, _T_475) @[CsrRegisterFile.scala 482:205]
                            node _T_477 = eq(io.i_csr_addr, UInt<12>("h0b9e")) @[CsrRegisterFile.scala 483:72]
                            node _T_478 = or(_T_476, _T_477) @[CsrRegisterFile.scala 483:55]
                            node _T_479 = eq(io.i_csr_addr, UInt<12>("h0b9f")) @[CsrRegisterFile.scala 483:122]
                            node _T_480 = or(_T_478, _T_479) @[CsrRegisterFile.scala 483:105]
                            node _T_481 = and(csr_we_int, _T_480) @[CsrRegisterFile.scala 476:26]
                            when _T_481 : @[CsrRegisterFile.scala 484:5]
                              node _T_482 = dshl(UInt<1>("h01"), mhpmcounter_idx) @[CsrRegisterFile.scala 485:33]
                              mhpmcounterh_we <= _T_482 @[CsrRegisterFile.scala 485:23]
                              skip @[CsrRegisterFile.scala 484:5]
    priv_lvl_d <= priv_lvl_q @[CsrRegisterFile.scala 487:14]
    node _T_483 = bits(csr_wdata_int, 31, 1) @[CsrRegisterFile.scala 490:34]
    node _T_484 = cat(_T_483, UInt<1>("h00")) @[Cat.scala 29:58]
    mepc_d <= _T_484 @[CsrRegisterFile.scala 490:14]
    node _T_485 = bits(csr_wdata_int, 31, 31) @[CsrRegisterFile.scala 491:34]
    node _T_486 = bits(csr_wdata_int, 4, 0) @[CsrRegisterFile.scala 491:53]
    node _T_487 = cat(_T_485, _T_486) @[Cat.scala 29:58]
    mcause_d <= _T_487 @[CsrRegisterFile.scala 491:14]
    mtval_d <= csr_wdata_int @[CsrRegisterFile.scala 492:14]
    mtvec_en <= io.i_csr_mtvec_init @[CsrRegisterFile.scala 493:14]
    node _T_488 = bits(io.i_boot_addr, 31, 8) @[CsrRegisterFile.scala 496:60]
    node _T_489 = cat(_T_488, UInt<6>("h00")) @[Cat.scala 29:58]
    node _T_490 = cat(_T_489, UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_491 = bits(csr_wdata_int, 31, 8) @[CsrRegisterFile.scala 497:45]
    node _T_492 = cat(_T_491, UInt<6>("h00")) @[Cat.scala 29:58]
    node _T_493 = cat(_T_492, UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_494 = mux(io.i_csr_mtvec_init, _T_490, _T_493) @[CsrRegisterFile.scala 496:20]
    mtvec_d <= _T_494 @[CsrRegisterFile.scala 496:14]
    dcsr_d.prv <= dcsr_q.prv @[CsrRegisterFile.scala 500:14]
    dcsr_d.step <= dcsr_q.step @[CsrRegisterFile.scala 500:14]
    dcsr_d.nmip <= dcsr_q.nmip @[CsrRegisterFile.scala 500:14]
    dcsr_d.mprven <= dcsr_q.mprven @[CsrRegisterFile.scala 500:14]
    dcsr_d.zero0 <= dcsr_q.zero0 @[CsrRegisterFile.scala 500:14]
    dcsr_d.cause <= dcsr_q.cause @[CsrRegisterFile.scala 500:14]
    dcsr_d.stoptime <= dcsr_q.stoptime @[CsrRegisterFile.scala 500:14]
    dcsr_d.stopcount <= dcsr_q.stopcount @[CsrRegisterFile.scala 500:14]
    dcsr_d.stepie <= dcsr_q.stepie @[CsrRegisterFile.scala 500:14]
    dcsr_d.ebreaks <= dcsr_q.ebreaks @[CsrRegisterFile.scala 500:14]
    dcsr_d.zero1 <= dcsr_q.zero1 @[CsrRegisterFile.scala 500:14]
    dcsr_d.ebreakm <= dcsr_q.ebreakm @[CsrRegisterFile.scala 500:14]
    dcsr_d.zero2 <= dcsr_q.zero2 @[CsrRegisterFile.scala 500:14]
    dcsr_d.xdebugver <= dcsr_q.xdebugver @[CsrRegisterFile.scala 500:14]
    node _T_495 = bits(csr_wdata_int, 31, 1) @[CsrRegisterFile.scala 501:34]
    node _T_496 = cat(_T_495, UInt<1>("h00")) @[Cat.scala 29:58]
    depc_d <= _T_496 @[CsrRegisterFile.scala 501:14]
    exception_pc <= io.i_pc_id @[CsrRegisterFile.scala 504:16]
    node _T_497 = eq(io.i_csr_save_cause, UInt<1>("h01")) @[CsrRegisterFile.scala 508:28]
    when _T_497 : @[CsrRegisterFile.scala 509:3]
      node _T_498 = eq(io.i_csr_save_if, UInt<1>("h01")) @[CsrRegisterFile.scala 510:27]
      when _T_498 : @[CsrRegisterFile.scala 511:5]
        exception_pc <= io.i_pc_if @[CsrRegisterFile.scala 512:20]
        skip @[CsrRegisterFile.scala 511:5]
      else : @[CsrRegisterFile.scala 515:7]
        node _T_499 = eq(io.i_csr_save_id, UInt<1>("h01")) @[CsrRegisterFile.scala 514:34]
        when _T_499 : @[CsrRegisterFile.scala 515:7]
          exception_pc <= io.i_pc_id @[CsrRegisterFile.scala 516:22]
          skip @[CsrRegisterFile.scala 515:7]
        else : @[CsrRegisterFile.scala 519:7]
          node _T_500 = eq(io.i_csr_save_wb, UInt<1>("h01")) @[CsrRegisterFile.scala 518:34]
          when _T_500 : @[CsrRegisterFile.scala 519:7]
            exception_pc <= io.i_pc_wb @[CsrRegisterFile.scala 520:22]
            skip @[CsrRegisterFile.scala 519:7]
      node _T_501 = asUInt(UInt<2>("h03")) @[CsrRegisterFile.scala 523:41]
      priv_lvl_d <= _T_501 @[CsrRegisterFile.scala 523:16]
      when io.i_debug_csr_save : @[CsrRegisterFile.scala 526:5]
        dcsr_d.prv <= priv_lvl_q @[CsrRegisterFile.scala 529:21]
        dcsr_d.cause <= io.i_debug_cause @[CsrRegisterFile.scala 530:21]
        dcsr_en <= UInt<1>("h01") @[CsrRegisterFile.scala 531:20]
        depc_d <= exception_pc @[CsrRegisterFile.scala 532:20]
        depc_en <= UInt<1>("h01") @[CsrRegisterFile.scala 533:20]
        skip @[CsrRegisterFile.scala 526:5]
      else : @[CsrRegisterFile.scala 536:7]
        node _T_502 = not(io.i_debug_mode) @[CsrRegisterFile.scala 535:17]
        when _T_502 : @[CsrRegisterFile.scala 536:7]
          mtval_en <= UInt<1>("h01") @[CsrRegisterFile.scala 539:24]
          mtval_d <= io.i_csr_mtval @[CsrRegisterFile.scala 540:24]
          mstatus_en <= UInt<1>("h01") @[CsrRegisterFile.scala 541:24]
          mstatus_d.mie <= UInt<1>("h00") @[CsrRegisterFile.scala 542:24]
          mstatus_d.mpie <= mstatus_q.mie @[CsrRegisterFile.scala 544:24]
          mstatus_d.mpp <= priv_lvl_q @[CsrRegisterFile.scala 545:24]
          mstatus_d.mprv <= UInt<1>("h00") @[CsrRegisterFile.scala 546:24]
          mstatus_d.tw <= UInt<1>("h00") @[CsrRegisterFile.scala 547:24]
          mepc_en <= UInt<1>("h01") @[CsrRegisterFile.scala 548:24]
          mepc_d <= exception_pc @[CsrRegisterFile.scala 549:24]
          mcause_en <= UInt<1>("h01") @[CsrRegisterFile.scala 550:24]
          mcause_d <= io.i_csr_mcause @[CsrRegisterFile.scala 551:24]
          skip @[CsrRegisterFile.scala 536:7]
      skip @[CsrRegisterFile.scala 509:3]
    when io.i_csr_restore_dret : @[CsrRegisterFile.scala 557:5]
      priv_lvl_d <= dcsr_q.prv @[CsrRegisterFile.scala 558:25]
      skip @[CsrRegisterFile.scala 557:5]
    when io.i_csr_restore_mret : @[CsrRegisterFile.scala 561:5]
      priv_lvl_d <= mstatus_q.mpp @[CsrRegisterFile.scala 562:26]
      mstatus_en <= UInt<1>("h01") @[CsrRegisterFile.scala 563:22]
      mstatus_d.mie <= mstatus_q.mpie @[CsrRegisterFile.scala 564:22]
      mstatus_d.mpie <= UInt<1>("h01") @[CsrRegisterFile.scala 565:22]
      node _T_503 = asUInt(UInt<2>("h03")) @[CsrRegisterFile.scala 566:47]
      mstatus_d.mpp <= _T_503 @[CsrRegisterFile.scala 566:22]
      skip @[CsrRegisterFile.scala 561:5]
    node _T_504 = asUInt(reset) @[CsrRegisterFile.scala 570:20]
    when _T_504 : @[CsrRegisterFile.scala 571:3]
      node _T_505 = asUInt(UInt<2>("h03")) @[CsrRegisterFile.scala 572:42]
      priv_lvl_q <= _T_505 @[CsrRegisterFile.scala 572:17]
      skip @[CsrRegisterFile.scala 571:3]
    else : @[CsrRegisterFile.scala 575:5]
      priv_lvl_q <= priv_lvl_d @[CsrRegisterFile.scala 576:26]
      skip @[CsrRegisterFile.scala 575:5]
    io.o_priv_mode_id <= priv_lvl_q @[CsrRegisterFile.scala 580:21]
    io.o_priv_mode_if <= priv_lvl_d @[CsrRegisterFile.scala 584:21]
    node _T_506 = mux(mstatus_q.mprv, mstatus_q.mpp, priv_lvl_q) @[CsrRegisterFile.scala 589:29]
    io.o_priv_mode_lsu <= _T_506 @[CsrRegisterFile.scala 589:23]
    node _T_507 = eq(io.i_csr_op, UInt<1>("h01")) @[CsrRegisterFile.scala 597:20]
    when _T_507 : @[CsrRegisterFile.scala 598:3]
      csr_wdata_int <= io.i_csr_wdata @[CsrRegisterFile.scala 599:19]
      skip @[CsrRegisterFile.scala 598:3]
    else : @[CsrRegisterFile.scala 602:5]
      node _T_508 = eq(io.i_csr_op, UInt<2>("h02")) @[CsrRegisterFile.scala 601:27]
      when _T_508 : @[CsrRegisterFile.scala 602:5]
        node _T_509 = or(io.i_csr_wdata, io.o_csr_rdata) @[CsrRegisterFile.scala 603:39]
        csr_wdata_int <= _T_509 @[CsrRegisterFile.scala 603:21]
        skip @[CsrRegisterFile.scala 602:5]
      else : @[CsrRegisterFile.scala 606:5]
        node _T_510 = eq(io.i_csr_op, UInt<2>("h03")) @[CsrRegisterFile.scala 605:27]
        when _T_510 : @[CsrRegisterFile.scala 606:5]
          node _T_511 = not(io.i_csr_wdata) @[CsrRegisterFile.scala 607:24]
          node _T_512 = and(_T_511, io.o_csr_rdata) @[CsrRegisterFile.scala 607:40]
          csr_wdata_int <= _T_512 @[CsrRegisterFile.scala 607:21]
          skip @[CsrRegisterFile.scala 606:5]
        else : @[CsrRegisterFile.scala 610:5]
          node _T_513 = eq(io.i_csr_op, UInt<1>("h00")) @[CsrRegisterFile.scala 609:27]
          when _T_513 : @[CsrRegisterFile.scala 610:5]
            csr_wdata_int <= io.i_csr_wdata @[CsrRegisterFile.scala 611:21]
            skip @[CsrRegisterFile.scala 610:5]
          else : @[CsrRegisterFile.scala 614:5]
            csr_wdata_int <= io.i_csr_wdata @[CsrRegisterFile.scala 615:21]
            skip @[CsrRegisterFile.scala 614:5]
    node _T_514 = eq(io.i_csr_op, UInt<1>("h01")) @[CsrRegisterFile.scala 618:47]
    node _T_515 = eq(io.i_csr_op, UInt<2>("h02")) @[CsrRegisterFile.scala 618:89]
    node _T_516 = or(_T_514, _T_515) @[CsrRegisterFile.scala 618:74]
    node _T_517 = eq(io.i_csr_op, UInt<2>("h03")) @[CsrRegisterFile.scala 618:129]
    node _T_518 = or(_T_516, _T_517) @[CsrRegisterFile.scala 618:114]
    node _T_519 = and(io.i_csr_op_en, _T_518) @[CsrRegisterFile.scala 618:31]
    csr_wreq <= _T_519 @[CsrRegisterFile.scala 618:13]
    io.o_csr_rdata <= csr_rdata_int @[CsrRegisterFile.scala 623:18]
    io.o_csr_mepc <= mepc_q @[CsrRegisterFile.scala 626:18]
    io.o_csr_depc <= depc_q @[CsrRegisterFile.scala 627:18]
    io.o_csr_mtvec <= mtvec_q @[CsrRegisterFile.scala 628:18]
    io.o_csr_mstatus_mie <= mstatus_q.mie @[CsrRegisterFile.scala 629:24]
    io.o_csr_mstatus_tw <= mstatus_q.tw @[CsrRegisterFile.scala 630:24]
    io.o_debug_single_step <= dcsr_q.step @[CsrRegisterFile.scala 631:26]
    io.o_debug_ebreakm <= dcsr_q.ebreakm @[CsrRegisterFile.scala 632:26]
    node _T_520 = and(mip.irq_external, mie_q.irq_external) @[CsrRegisterFile.scala 636:42]
    node _T_521 = eq(_T_520, UInt<1>("h01")) @[CsrRegisterFile.scala 636:65]
    node _T_522 = mux(_T_521, UInt<1>("h01"), UInt<1>("h00")) @[CsrRegisterFile.scala 636:23]
    node _T_523 = and(mip.irq_timer, mie_q.irq_timer) @[CsrRegisterFile.scala 636:117]
    node _T_524 = eq(_T_523, UInt<1>("h01")) @[CsrRegisterFile.scala 636:137]
    node _T_525 = mux(_T_524, UInt<1>("h01"), UInt<1>("h00")) @[CsrRegisterFile.scala 636:101]
    node _T_526 = and(mip.irq_software, mie_q.irq_software) @[CsrRegisterFile.scala 636:192]
    node _T_527 = eq(_T_526, UInt<1>("h01")) @[CsrRegisterFile.scala 636:215]
    node _T_528 = mux(_T_527, UInt<1>("h01"), UInt<1>("h00")) @[CsrRegisterFile.scala 636:173]
    node _T_529 = cat(_T_522, _T_525) @[Cat.scala 29:58]
    node _T_530 = cat(_T_529, _T_528) @[Cat.scala 29:58]
    io.o_irqs <= _T_530 @[CsrRegisterFile.scala 636:13]
    node _T_531 = orr(io.o_irqs) @[CsrRegisterFile.scala 637:35]
    io.o_irq_pending <= _T_531 @[CsrRegisterFile.scala 637:20]
    inst PRIM_MSTATUS of CsrPrimitive @[CsrRegisterFile.scala 647:28]
    PRIM_MSTATUS.clock <= clock
    PRIM_MSTATUS.reset <= reset
    node _T_532 = cat(mstatus_d.mpie, mstatus_d.mie) @[CsrRegisterFile.scala 648:41]
    node _T_533 = cat(mstatus_d.tw, mstatus_d.mprv) @[CsrRegisterFile.scala 648:41]
    node _T_534 = cat(_T_533, mstatus_d.mpp) @[CsrRegisterFile.scala 648:41]
    node _T_535 = cat(_T_534, _T_532) @[CsrRegisterFile.scala 648:41]
    PRIM_MSTATUS.io.i_wrdata <= _T_535 @[CsrRegisterFile.scala 648:28]
    PRIM_MSTATUS.io.i_wr_en <= mstatus_en @[CsrRegisterFile.scala 649:29]
    wire _T_536 : {tw : UInt<1>, mprv : UInt<1>, mpp : UInt<2>, mpie : UInt<1>, mie : UInt<1>} @[CsrRegisterFile.scala 650:56]
    wire _T_537 : UInt<6>
    _T_537 <= PRIM_MSTATUS.io.o_rd_data
    node _T_538 = bits(_T_537, 0, 0) @[CsrRegisterFile.scala 650:56]
    _T_536.mie <= _T_538 @[CsrRegisterFile.scala 650:56]
    node _T_539 = bits(_T_537, 1, 1) @[CsrRegisterFile.scala 650:56]
    _T_536.mpie <= _T_539 @[CsrRegisterFile.scala 650:56]
    node _T_540 = bits(_T_537, 3, 2) @[CsrRegisterFile.scala 650:56]
    _T_536.mpp <= _T_540 @[CsrRegisterFile.scala 650:56]
    node _T_541 = bits(_T_537, 4, 4) @[CsrRegisterFile.scala 650:56]
    _T_536.mprv <= _T_541 @[CsrRegisterFile.scala 650:56]
    node _T_542 = bits(_T_537, 5, 5) @[CsrRegisterFile.scala 650:56]
    _T_536.tw <= _T_542 @[CsrRegisterFile.scala 650:56]
    mstatus_q.mie <= _T_536.mie @[CsrRegisterFile.scala 650:19]
    mstatus_q.mpie <= _T_536.mpie @[CsrRegisterFile.scala 650:19]
    mstatus_q.mpp <= _T_536.mpp @[CsrRegisterFile.scala 650:19]
    mstatus_q.mprv <= _T_536.mprv @[CsrRegisterFile.scala 650:19]
    mstatus_q.tw <= _T_536.tw @[CsrRegisterFile.scala 650:19]
    inst PRIM_MEPC of CsrPrimitive_1 @[CsrRegisterFile.scala 653:25]
    PRIM_MEPC.clock <= clock
    PRIM_MEPC.reset <= reset
    PRIM_MEPC.io.i_wrdata <= mepc_d @[CsrRegisterFile.scala 654:25]
    PRIM_MEPC.io.i_wr_en <= mepc_en @[CsrRegisterFile.scala 655:26]
    mepc_q <= PRIM_MEPC.io.o_rd_data @[CsrRegisterFile.scala 656:26]
    node _T_543 = bits(csr_wdata_int, 3, 3) @[CsrRegisterFile.scala 660:39]
    mie_d.irq_software <= _T_543 @[CsrRegisterFile.scala 660:23]
    node _T_544 = bits(csr_wdata_int, 7, 7) @[CsrRegisterFile.scala 661:39]
    mie_d.irq_timer <= _T_544 @[CsrRegisterFile.scala 661:23]
    node _T_545 = bits(csr_wdata_int, 11, 11) @[CsrRegisterFile.scala 662:39]
    mie_d.irq_external <= _T_545 @[CsrRegisterFile.scala 662:23]
    inst PRIM_MIE of CsrPrimitive_2 @[CsrRegisterFile.scala 664:24]
    PRIM_MIE.clock <= clock
    PRIM_MIE.reset <= reset
    node _T_546 = cat(mie_d.irq_external, mie_d.irq_timer) @[CsrRegisterFile.scala 665:33]
    node _T_547 = cat(_T_546, mie_d.irq_software) @[CsrRegisterFile.scala 665:33]
    PRIM_MIE.io.i_wrdata <= _T_547 @[CsrRegisterFile.scala 665:24]
    PRIM_MIE.io.i_wr_en <= mie_en @[CsrRegisterFile.scala 666:25]
    wire _T_548 : {irq_external : UInt<1>, irq_timer : UInt<1>, irq_software : UInt<1>} @[CsrRegisterFile.scala 667:43]
    wire _T_549 : UInt<3>
    _T_549 <= PRIM_MIE.io.o_rd_data
    node _T_550 = bits(_T_549, 0, 0) @[CsrRegisterFile.scala 667:43]
    _T_548.irq_software <= _T_550 @[CsrRegisterFile.scala 667:43]
    node _T_551 = bits(_T_549, 1, 1) @[CsrRegisterFile.scala 667:43]
    _T_548.irq_timer <= _T_551 @[CsrRegisterFile.scala 667:43]
    node _T_552 = bits(_T_549, 2, 2) @[CsrRegisterFile.scala 667:43]
    _T_548.irq_external <= _T_552 @[CsrRegisterFile.scala 667:43]
    mie_q.irq_software <= _T_548.irq_software @[CsrRegisterFile.scala 667:10]
    mie_q.irq_timer <= _T_548.irq_timer @[CsrRegisterFile.scala 667:10]
    mie_q.irq_external <= _T_548.irq_external @[CsrRegisterFile.scala 667:10]
    inst PRIM_MSCRATCH of CsrPrimitive_3 @[CsrRegisterFile.scala 671:29]
    PRIM_MSCRATCH.clock <= clock
    PRIM_MSCRATCH.reset <= reset
    PRIM_MSCRATCH.io.i_wrdata <= csr_wdata_int @[CsrRegisterFile.scala 672:29]
    PRIM_MSCRATCH.io.i_wr_en <= mscratch_en @[CsrRegisterFile.scala 673:30]
    mscratch_q <= PRIM_MSCRATCH.io.o_rd_data @[CsrRegisterFile.scala 674:30]
    inst PRIM_MCAUSE of CsrPrimitive_4 @[CsrRegisterFile.scala 678:27]
    PRIM_MCAUSE.clock <= clock
    PRIM_MCAUSE.reset <= reset
    PRIM_MCAUSE.io.i_wrdata <= mcause_d @[CsrRegisterFile.scala 679:27]
    PRIM_MCAUSE.io.i_wr_en <= mcause_en @[CsrRegisterFile.scala 680:28]
    mcause_q <= PRIM_MCAUSE.io.o_rd_data @[CsrRegisterFile.scala 681:28]
    inst PRIM_MTVAL of CsrPrimitive_5 @[CsrRegisterFile.scala 684:26]
    PRIM_MTVAL.clock <= clock
    PRIM_MTVAL.reset <= reset
    PRIM_MTVAL.io.i_wrdata <= mtval_d @[CsrRegisterFile.scala 685:26]
    PRIM_MTVAL.io.i_wr_en <= mtval_en @[CsrRegisterFile.scala 686:27]
    mtval_q <= PRIM_MTVAL.io.o_rd_data @[CsrRegisterFile.scala 687:27]
    inst PRIM_MTVEC of CsrPrimitive_6 @[CsrRegisterFile.scala 691:26]
    PRIM_MTVEC.clock <= clock
    PRIM_MTVEC.reset <= reset
    PRIM_MTVEC.io.i_wrdata <= mtvec_d @[CsrRegisterFile.scala 692:26]
    PRIM_MTVEC.io.i_wr_en <= mtvec_en @[CsrRegisterFile.scala 693:27]
    mtvec_q <= PRIM_MTVEC.io.o_rd_data @[CsrRegisterFile.scala 694:27]
    inst PRIM_DCSR of CsrPrimitive_7 @[CsrRegisterFile.scala 701:25]
    PRIM_DCSR.clock <= clock
    PRIM_DCSR.reset <= reset
    node _T_553 = cat(dcsr_d.nmip, dcsr_d.step) @[CsrRegisterFile.scala 702:35]
    node _T_554 = cat(_T_553, dcsr_d.prv) @[CsrRegisterFile.scala 702:35]
    node _T_555 = cat(dcsr_d.zero0, dcsr_d.mprven) @[CsrRegisterFile.scala 702:35]
    node _T_556 = cat(dcsr_d.stoptime, dcsr_d.cause) @[CsrRegisterFile.scala 702:35]
    node _T_557 = cat(_T_556, _T_555) @[CsrRegisterFile.scala 702:35]
    node _T_558 = cat(_T_557, _T_554) @[CsrRegisterFile.scala 702:35]
    node _T_559 = cat(dcsr_d.ebreaks, dcsr_d.stepie) @[CsrRegisterFile.scala 702:35]
    node _T_560 = cat(_T_559, dcsr_d.stopcount) @[CsrRegisterFile.scala 702:35]
    node _T_561 = cat(dcsr_d.ebreakm, dcsr_d.zero1) @[CsrRegisterFile.scala 702:35]
    node _T_562 = cat(dcsr_d.xdebugver, dcsr_d.zero2) @[CsrRegisterFile.scala 702:35]
    node _T_563 = cat(_T_562, _T_561) @[CsrRegisterFile.scala 702:35]
    node _T_564 = cat(_T_563, _T_560) @[CsrRegisterFile.scala 702:35]
    node _T_565 = cat(_T_564, _T_558) @[CsrRegisterFile.scala 702:35]
    PRIM_DCSR.io.i_wrdata <= _T_565 @[CsrRegisterFile.scala 702:25]
    PRIM_DCSR.io.i_wr_en <= dcsr_en @[CsrRegisterFile.scala 703:26]
    wire _T_566 : {xdebugver : UInt<4>, zero2 : UInt<12>, ebreakm : UInt<1>, zero1 : UInt<1>, ebreaks : UInt<1>, stepie : UInt<1>, stopcount : UInt<1>, stoptime : UInt<1>, cause : UInt<1>, zero0 : UInt<1>, mprven : UInt<1>, nmip : UInt<1>, step : UInt<1>, prv : UInt<1>} @[CsrRegisterFile.scala 704:60]
    wire _T_567 : UInt<28>
    _T_567 <= PRIM_DCSR.io.o_rd_data
    node _T_568 = bits(_T_567, 0, 0) @[CsrRegisterFile.scala 704:60]
    _T_566.prv <= _T_568 @[CsrRegisterFile.scala 704:60]
    node _T_569 = bits(_T_567, 1, 1) @[CsrRegisterFile.scala 704:60]
    _T_566.step <= _T_569 @[CsrRegisterFile.scala 704:60]
    node _T_570 = bits(_T_567, 2, 2) @[CsrRegisterFile.scala 704:60]
    _T_566.nmip <= _T_570 @[CsrRegisterFile.scala 704:60]
    node _T_571 = bits(_T_567, 3, 3) @[CsrRegisterFile.scala 704:60]
    _T_566.mprven <= _T_571 @[CsrRegisterFile.scala 704:60]
    node _T_572 = bits(_T_567, 4, 4) @[CsrRegisterFile.scala 704:60]
    _T_566.zero0 <= _T_572 @[CsrRegisterFile.scala 704:60]
    node _T_573 = bits(_T_567, 5, 5) @[CsrRegisterFile.scala 704:60]
    _T_566.cause <= _T_573 @[CsrRegisterFile.scala 704:60]
    node _T_574 = bits(_T_567, 6, 6) @[CsrRegisterFile.scala 704:60]
    _T_566.stoptime <= _T_574 @[CsrRegisterFile.scala 704:60]
    node _T_575 = bits(_T_567, 7, 7) @[CsrRegisterFile.scala 704:60]
    _T_566.stopcount <= _T_575 @[CsrRegisterFile.scala 704:60]
    node _T_576 = bits(_T_567, 8, 8) @[CsrRegisterFile.scala 704:60]
    _T_566.stepie <= _T_576 @[CsrRegisterFile.scala 704:60]
    node _T_577 = bits(_T_567, 9, 9) @[CsrRegisterFile.scala 704:60]
    _T_566.ebreaks <= _T_577 @[CsrRegisterFile.scala 704:60]
    node _T_578 = bits(_T_567, 10, 10) @[CsrRegisterFile.scala 704:60]
    _T_566.zero1 <= _T_578 @[CsrRegisterFile.scala 704:60]
    node _T_579 = bits(_T_567, 11, 11) @[CsrRegisterFile.scala 704:60]
    _T_566.ebreakm <= _T_579 @[CsrRegisterFile.scala 704:60]
    node _T_580 = bits(_T_567, 23, 12) @[CsrRegisterFile.scala 704:60]
    _T_566.zero2 <= _T_580 @[CsrRegisterFile.scala 704:60]
    node _T_581 = bits(_T_567, 27, 24) @[CsrRegisterFile.scala 704:60]
    _T_566.xdebugver <= _T_581 @[CsrRegisterFile.scala 704:60]
    dcsr_q.prv <= _T_566.prv @[CsrRegisterFile.scala 704:26]
    dcsr_q.step <= _T_566.step @[CsrRegisterFile.scala 704:26]
    dcsr_q.nmip <= _T_566.nmip @[CsrRegisterFile.scala 704:26]
    dcsr_q.mprven <= _T_566.mprven @[CsrRegisterFile.scala 704:26]
    dcsr_q.zero0 <= _T_566.zero0 @[CsrRegisterFile.scala 704:26]
    dcsr_q.cause <= _T_566.cause @[CsrRegisterFile.scala 704:26]
    dcsr_q.stoptime <= _T_566.stoptime @[CsrRegisterFile.scala 704:26]
    dcsr_q.stopcount <= _T_566.stopcount @[CsrRegisterFile.scala 704:26]
    dcsr_q.stepie <= _T_566.stepie @[CsrRegisterFile.scala 704:26]
    dcsr_q.ebreaks <= _T_566.ebreaks @[CsrRegisterFile.scala 704:26]
    dcsr_q.zero1 <= _T_566.zero1 @[CsrRegisterFile.scala 704:26]
    dcsr_q.ebreakm <= _T_566.ebreakm @[CsrRegisterFile.scala 704:26]
    dcsr_q.zero2 <= _T_566.zero2 @[CsrRegisterFile.scala 704:26]
    dcsr_q.xdebugver <= _T_566.xdebugver @[CsrRegisterFile.scala 704:26]
    inst PRIM_DEPC of CsrPrimitive_8 @[CsrRegisterFile.scala 708:25]
    PRIM_DEPC.clock <= clock
    PRIM_DEPC.reset <= reset
    PRIM_DEPC.io.i_wrdata <= depc_d @[CsrRegisterFile.scala 709:25]
    PRIM_DEPC.io.i_wr_en <= depc_en @[CsrRegisterFile.scala 710:26]
    depc_q <= PRIM_DEPC.io.o_rd_data @[CsrRegisterFile.scala 711:26]
    inst PRIM_DSCRATCH0 of CsrPrimitive_9 @[CsrRegisterFile.scala 714:30]
    PRIM_DSCRATCH0.clock <= clock
    PRIM_DSCRATCH0.reset <= reset
    PRIM_DSCRATCH0.io.i_wrdata <= csr_wdata_int @[CsrRegisterFile.scala 715:30]
    PRIM_DSCRATCH0.io.i_wr_en <= dscratch0_en @[CsrRegisterFile.scala 716:31]
    dscratch0_q <= PRIM_DSCRATCH0.io.o_rd_data @[CsrRegisterFile.scala 717:31]
    inst PRIM_DSCRATCH1 of CsrPrimitive_10 @[CsrRegisterFile.scala 721:30]
    PRIM_DSCRATCH1.clock <= clock
    PRIM_DSCRATCH1.reset <= reset
    PRIM_DSCRATCH1.io.i_wrdata <= csr_wdata_int @[CsrRegisterFile.scala 722:30]
    PRIM_DSCRATCH1.io.i_wr_en <= dscratch1_en @[CsrRegisterFile.scala 723:31]
    dscratch1_q <= PRIM_DSCRATCH1.io.o_rd_data @[CsrRegisterFile.scala 724:31]
    when mcountinhibit_we : @[CsrRegisterFile.scala 734:3]
      node _T_582 = bits(csr_wdata_int, 12, 2) @[CsrRegisterFile.scala 736:41]
      node _T_583 = bits(csr_wdata_int, 0, 0) @[CsrRegisterFile.scala 736:70]
      node _T_584 = cat(_T_582, UInt<1>("h01")) @[Cat.scala 29:58]
      node _T_585 = cat(_T_584, _T_583) @[Cat.scala 29:58]
      mcountinhibit_d <= _T_585 @[CsrRegisterFile.scala 736:21]
      skip @[CsrRegisterFile.scala 734:3]
    else : @[CsrRegisterFile.scala 739:5]
      mcountinhibit_d <= mcountinhibit_q @[CsrRegisterFile.scala 740:23]
      skip @[CsrRegisterFile.scala 739:5]
    node _T_586 = shl(UInt<1>("h00"), 10) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_586 @[CsrRegisterFile.scala 745:22]
    node _T_587 = shl(UInt<1>("h00"), 11) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_587 @[CsrRegisterFile.scala 745:22]
    node _T_588 = shl(UInt<1>("h00"), 12) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_588 @[CsrRegisterFile.scala 745:22]
    node _T_589 = shl(UInt<1>("h00"), 13) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_589 @[CsrRegisterFile.scala 745:22]
    node _T_590 = shl(UInt<1>("h00"), 14) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_590 @[CsrRegisterFile.scala 745:22]
    node _T_591 = shl(UInt<1>("h00"), 15) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_591 @[CsrRegisterFile.scala 745:22]
    node _T_592 = shl(UInt<1>("h00"), 16) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_592 @[CsrRegisterFile.scala 745:22]
    node _T_593 = shl(UInt<1>("h00"), 17) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_593 @[CsrRegisterFile.scala 745:22]
    node _T_594 = shl(UInt<1>("h00"), 18) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_594 @[CsrRegisterFile.scala 745:22]
    node _T_595 = shl(UInt<1>("h00"), 19) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_595 @[CsrRegisterFile.scala 745:22]
    node _T_596 = shl(UInt<1>("h00"), 20) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_596 @[CsrRegisterFile.scala 745:22]
    node _T_597 = shl(UInt<1>("h00"), 21) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_597 @[CsrRegisterFile.scala 745:22]
    node _T_598 = shl(UInt<1>("h00"), 22) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_598 @[CsrRegisterFile.scala 745:22]
    node _T_599 = shl(UInt<1>("h00"), 23) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_599 @[CsrRegisterFile.scala 745:22]
    node _T_600 = shl(UInt<1>("h00"), 24) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_600 @[CsrRegisterFile.scala 745:22]
    node _T_601 = shl(UInt<1>("h00"), 25) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_601 @[CsrRegisterFile.scala 745:22]
    node _T_602 = shl(UInt<1>("h00"), 26) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_602 @[CsrRegisterFile.scala 745:22]
    node _T_603 = shl(UInt<1>("h00"), 27) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_603 @[CsrRegisterFile.scala 745:22]
    node _T_604 = shl(UInt<1>("h00"), 28) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_604 @[CsrRegisterFile.scala 745:22]
    node _T_605 = shl(UInt<1>("h00"), 29) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_605 @[CsrRegisterFile.scala 745:22]
    node _T_606 = shl(UInt<1>("h00"), 30) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_606 @[CsrRegisterFile.scala 745:22]
    node _T_607 = shl(UInt<1>("h00"), 31) @[CsrRegisterFile.scala 745:32]
    mhpmcounter_incr <= _T_607 @[CsrRegisterFile.scala 745:22]
    node _T_608 = shl(UInt<1>("h01"), 0) @[CsrRegisterFile.scala 749:31]
    mhpmcounter_incr <= _T_608 @[CsrRegisterFile.scala 749:21]
    node _T_609 = shl(UInt<1>("h00"), 1) @[CsrRegisterFile.scala 750:31]
    mhpmcounter_incr <= _T_609 @[CsrRegisterFile.scala 750:21]
    node _T_610 = shl(io.i_instr_ret, 2) @[CsrRegisterFile.scala 751:39]
    mhpmcounter_incr <= _T_610 @[CsrRegisterFile.scala 751:21]
    node _T_611 = shl(io.i_dside_wait, 3) @[CsrRegisterFile.scala 752:39]
    mhpmcounter_incr <= _T_611 @[CsrRegisterFile.scala 752:21]
    node _T_612 = shl(io.i_iside_wait, 4) @[CsrRegisterFile.scala 753:39]
    mhpmcounter_incr <= _T_612 @[CsrRegisterFile.scala 753:21]
    node _T_613 = shl(io.i_mem_load, 5) @[CsrRegisterFile.scala 754:39]
    mhpmcounter_incr <= _T_613 @[CsrRegisterFile.scala 754:21]
    node _T_614 = shl(io.i_mem_store, 6) @[CsrRegisterFile.scala 755:39]
    mhpmcounter_incr <= _T_614 @[CsrRegisterFile.scala 755:21]
    node _T_615 = shl(io.i_jump, 7) @[CsrRegisterFile.scala 756:39]
    mhpmcounter_incr <= _T_615 @[CsrRegisterFile.scala 756:21]
    node _T_616 = shl(io.i_branch, 8) @[CsrRegisterFile.scala 757:39]
    mhpmcounter_incr <= _T_616 @[CsrRegisterFile.scala 757:21]
    node _T_617 = shl(io.i_branch_taken, 9) @[CsrRegisterFile.scala 758:42]
    mhpmcounter_incr <= _T_617 @[CsrRegisterFile.scala 758:21]
    mhpmevent[0] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_618 = shl(UInt<1>("h01"), 0) @[CsrRegisterFile.scala 765:28]
    mhpmevent[0] <= _T_618 @[CsrRegisterFile.scala 765:18]
    mhpmevent[1] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_619 = shl(UInt<1>("h01"), 1) @[CsrRegisterFile.scala 765:28]
    mhpmevent[1] <= _T_619 @[CsrRegisterFile.scala 765:18]
    mhpmevent[2] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_620 = shl(UInt<1>("h01"), 2) @[CsrRegisterFile.scala 765:28]
    mhpmevent[2] <= _T_620 @[CsrRegisterFile.scala 765:18]
    mhpmevent[3] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_621 = shl(UInt<1>("h01"), 3) @[CsrRegisterFile.scala 765:28]
    mhpmevent[3] <= _T_621 @[CsrRegisterFile.scala 765:18]
    mhpmevent[4] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_622 = shl(UInt<1>("h01"), 4) @[CsrRegisterFile.scala 765:28]
    mhpmevent[4] <= _T_622 @[CsrRegisterFile.scala 765:18]
    mhpmevent[5] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_623 = shl(UInt<1>("h01"), 5) @[CsrRegisterFile.scala 765:28]
    mhpmevent[5] <= _T_623 @[CsrRegisterFile.scala 765:18]
    mhpmevent[6] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_624 = shl(UInt<1>("h01"), 6) @[CsrRegisterFile.scala 765:28]
    mhpmevent[6] <= _T_624 @[CsrRegisterFile.scala 765:18]
    mhpmevent[7] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_625 = shl(UInt<1>("h01"), 7) @[CsrRegisterFile.scala 765:28]
    mhpmevent[7] <= _T_625 @[CsrRegisterFile.scala 765:18]
    mhpmevent[8] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_626 = shl(UInt<1>("h01"), 8) @[CsrRegisterFile.scala 765:28]
    mhpmevent[8] <= _T_626 @[CsrRegisterFile.scala 765:18]
    mhpmevent[9] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_627 = shl(UInt<1>("h01"), 9) @[CsrRegisterFile.scala 765:28]
    mhpmevent[9] <= _T_627 @[CsrRegisterFile.scala 765:18]
    mhpmevent[10] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_628 = shl(UInt<1>("h01"), 10) @[CsrRegisterFile.scala 765:28]
    mhpmevent[10] <= _T_628 @[CsrRegisterFile.scala 765:18]
    mhpmevent[11] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_629 = shl(UInt<1>("h01"), 11) @[CsrRegisterFile.scala 765:28]
    mhpmevent[11] <= _T_629 @[CsrRegisterFile.scala 765:18]
    mhpmevent[12] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_630 = shl(UInt<1>("h01"), 12) @[CsrRegisterFile.scala 765:28]
    mhpmevent[12] <= _T_630 @[CsrRegisterFile.scala 765:18]
    mhpmevent[13] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_631 = shl(UInt<1>("h01"), 13) @[CsrRegisterFile.scala 765:28]
    mhpmevent[13] <= _T_631 @[CsrRegisterFile.scala 765:18]
    mhpmevent[14] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_632 = shl(UInt<1>("h01"), 14) @[CsrRegisterFile.scala 765:28]
    mhpmevent[14] <= _T_632 @[CsrRegisterFile.scala 765:18]
    mhpmevent[15] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_633 = shl(UInt<1>("h01"), 15) @[CsrRegisterFile.scala 765:28]
    mhpmevent[15] <= _T_633 @[CsrRegisterFile.scala 765:18]
    mhpmevent[16] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_634 = shl(UInt<1>("h01"), 16) @[CsrRegisterFile.scala 765:28]
    mhpmevent[16] <= _T_634 @[CsrRegisterFile.scala 765:18]
    mhpmevent[17] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_635 = shl(UInt<1>("h01"), 17) @[CsrRegisterFile.scala 765:28]
    mhpmevent[17] <= _T_635 @[CsrRegisterFile.scala 765:18]
    mhpmevent[18] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_636 = shl(UInt<1>("h01"), 18) @[CsrRegisterFile.scala 765:28]
    mhpmevent[18] <= _T_636 @[CsrRegisterFile.scala 765:18]
    mhpmevent[19] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_637 = shl(UInt<1>("h01"), 19) @[CsrRegisterFile.scala 765:28]
    mhpmevent[19] <= _T_637 @[CsrRegisterFile.scala 765:18]
    mhpmevent[20] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_638 = shl(UInt<1>("h01"), 20) @[CsrRegisterFile.scala 765:28]
    mhpmevent[20] <= _T_638 @[CsrRegisterFile.scala 765:18]
    mhpmevent[21] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_639 = shl(UInt<1>("h01"), 21) @[CsrRegisterFile.scala 765:28]
    mhpmevent[21] <= _T_639 @[CsrRegisterFile.scala 765:18]
    mhpmevent[22] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_640 = shl(UInt<1>("h01"), 22) @[CsrRegisterFile.scala 765:28]
    mhpmevent[22] <= _T_640 @[CsrRegisterFile.scala 765:18]
    mhpmevent[23] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_641 = shl(UInt<1>("h01"), 23) @[CsrRegisterFile.scala 765:28]
    mhpmevent[23] <= _T_641 @[CsrRegisterFile.scala 765:18]
    mhpmevent[24] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_642 = shl(UInt<1>("h01"), 24) @[CsrRegisterFile.scala 765:28]
    mhpmevent[24] <= _T_642 @[CsrRegisterFile.scala 765:18]
    mhpmevent[25] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_643 = shl(UInt<1>("h01"), 25) @[CsrRegisterFile.scala 765:28]
    mhpmevent[25] <= _T_643 @[CsrRegisterFile.scala 765:18]
    mhpmevent[26] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_644 = shl(UInt<1>("h01"), 26) @[CsrRegisterFile.scala 765:28]
    mhpmevent[26] <= _T_644 @[CsrRegisterFile.scala 765:18]
    mhpmevent[27] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_645 = shl(UInt<1>("h01"), 27) @[CsrRegisterFile.scala 765:28]
    mhpmevent[27] <= _T_645 @[CsrRegisterFile.scala 765:18]
    mhpmevent[28] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_646 = shl(UInt<1>("h01"), 28) @[CsrRegisterFile.scala 765:28]
    mhpmevent[28] <= _T_646 @[CsrRegisterFile.scala 765:18]
    mhpmevent[29] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_647 = shl(UInt<1>("h01"), 29) @[CsrRegisterFile.scala 765:28]
    mhpmevent[29] <= _T_647 @[CsrRegisterFile.scala 765:18]
    mhpmevent[30] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_648 = shl(UInt<1>("h01"), 30) @[CsrRegisterFile.scala 765:28]
    mhpmevent[30] <= _T_648 @[CsrRegisterFile.scala 765:18]
    mhpmevent[31] <= UInt<1>("h00") @[CsrRegisterFile.scala 764:18]
    node _T_649 = shl(UInt<1>("h01"), 31) @[CsrRegisterFile.scala 765:28]
    mhpmevent[31] <= _T_649 @[CsrRegisterFile.scala 765:18]
    mhpmevent[1] <= UInt<1>("h00") @[CsrRegisterFile.scala 769:16]
    mhpmevent[13] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[14] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[15] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[16] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[17] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[18] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[19] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[20] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[21] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[22] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[23] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[24] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[25] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[26] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[27] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[28] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[29] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[30] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    mhpmevent[31] <= UInt<1>("h00") @[CsrRegisterFile.scala 773:18]
    inst COUNT_MCYCLE of BrqCounter @[CsrRegisterFile.scala 777:28]
    COUNT_MCYCLE.clock <= clock
    COUNT_MCYCLE.reset <= reset
    node _T_650 = bits(mhpmcounter_incr, 0, 0) @[CsrRegisterFile.scala 778:52]
    node _T_651 = bits(mcountinhibit, 0, 0) @[CsrRegisterFile.scala 778:72]
    node _T_652 = not(_T_651) @[CsrRegisterFile.scala 778:58]
    node _T_653 = and(_T_650, _T_652) @[CsrRegisterFile.scala 778:56]
    COUNT_MCYCLE.io.i_counter_inc <= _T_653 @[CsrRegisterFile.scala 778:33]
    node _T_654 = bits(mhpmcounterh_we, 0, 0) @[CsrRegisterFile.scala 779:51]
    COUNT_MCYCLE.io.i_counterh_we <= _T_654 @[CsrRegisterFile.scala 779:33]
    node _T_655 = bits(mhpmcounter_we, 0, 0) @[CsrRegisterFile.scala 780:50]
    COUNT_MCYCLE.io.i_counter_we <= _T_655 @[CsrRegisterFile.scala 780:33]
    COUNT_MCYCLE.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 781:33]
    mhpmcounter[0] <= COUNT_MCYCLE.io.o_counter_val @[CsrRegisterFile.scala 782:33]
    inst COUNT_MINSTRET of BrqCounter_1 @[CsrRegisterFile.scala 785:30]
    COUNT_MINSTRET.clock <= clock
    COUNT_MINSTRET.reset <= reset
    node _T_656 = bits(mhpmcounter_incr, 2, 2) @[CsrRegisterFile.scala 786:54]
    node _T_657 = bits(mcountinhibit, 2, 2) @[CsrRegisterFile.scala 786:74]
    node _T_658 = not(_T_657) @[CsrRegisterFile.scala 786:60]
    node _T_659 = and(_T_656, _T_658) @[CsrRegisterFile.scala 786:58]
    COUNT_MINSTRET.io.i_counter_inc <= _T_659 @[CsrRegisterFile.scala 786:35]
    node _T_660 = bits(mhpmcounterh_we, 2, 2) @[CsrRegisterFile.scala 787:53]
    COUNT_MINSTRET.io.i_counterh_we <= _T_660 @[CsrRegisterFile.scala 787:35]
    node _T_661 = bits(mhpmcounter_we, 2, 2) @[CsrRegisterFile.scala 788:52]
    COUNT_MINSTRET.io.i_counter_we <= _T_661 @[CsrRegisterFile.scala 788:35]
    COUNT_MINSTRET.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 789:35]
    mhpmcounter[2] <= COUNT_MINSTRET.io.o_counter_val @[CsrRegisterFile.scala 790:35]
    mhpmcounter[1] <= UInt<1>("h00") @[CsrRegisterFile.scala 793:18]
    inst BrqCounter of BrqCounter_2 @[CsrRegisterFile.scala 797:26]
    BrqCounter.clock <= clock
    BrqCounter.reset <= reset
    node _T_662 = bits(mhpmcounter_incr, 3, 3) @[CsrRegisterFile.scala 799:50]
    node _T_663 = bits(mcountinhibit, 3, 3) @[CsrRegisterFile.scala 799:74]
    node _T_664 = not(_T_663) @[CsrRegisterFile.scala 799:60]
    node _T_665 = and(_T_662, _T_664) @[CsrRegisterFile.scala 799:58]
    BrqCounter.io.i_counter_inc <= _T_665 @[CsrRegisterFile.scala 799:31]
    node _T_666 = bits(mhpmcounterh_we, 3, 3) @[CsrRegisterFile.scala 800:49]
    BrqCounter.io.i_counterh_we <= _T_666 @[CsrRegisterFile.scala 800:31]
    node _T_667 = bits(mhpmcounter_we, 3, 3) @[CsrRegisterFile.scala 801:48]
    BrqCounter.io.i_counter_we <= _T_667 @[CsrRegisterFile.scala 801:31]
    BrqCounter.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[3] <= BrqCounter.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    inst BrqCounter_1 of BrqCounter_3 @[CsrRegisterFile.scala 797:26]
    BrqCounter_1.clock <= clock
    BrqCounter_1.reset <= reset
    node _T_668 = bits(mhpmcounter_incr, 4, 4) @[CsrRegisterFile.scala 799:50]
    node _T_669 = bits(mcountinhibit, 4, 4) @[CsrRegisterFile.scala 799:74]
    node _T_670 = not(_T_669) @[CsrRegisterFile.scala 799:60]
    node _T_671 = and(_T_668, _T_670) @[CsrRegisterFile.scala 799:58]
    BrqCounter_1.io.i_counter_inc <= _T_671 @[CsrRegisterFile.scala 799:31]
    node _T_672 = bits(mhpmcounterh_we, 4, 4) @[CsrRegisterFile.scala 800:49]
    BrqCounter_1.io.i_counterh_we <= _T_672 @[CsrRegisterFile.scala 800:31]
    node _T_673 = bits(mhpmcounter_we, 4, 4) @[CsrRegisterFile.scala 801:48]
    BrqCounter_1.io.i_counter_we <= _T_673 @[CsrRegisterFile.scala 801:31]
    BrqCounter_1.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[4] <= BrqCounter_1.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    inst BrqCounter_2 of BrqCounter_4 @[CsrRegisterFile.scala 797:26]
    BrqCounter_2.clock <= clock
    BrqCounter_2.reset <= reset
    node _T_674 = bits(mhpmcounter_incr, 5, 5) @[CsrRegisterFile.scala 799:50]
    node _T_675 = bits(mcountinhibit, 5, 5) @[CsrRegisterFile.scala 799:74]
    node _T_676 = not(_T_675) @[CsrRegisterFile.scala 799:60]
    node _T_677 = and(_T_674, _T_676) @[CsrRegisterFile.scala 799:58]
    BrqCounter_2.io.i_counter_inc <= _T_677 @[CsrRegisterFile.scala 799:31]
    node _T_678 = bits(mhpmcounterh_we, 5, 5) @[CsrRegisterFile.scala 800:49]
    BrqCounter_2.io.i_counterh_we <= _T_678 @[CsrRegisterFile.scala 800:31]
    node _T_679 = bits(mhpmcounter_we, 5, 5) @[CsrRegisterFile.scala 801:48]
    BrqCounter_2.io.i_counter_we <= _T_679 @[CsrRegisterFile.scala 801:31]
    BrqCounter_2.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[5] <= BrqCounter_2.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    inst BrqCounter_3 of BrqCounter_5 @[CsrRegisterFile.scala 797:26]
    BrqCounter_3.clock <= clock
    BrqCounter_3.reset <= reset
    node _T_680 = bits(mhpmcounter_incr, 6, 6) @[CsrRegisterFile.scala 799:50]
    node _T_681 = bits(mcountinhibit, 6, 6) @[CsrRegisterFile.scala 799:74]
    node _T_682 = not(_T_681) @[CsrRegisterFile.scala 799:60]
    node _T_683 = and(_T_680, _T_682) @[CsrRegisterFile.scala 799:58]
    BrqCounter_3.io.i_counter_inc <= _T_683 @[CsrRegisterFile.scala 799:31]
    node _T_684 = bits(mhpmcounterh_we, 6, 6) @[CsrRegisterFile.scala 800:49]
    BrqCounter_3.io.i_counterh_we <= _T_684 @[CsrRegisterFile.scala 800:31]
    node _T_685 = bits(mhpmcounter_we, 6, 6) @[CsrRegisterFile.scala 801:48]
    BrqCounter_3.io.i_counter_we <= _T_685 @[CsrRegisterFile.scala 801:31]
    BrqCounter_3.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[6] <= BrqCounter_3.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    inst BrqCounter_4 of BrqCounter_6 @[CsrRegisterFile.scala 797:26]
    BrqCounter_4.clock <= clock
    BrqCounter_4.reset <= reset
    node _T_686 = bits(mhpmcounter_incr, 7, 7) @[CsrRegisterFile.scala 799:50]
    node _T_687 = bits(mcountinhibit, 7, 7) @[CsrRegisterFile.scala 799:74]
    node _T_688 = not(_T_687) @[CsrRegisterFile.scala 799:60]
    node _T_689 = and(_T_686, _T_688) @[CsrRegisterFile.scala 799:58]
    BrqCounter_4.io.i_counter_inc <= _T_689 @[CsrRegisterFile.scala 799:31]
    node _T_690 = bits(mhpmcounterh_we, 7, 7) @[CsrRegisterFile.scala 800:49]
    BrqCounter_4.io.i_counterh_we <= _T_690 @[CsrRegisterFile.scala 800:31]
    node _T_691 = bits(mhpmcounter_we, 7, 7) @[CsrRegisterFile.scala 801:48]
    BrqCounter_4.io.i_counter_we <= _T_691 @[CsrRegisterFile.scala 801:31]
    BrqCounter_4.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[7] <= BrqCounter_4.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    inst BrqCounter_5 of BrqCounter_7 @[CsrRegisterFile.scala 797:26]
    BrqCounter_5.clock <= clock
    BrqCounter_5.reset <= reset
    node _T_692 = bits(mhpmcounter_incr, 8, 8) @[CsrRegisterFile.scala 799:50]
    node _T_693 = bits(mcountinhibit, 8, 8) @[CsrRegisterFile.scala 799:74]
    node _T_694 = not(_T_693) @[CsrRegisterFile.scala 799:60]
    node _T_695 = and(_T_692, _T_694) @[CsrRegisterFile.scala 799:58]
    BrqCounter_5.io.i_counter_inc <= _T_695 @[CsrRegisterFile.scala 799:31]
    node _T_696 = bits(mhpmcounterh_we, 8, 8) @[CsrRegisterFile.scala 800:49]
    BrqCounter_5.io.i_counterh_we <= _T_696 @[CsrRegisterFile.scala 800:31]
    node _T_697 = bits(mhpmcounter_we, 8, 8) @[CsrRegisterFile.scala 801:48]
    BrqCounter_5.io.i_counter_we <= _T_697 @[CsrRegisterFile.scala 801:31]
    BrqCounter_5.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[8] <= BrqCounter_5.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    inst BrqCounter_6 of BrqCounter_8 @[CsrRegisterFile.scala 797:26]
    BrqCounter_6.clock <= clock
    BrqCounter_6.reset <= reset
    node _T_698 = bits(mhpmcounter_incr, 9, 9) @[CsrRegisterFile.scala 799:50]
    node _T_699 = bits(mcountinhibit, 9, 9) @[CsrRegisterFile.scala 799:74]
    node _T_700 = not(_T_699) @[CsrRegisterFile.scala 799:60]
    node _T_701 = and(_T_698, _T_700) @[CsrRegisterFile.scala 799:58]
    BrqCounter_6.io.i_counter_inc <= _T_701 @[CsrRegisterFile.scala 799:31]
    node _T_702 = bits(mhpmcounterh_we, 9, 9) @[CsrRegisterFile.scala 800:49]
    BrqCounter_6.io.i_counterh_we <= _T_702 @[CsrRegisterFile.scala 800:31]
    node _T_703 = bits(mhpmcounter_we, 9, 9) @[CsrRegisterFile.scala 801:48]
    BrqCounter_6.io.i_counter_we <= _T_703 @[CsrRegisterFile.scala 801:31]
    BrqCounter_6.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[9] <= BrqCounter_6.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    inst BrqCounter_7 of BrqCounter_9 @[CsrRegisterFile.scala 797:26]
    BrqCounter_7.clock <= clock
    BrqCounter_7.reset <= reset
    node _T_704 = bits(mhpmcounter_incr, 10, 10) @[CsrRegisterFile.scala 799:50]
    node _T_705 = bits(mcountinhibit, 10, 10) @[CsrRegisterFile.scala 799:74]
    node _T_706 = not(_T_705) @[CsrRegisterFile.scala 799:60]
    node _T_707 = and(_T_704, _T_706) @[CsrRegisterFile.scala 799:58]
    BrqCounter_7.io.i_counter_inc <= _T_707 @[CsrRegisterFile.scala 799:31]
    node _T_708 = bits(mhpmcounterh_we, 10, 10) @[CsrRegisterFile.scala 800:49]
    BrqCounter_7.io.i_counterh_we <= _T_708 @[CsrRegisterFile.scala 800:31]
    node _T_709 = bits(mhpmcounter_we, 10, 10) @[CsrRegisterFile.scala 801:48]
    BrqCounter_7.io.i_counter_we <= _T_709 @[CsrRegisterFile.scala 801:31]
    BrqCounter_7.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[10] <= BrqCounter_7.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    inst BrqCounter_8 of BrqCounter_10 @[CsrRegisterFile.scala 797:26]
    BrqCounter_8.clock <= clock
    BrqCounter_8.reset <= reset
    node _T_710 = bits(mhpmcounter_incr, 11, 11) @[CsrRegisterFile.scala 799:50]
    node _T_711 = bits(mcountinhibit, 11, 11) @[CsrRegisterFile.scala 799:74]
    node _T_712 = not(_T_711) @[CsrRegisterFile.scala 799:60]
    node _T_713 = and(_T_710, _T_712) @[CsrRegisterFile.scala 799:58]
    BrqCounter_8.io.i_counter_inc <= _T_713 @[CsrRegisterFile.scala 799:31]
    node _T_714 = bits(mhpmcounterh_we, 11, 11) @[CsrRegisterFile.scala 800:49]
    BrqCounter_8.io.i_counterh_we <= _T_714 @[CsrRegisterFile.scala 800:31]
    node _T_715 = bits(mhpmcounter_we, 11, 11) @[CsrRegisterFile.scala 801:48]
    BrqCounter_8.io.i_counter_we <= _T_715 @[CsrRegisterFile.scala 801:31]
    BrqCounter_8.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[11] <= BrqCounter_8.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    inst BrqCounter_9 of BrqCounter_11 @[CsrRegisterFile.scala 797:26]
    BrqCounter_9.clock <= clock
    BrqCounter_9.reset <= reset
    node _T_716 = bits(mhpmcounter_incr, 12, 12) @[CsrRegisterFile.scala 799:50]
    node _T_717 = bits(mcountinhibit, 12, 12) @[CsrRegisterFile.scala 799:74]
    node _T_718 = not(_T_717) @[CsrRegisterFile.scala 799:60]
    node _T_719 = and(_T_716, _T_718) @[CsrRegisterFile.scala 799:58]
    BrqCounter_9.io.i_counter_inc <= _T_719 @[CsrRegisterFile.scala 799:31]
    node _T_720 = bits(mhpmcounterh_we, 12, 12) @[CsrRegisterFile.scala 800:49]
    BrqCounter_9.io.i_counterh_we <= _T_720 @[CsrRegisterFile.scala 800:31]
    node _T_721 = bits(mhpmcounter_we, 12, 12) @[CsrRegisterFile.scala 801:48]
    BrqCounter_9.io.i_counter_we <= _T_721 @[CsrRegisterFile.scala 801:31]
    BrqCounter_9.io.i_counter_val <= csr_wdata_int @[CsrRegisterFile.scala 802:31]
    mhpmcounter[12] <= BrqCounter_9.io.o_counter_val @[CsrRegisterFile.scala 803:31]
    wire _T_722 : UInt<19> @[CsrRegisterFile.scala 808:47]
    wire _T_723 : UInt<19> @[CsrRegisterFile.scala 809:37]
    wire _T_724 : UInt<19> @[CsrRegisterFile.scala 810:38]
    node _T_725 = cat(UInt<19>("h01"), mcountinhibit_q) @[Cat.scala 29:58]
    mcountinhibit <= _T_725 @[CsrRegisterFile.scala 812:19]
    node _T_726 = bits(mhpmcounter_we, 31, 13) @[CsrRegisterFile.scala 814:45]
    _T_722 <= _T_726 @[CsrRegisterFile.scala 814:28]
    node _T_727 = bits(mhpmcounterh_we, 31, 13) @[CsrRegisterFile.scala 815:46]
    _T_723 <= _T_727 @[CsrRegisterFile.scala 815:28]
    node _T_728 = bits(mhpmcounter_incr, 31, 13) @[CsrRegisterFile.scala 816:47]
    _T_724 <= _T_728 @[CsrRegisterFile.scala 816:28]
    mcountinhibit_q <= mcountinhibit_d @[CsrRegisterFile.scala 823:19]
    tselect_rdata <= UInt<1>("h00") @[CsrRegisterFile.scala 892:26]
    tmatch_control_rdata <= UInt<1>("h00") @[CsrRegisterFile.scala 893:26]
    tmatch_value_rdata <= UInt<1>("h00") @[CsrRegisterFile.scala 894:26]
    io.o_trigger_match <= UInt<1>("h00") @[CsrRegisterFile.scala 895:26]
    
  module CsrControlUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip reg_wr_in_execute : UInt<1>, flip rd_sel_in_execute : UInt<5>, flip csr_wr_in_execute : UInt<1>, flip reg_wr_in_memory : UInt<1>, flip rd_sel_in_memory : UInt<5>, flip csr_wr_in_memory : UInt<1>, flip reg_wr_in_writeback : UInt<1>, flip rd_sel_in_writeback : UInt<5>, flip csr_wr_in_writeback : UInt<1>, flip rs1_sel_in_decode : UInt<5>, flip csr_inst_in_decode : UInt<1>, flip csr_imm_inst_in_decode : UInt<1>, flip load_inst_in_execute : UInt<1>, flip load_inst_in_memory : UInt<1>, flip dccm_rvalid_i : UInt<1>, forward_rs1 : UInt<3>, csr_op_en_o : UInt<1>}
    
    io.forward_rs1 <= UInt<1>("h00") @[CsrControlUnit.scala 40:18]
    io.csr_op_en_o <= UInt<1>("h00") @[CsrControlUnit.scala 41:18]
    wire hazard_in_decode_execute : UInt<1> @[CsrControlUnit.scala 43:38]
    wire hazard_in_decode_memory : UInt<1> @[CsrControlUnit.scala 44:37]
    wire hazard_in_decode_writeback : UInt<1> @[CsrControlUnit.scala 45:40]
    wire csr_hazard_in_decode_execute : UInt<1> @[CsrControlUnit.scala 47:42]
    wire csr_hazard_in_decode_memory : UInt<1> @[CsrControlUnit.scala 48:41]
    wire csr_hazard_in_decode_writeback : UInt<1> @[CsrControlUnit.scala 49:44]
    node _T = and(io.reg_wr_in_execute, io.csr_inst_in_decode) @[CsrControlUnit.scala 51:58]
    node _T_1 = not(io.csr_imm_inst_in_decode) @[CsrControlUnit.scala 51:86]
    node _T_2 = and(_T, _T_1) @[CsrControlUnit.scala 51:83]
    node _T_3 = neq(io.rd_sel_in_execute, UInt<1>("h00")) @[CsrControlUnit.scala 51:137]
    node _T_4 = and(_T_2, _T_3) @[CsrControlUnit.scala 51:113]
    node _T_5 = not(io.csr_wr_in_execute) @[CsrControlUnit.scala 51:148]
    node _T_6 = and(_T_4, _T_5) @[CsrControlUnit.scala 51:145]
    node _T_7 = eq(io.rd_sel_in_execute, io.rs1_sel_in_decode) @[CsrControlUnit.scala 51:195]
    node _T_8 = and(_T_6, _T_7) @[CsrControlUnit.scala 51:170]
    node _T_9 = mux(_T_8, UInt<1>("h01"), UInt<1>("h00")) @[CsrControlUnit.scala 51:36]
    hazard_in_decode_execute <= _T_9 @[CsrControlUnit.scala 51:30]
    node _T_10 = and(io.reg_wr_in_memory, io.csr_inst_in_decode) @[CsrControlUnit.scala 52:57]
    node _T_11 = not(io.csr_imm_inst_in_decode) @[CsrControlUnit.scala 52:85]
    node _T_12 = and(_T_10, _T_11) @[CsrControlUnit.scala 52:82]
    node _T_13 = neq(io.rd_sel_in_memory, UInt<1>("h00")) @[CsrControlUnit.scala 52:135]
    node _T_14 = and(_T_12, _T_13) @[CsrControlUnit.scala 52:112]
    node _T_15 = not(hazard_in_decode_execute) @[CsrControlUnit.scala 52:147]
    node _T_16 = and(_T_14, _T_15) @[CsrControlUnit.scala 52:144]
    node _T_17 = not(io.csr_wr_in_memory) @[CsrControlUnit.scala 52:176]
    node _T_18 = and(_T_16, _T_17) @[CsrControlUnit.scala 52:173]
    node _T_19 = eq(io.rd_sel_in_memory, io.rs1_sel_in_decode) @[CsrControlUnit.scala 52:221]
    node _T_20 = and(_T_18, _T_19) @[CsrControlUnit.scala 52:197]
    node _T_21 = mux(_T_20, UInt<1>("h01"), UInt<1>("h00")) @[CsrControlUnit.scala 52:36]
    hazard_in_decode_memory <= _T_21 @[CsrControlUnit.scala 52:30]
    node _T_22 = and(io.reg_wr_in_writeback, io.csr_inst_in_decode) @[CsrControlUnit.scala 53:60]
    node _T_23 = not(io.csr_imm_inst_in_decode) @[CsrControlUnit.scala 53:88]
    node _T_24 = and(_T_22, _T_23) @[CsrControlUnit.scala 53:85]
    node _T_25 = neq(io.rd_sel_in_writeback, UInt<1>("h00")) @[CsrControlUnit.scala 53:141]
    node _T_26 = and(_T_24, _T_25) @[CsrControlUnit.scala 53:115]
    node _T_27 = not(hazard_in_decode_execute) @[CsrControlUnit.scala 53:152]
    node _T_28 = and(_T_26, _T_27) @[CsrControlUnit.scala 53:149]
    node _T_29 = not(hazard_in_decode_memory) @[CsrControlUnit.scala 53:181]
    node _T_30 = and(_T_28, _T_29) @[CsrControlUnit.scala 53:178]
    node _T_31 = not(io.csr_wr_in_writeback) @[CsrControlUnit.scala 53:209]
    node _T_32 = and(_T_30, _T_31) @[CsrControlUnit.scala 53:206]
    node _T_33 = eq(io.rd_sel_in_writeback, io.rs1_sel_in_decode) @[CsrControlUnit.scala 53:259]
    node _T_34 = and(_T_32, _T_33) @[CsrControlUnit.scala 53:232]
    node _T_35 = mux(_T_34, UInt<1>("h01"), UInt<1>("h00")) @[CsrControlUnit.scala 53:36]
    hazard_in_decode_writeback <= _T_35 @[CsrControlUnit.scala 53:30]
    node _T_36 = and(io.reg_wr_in_execute, io.csr_inst_in_decode) @[CsrControlUnit.scala 55:60]
    node _T_37 = not(io.csr_imm_inst_in_decode) @[CsrControlUnit.scala 55:88]
    node _T_38 = and(_T_36, _T_37) @[CsrControlUnit.scala 55:85]
    node _T_39 = neq(io.rd_sel_in_execute, UInt<1>("h00")) @[CsrControlUnit.scala 55:139]
    node _T_40 = and(_T_38, _T_39) @[CsrControlUnit.scala 55:115]
    node _T_41 = and(_T_40, io.csr_wr_in_execute) @[CsrControlUnit.scala 55:147]
    node _T_42 = eq(io.rd_sel_in_execute, io.rs1_sel_in_decode) @[CsrControlUnit.scala 55:196]
    node _T_43 = and(_T_41, _T_42) @[CsrControlUnit.scala 55:171]
    node _T_44 = mux(_T_43, UInt<1>("h01"), UInt<1>("h00")) @[CsrControlUnit.scala 55:38]
    csr_hazard_in_decode_execute <= _T_44 @[CsrControlUnit.scala 55:32]
    node _T_45 = and(io.reg_wr_in_memory, io.csr_inst_in_decode) @[CsrControlUnit.scala 56:58]
    node _T_46 = not(io.csr_imm_inst_in_decode) @[CsrControlUnit.scala 56:86]
    node _T_47 = and(_T_45, _T_46) @[CsrControlUnit.scala 56:83]
    node _T_48 = neq(io.rd_sel_in_memory, UInt<1>("h00")) @[CsrControlUnit.scala 56:136]
    node _T_49 = and(_T_47, _T_48) @[CsrControlUnit.scala 56:113]
    node _T_50 = and(_T_49, io.csr_wr_in_memory) @[CsrControlUnit.scala 56:144]
    node _T_51 = not(csr_hazard_in_decode_execute) @[CsrControlUnit.scala 56:170]
    node _T_52 = and(_T_50, _T_51) @[CsrControlUnit.scala 56:167]
    node _T_53 = eq(io.rd_sel_in_memory, io.rs1_sel_in_decode) @[CsrControlUnit.scala 56:224]
    node _T_54 = and(_T_52, _T_53) @[CsrControlUnit.scala 56:200]
    node _T_55 = mux(_T_54, UInt<1>("h01"), UInt<1>("h00")) @[CsrControlUnit.scala 56:37]
    csr_hazard_in_decode_memory <= _T_55 @[CsrControlUnit.scala 56:31]
    node _T_56 = and(io.reg_wr_in_writeback, io.csr_inst_in_decode) @[CsrControlUnit.scala 57:64]
    node _T_57 = not(io.csr_imm_inst_in_decode) @[CsrControlUnit.scala 57:92]
    node _T_58 = and(_T_56, _T_57) @[CsrControlUnit.scala 57:89]
    node _T_59 = neq(io.rd_sel_in_writeback, UInt<1>("h00")) @[CsrControlUnit.scala 57:146]
    node _T_60 = and(_T_58, _T_59) @[CsrControlUnit.scala 57:119]
    node _T_61 = and(_T_60, io.csr_wr_in_writeback) @[CsrControlUnit.scala 57:154]
    node _T_62 = not(csr_hazard_in_decode_execute) @[CsrControlUnit.scala 57:183]
    node _T_63 = and(_T_61, _T_62) @[CsrControlUnit.scala 57:180]
    node _T_64 = not(csr_hazard_in_decode_memory) @[CsrControlUnit.scala 57:216]
    node _T_65 = and(_T_63, _T_64) @[CsrControlUnit.scala 57:213]
    node _T_66 = eq(io.rd_sel_in_writeback, io.rs1_sel_in_decode) @[CsrControlUnit.scala 57:272]
    node _T_67 = and(_T_65, _T_66) @[CsrControlUnit.scala 57:245]
    node _T_68 = mux(_T_67, UInt<1>("h01"), UInt<1>("h00")) @[CsrControlUnit.scala 57:40]
    csr_hazard_in_decode_writeback <= _T_68 @[CsrControlUnit.scala 57:34]
    when hazard_in_decode_execute : @[CsrControlUnit.scala 59:34]
      io.forward_rs1 <= UInt<1>("h01") @[CsrControlUnit.scala 60:20]
      skip @[CsrControlUnit.scala 59:34]
    when hazard_in_decode_memory : @[CsrControlUnit.scala 64:33]
      io.forward_rs1 <= UInt<2>("h02") @[CsrControlUnit.scala 65:20]
      skip @[CsrControlUnit.scala 64:33]
    when hazard_in_decode_writeback : @[CsrControlUnit.scala 69:36]
      io.forward_rs1 <= UInt<2>("h03") @[CsrControlUnit.scala 70:20]
      skip @[CsrControlUnit.scala 69:36]
    when csr_hazard_in_decode_execute : @[CsrControlUnit.scala 73:38]
      io.forward_rs1 <= UInt<3>("h04") @[CsrControlUnit.scala 74:20]
      skip @[CsrControlUnit.scala 73:38]
    when csr_hazard_in_decode_memory : @[CsrControlUnit.scala 77:37]
      io.forward_rs1 <= UInt<3>("h05") @[CsrControlUnit.scala 78:20]
      skip @[CsrControlUnit.scala 77:37]
    when csr_hazard_in_decode_writeback : @[CsrControlUnit.scala 81:40]
      io.forward_rs1 <= UInt<3>("h06") @[CsrControlUnit.scala 82:20]
      skip @[CsrControlUnit.scala 81:40]
    when io.csr_inst_in_decode : @[CsrControlUnit.scala 85:31]
      node _T_69 = and(io.load_inst_in_memory, io.dccm_rvalid_i) @[CsrControlUnit.scala 86:33]
      when _T_69 : @[CsrControlUnit.scala 86:54]
        io.csr_op_en_o <= UInt<1>("h01") @[CsrControlUnit.scala 87:22]
        skip @[CsrControlUnit.scala 86:54]
      else : @[CsrControlUnit.scala 88:70]
        node _T_70 = not(io.load_inst_in_execute) @[CsrControlUnit.scala 88:17]
        node _T_71 = not(io.load_inst_in_memory) @[CsrControlUnit.scala 88:45]
        node _T_72 = and(_T_70, _T_71) @[CsrControlUnit.scala 88:42]
        when _T_72 : @[CsrControlUnit.scala 88:70]
          io.csr_op_en_o <= UInt<1>("h01") @[CsrControlUnit.scala 89:22]
          skip @[CsrControlUnit.scala 88:70]
      skip @[CsrControlUnit.scala 85:31]
    
  module Decode : 
    input clock : Clock
    input reset : Reset
    output io : {flip irq_external_i : UInt<1>, flip IF_ID_inst : UInt<32>, flip IF_ID_pc : SInt<32>, flip IF_ID_pc4 : SInt<32>, flip MEM_WB_ctrl_regWr : UInt<1>, flip MEM_WB_ctrl_csrWen : UInt<1>, flip MEM_WB_rd_sel : UInt<5>, flip ID_EX_ctrl_MemRd : UInt<1>, flip ID_EX_ctrl_regWr : UInt<1>, flip ID_EX_ctrl_csrWen : UInt<1>, flip EX_MEM_ctrl_csrWen : UInt<1>, flip ID_EX_rd_sel : UInt<5>, flip EX_MEM_rd_sel : UInt<5>, flip EX_MEM_ctrl_MemRd : UInt<1>, flip EX_MEM_ctrl_regWr : UInt<1>, flip MEM_WB_ctrl_MemRd : UInt<1>, flip alu_output : SInt<32>, flip EX_MEM_alu_output : SInt<32>, flip MEM_WB_alu_output : SInt<32>, flip dmem_memOut : SInt<32>, flip dccm_rvalid_i : UInt<1>, flip writeback_write_data : SInt<32>, flip MEM_WB_csr_rdata_i : UInt<32>, flip EX_MEM_csr_rdata_i : UInt<32>, flip ID_EX_csr_rdata_i : UInt<32>, flip fetch_csr_mtvec_init : UInt<1>, flip fetch_csr_if_pc : UInt<32>, flip fetch_csr_save_if : UInt<1>, flip fetch_exc_cause_i : UInt<6>, flip fetch_csr_save_cause_i : UInt<1>, flip execute_regwrite : UInt<1>, flip mem_regwrite : UInt<1>, flip wb_regwrite : UInt<1>, pc_out : SInt<32>, pc4_out : SInt<32>, inst_op_out : UInt<32>, func3_out : UInt<3>, func7_out : UInt<7>, rd_sel_out : UInt<5>, rs1_sel_out : UInt<5>, rs2_sel_out : UInt<5>, rs1_out : SInt<32>, rs2_out : SInt<32>, csr_rdata_o : UInt<32>, imm_out : SInt<32>, sb_imm : SInt<32>, uj_imm : SInt<32>, jalr_output : SInt<32>, branchLogic_output : UInt<1>, hazardDetection_pc_out : SInt<32>, hazardDetection_inst_out : UInt<32>, hazardDetection_current_pc_out : SInt<32>, hazardDetection_pc_forward : UInt<1>, hazardDetection_inst_forward : UInt<1>, ctrl_MemWr_out : UInt<1>, ctrl_MemRd_out : UInt<1>, ctrl_Branch_out : UInt<1>, ctrl_RegWr_out : UInt<1>, ctrl_CsrWen_out : UInt<1>, ctrl_MemToReg_out : UInt<1>, ctrl_AluOp_out : UInt<4>, ctrl_OpA_sel_out : UInt<2>, ctrl_OpB_sel_out : UInt<1>, ctrl_next_pc_sel_out : UInt<2>, reg_7_out : SInt<32>, fetch_irq_pending_o : UInt<1>, fetch_csr_mstatus_mie_o : UInt<1>, fetch_csr_mtvec_o : UInt<32>, fetch_csr_mepc_o : UInt<32>, fetch_mret_inst_o : UInt<1>}
    
    inst hazardDetection of HazardDetection @[Decode.scala 95:31]
    hazardDetection.clock <= clock
    hazardDetection.reset <= reset
    inst control of Control @[Decode.scala 96:23]
    control.clock <= clock
    control.reset <= reset
    inst decodeForwardUnit of DecodeForwardUnit @[Decode.scala 97:33]
    decodeForwardUnit.clock <= clock
    decodeForwardUnit.reset <= reset
    inst branchLogic of BranchLogic @[Decode.scala 98:27]
    branchLogic.clock <= clock
    branchLogic.reset <= reset
    inst reg_file of RegisterFile @[Decode.scala 99:24]
    reg_file.clock <= clock
    reg_file.reset <= reset
    inst imm_generation of ImmediateGeneration @[Decode.scala 100:30]
    imm_generation.clock <= clock
    imm_generation.reset <= reset
    inst structuralDetector of StructuralDetector @[Decode.scala 101:34]
    structuralDetector.clock <= clock
    structuralDetector.reset <= reset
    inst jalr of Jalr @[Decode.scala 102:20]
    jalr.clock <= clock
    jalr.reset <= reset
    inst csrRegFile of CsrRegisterFile @[Decode.scala 103:26]
    csrRegFile.clock <= clock
    csrRegFile.reset <= reset
    inst csrControlUnit of CsrControlUnit @[Decode.scala 104:30]
    csrControlUnit.clock <= clock
    csrControlUnit.reset <= reset
    wire imm_out : SInt<32> @[Decode.scala 107:21]
    wire mret_inst : UInt<1> @[Decode.scala 108:23]
    wire csr_wdata : UInt<32> @[Decode.scala 109:23]
    node _T = bits(io.IF_ID_inst, 6, 0) @[Decode.scala 111:33]
    node _T_1 = eq(_T, UInt<7>("h073")) @[Decode.scala 111:40]
    node _T_2 = bits(io.IF_ID_inst, 14, 12) @[Decode.scala 111:68]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Decode.scala 111:77]
    node _T_4 = and(_T_1, _T_3) @[Decode.scala 111:52]
    node _T_5 = bits(io.IF_ID_inst, 31, 20) @[Decode.scala 111:106]
    node _T_6 = eq(_T_5, UInt<12>("h0302")) @[Decode.scala 111:115]
    node _T_7 = and(_T_4, _T_6) @[Decode.scala 111:90]
    node _T_8 = mux(_T_7, UInt<1>("h01"), UInt<1>("h00")) @[Decode.scala 111:19]
    mret_inst <= _T_8 @[Decode.scala 111:13]
    csrRegFile.io.i_hart_id <= UInt<1>("h00") @[Decode.scala 114:27]
    csrRegFile.io.i_boot_addr <= UInt<1>("h00") @[Decode.scala 115:29]
    csrRegFile.io.i_csr_mtvec_init <= io.fetch_csr_mtvec_init @[Decode.scala 116:34]
    csrRegFile.io.i_csr_access <= control.io.csr_we_o @[Decode.scala 117:30]
    csrRegFile.io.i_csr_wdata <= csr_wdata @[Decode.scala 118:29]
    csrRegFile.io.i_csr_op <= control.io.csr_op_o @[Decode.scala 119:26]
    csrRegFile.io.i_csr_op_en <= csrControlUnit.io.csr_op_en_o @[Decode.scala 120:29]
    node _T_9 = bits(io.IF_ID_inst, 31, 20) @[Decode.scala 121:44]
    csrRegFile.io.i_csr_addr <= _T_9 @[Decode.scala 121:28]
    csrRegFile.io.i_irq_software <= UInt<1>("h00") @[Decode.scala 122:32]
    csrRegFile.io.i_irq_timer <= UInt<1>("h00") @[Decode.scala 123:29]
    csrRegFile.io.i_irq_external <= io.irq_external_i @[Decode.scala 124:32]
    csrRegFile.io.i_nmi_mode <= UInt<1>("h00") @[Decode.scala 125:28]
    csrRegFile.io.i_pc_if <= io.fetch_csr_if_pc @[Decode.scala 126:25]
    csrRegFile.io.i_pc_id <= UInt<1>("h00") @[Decode.scala 127:25]
    csrRegFile.io.i_pc_wb <= UInt<1>("h00") @[Decode.scala 128:25]
    csrRegFile.io.i_csr_save_if <= io.fetch_csr_save_if @[Decode.scala 129:31]
    csrRegFile.io.i_csr_save_id <= UInt<1>("h00") @[Decode.scala 130:31]
    csrRegFile.io.i_csr_save_wb <= UInt<1>("h00") @[Decode.scala 131:31]
    csrRegFile.io.i_csr_restore_mret <= mret_inst @[Decode.scala 132:36]
    csrRegFile.io.i_csr_restore_dret <= UInt<1>("h00") @[Decode.scala 133:36]
    csrRegFile.io.i_csr_mcause <= io.fetch_exc_cause_i @[Decode.scala 134:30]
    csrRegFile.io.i_csr_save_cause <= io.fetch_csr_save_cause_i @[Decode.scala 135:34]
    csrRegFile.io.i_csr_mtval <= UInt<1>("h00") @[Decode.scala 136:29]
    csrRegFile.io.i_instr_ret <= UInt<1>("h00") @[Decode.scala 137:29]
    csrRegFile.io.i_iside_wait <= UInt<1>("h00") @[Decode.scala 138:30]
    csrRegFile.io.i_jump <= UInt<1>("h00") @[Decode.scala 139:24]
    csrRegFile.io.i_branch <= UInt<1>("h00") @[Decode.scala 140:26]
    csrRegFile.io.i_branch_taken <= UInt<1>("h00") @[Decode.scala 141:32]
    csrRegFile.io.i_mem_load <= UInt<1>("h00") @[Decode.scala 142:28]
    csrRegFile.io.i_mem_store <= UInt<1>("h00") @[Decode.scala 143:29]
    csrRegFile.io.i_dside_wait <= UInt<1>("h00") @[Decode.scala 144:30]
    csrRegFile.io.i_debug_mode <= UInt<1>("h00") @[Decode.scala 145:30]
    csrRegFile.io.i_debug_cause <= UInt<1>("h00") @[Decode.scala 146:31]
    csrRegFile.io.i_debug_csr_save <= UInt<1>("h00") @[Decode.scala 147:34]
    io.fetch_irq_pending_o <= csrRegFile.io.o_irq_pending @[Decode.scala 149:26]
    io.fetch_csr_mstatus_mie_o <= csrRegFile.io.o_csr_mstatus_mie @[Decode.scala 150:30]
    io.fetch_csr_mtvec_o <= csrRegFile.io.o_csr_mtvec @[Decode.scala 151:24]
    io.fetch_csr_mepc_o <= csrRegFile.io.o_csr_mepc @[Decode.scala 152:23]
    io.fetch_mret_inst_o <= mret_inst @[Decode.scala 153:24]
    csrControlUnit.io.reg_wr_in_execute <= io.ID_EX_ctrl_regWr @[Decode.scala 156:39]
    csrControlUnit.io.rd_sel_in_execute <= io.ID_EX_rd_sel @[Decode.scala 157:39]
    csrControlUnit.io.reg_wr_in_memory <= io.EX_MEM_ctrl_regWr @[Decode.scala 158:38]
    csrControlUnit.io.rd_sel_in_memory <= io.EX_MEM_rd_sel @[Decode.scala 159:38]
    csrControlUnit.io.reg_wr_in_writeback <= io.MEM_WB_ctrl_regWr @[Decode.scala 160:41]
    csrControlUnit.io.rd_sel_in_writeback <= io.MEM_WB_rd_sel @[Decode.scala 161:41]
    node _T_10 = bits(io.IF_ID_inst, 19, 15) @[Decode.scala 162:55]
    csrControlUnit.io.rs1_sel_in_decode <= _T_10 @[Decode.scala 162:39]
    csrControlUnit.io.csr_inst_in_decode <= control.io.csr_we_o @[Decode.scala 163:40]
    csrControlUnit.io.load_inst_in_execute <= io.ID_EX_ctrl_MemRd @[Decode.scala 164:42]
    csrControlUnit.io.load_inst_in_memory <= io.EX_MEM_ctrl_MemRd @[Decode.scala 165:41]
    csrControlUnit.io.dccm_rvalid_i <= io.dccm_rvalid_i @[Decode.scala 166:35]
    csrControlUnit.io.csr_wr_in_execute <= io.ID_EX_ctrl_csrWen @[Decode.scala 167:39]
    csrControlUnit.io.csr_wr_in_memory <= io.EX_MEM_ctrl_csrWen @[Decode.scala 168:38]
    csrControlUnit.io.csr_wr_in_writeback <= io.MEM_WB_ctrl_csrWen @[Decode.scala 169:41]
    csrControlUnit.io.csr_imm_inst_in_decode <= control.io.csr_imm_type @[Decode.scala 170:44]
    hazardDetection.io.IF_ID_INST <= io.IF_ID_inst @[Decode.scala 174:33]
    hazardDetection.io.ID_EX_MEMREAD <= io.ID_EX_ctrl_MemRd @[Decode.scala 175:36]
    hazardDetection.io.ID_EX_REGRD <= io.ID_EX_rd_sel @[Decode.scala 176:34]
    hazardDetection.io.pc_in <= io.IF_ID_pc4 @[Decode.scala 177:28]
    hazardDetection.io.current_pc <= io.IF_ID_pc @[Decode.scala 178:33]
    hazardDetection.io.IF_ID_MEMREAD <= control.io.out_memRead @[Decode.scala 179:36]
    io.hazardDetection_pc_out <= hazardDetection.io.pc_out @[Decode.scala 182:29]
    io.hazardDetection_current_pc_out <= hazardDetection.io.current_pc_out @[Decode.scala 183:37]
    io.hazardDetection_pc_forward <= hazardDetection.io.pc_forward @[Decode.scala 184:33]
    io.hazardDetection_inst_out <= hazardDetection.io.inst_out @[Decode.scala 185:31]
    io.hazardDetection_inst_forward <= hazardDetection.io.inst_forward @[Decode.scala 186:35]
    node _T_11 = bits(io.IF_ID_inst, 6, 0) @[Decode.scala 189:40]
    control.io.in_opcode <= _T_11 @[Decode.scala 189:24]
    node _T_12 = bits(io.IF_ID_inst, 31, 25) @[Decode.scala 191:36]
    control.io.func7 <= _T_12 @[Decode.scala 191:20]
    node _T_13 = bits(io.IF_ID_inst, 14, 12) @[Decode.scala 192:36]
    control.io.func3 <= _T_13 @[Decode.scala 192:20]
    decodeForwardUnit.io.ID_EX_REGRD <= io.ID_EX_rd_sel @[Decode.scala 195:36]
    decodeForwardUnit.io.ID_EX_MEMRD <= io.ID_EX_ctrl_MemRd @[Decode.scala 196:36]
    decodeForwardUnit.io.EX_MEM_REGRD <= io.EX_MEM_rd_sel @[Decode.scala 197:37]
    decodeForwardUnit.io.MEM_WB_REGRD <= io.MEM_WB_rd_sel @[Decode.scala 198:37]
    decodeForwardUnit.io.EX_MEM_MEMRD <= io.EX_MEM_ctrl_MemRd @[Decode.scala 199:37]
    decodeForwardUnit.io.MEM_WB_MEMRD <= io.MEM_WB_ctrl_MemRd @[Decode.scala 200:37]
    node _T_14 = bits(io.IF_ID_inst, 19, 15) @[Decode.scala 201:48]
    decodeForwardUnit.io.rs1_sel <= _T_14 @[Decode.scala 201:32]
    node _T_15 = bits(io.IF_ID_inst, 24, 20) @[Decode.scala 202:48]
    decodeForwardUnit.io.rs2_sel <= _T_15 @[Decode.scala 202:32]
    decodeForwardUnit.io.ctrl_branch <= control.io.out_branch @[Decode.scala 203:36]
    decodeForwardUnit.io.execute_regwrite <= io.execute_regwrite @[Decode.scala 205:41]
    decodeForwardUnit.io.mem_regwrite <= io.mem_regwrite @[Decode.scala 206:37]
    decodeForwardUnit.io.wb_regwrite <= io.wb_regwrite @[Decode.scala 207:36]
    node _T_16 = bits(io.IF_ID_inst, 14, 12) @[Decode.scala 209:43]
    branchLogic.io.in_func3 <= _T_16 @[Decode.scala 209:27]
    node _T_17 = eq(decodeForwardUnit.io.forward_rs1, UInt<1>("h00")) @[Decode.scala 216:41]
    when _T_17 : @[Decode.scala 216:56]
      branchLogic.io.in_rs1 <= reg_file.io.rs1 @[Decode.scala 218:27]
      jalr.io.input_a <= reg_file.io.rs1 @[Decode.scala 219:21]
      skip @[Decode.scala 216:56]
    else : @[Decode.scala 220:62]
      node _T_18 = eq(decodeForwardUnit.io.forward_rs1, UInt<1>("h01")) @[Decode.scala 220:47]
      when _T_18 : @[Decode.scala 220:62]
        branchLogic.io.in_rs1 <= io.alu_output @[Decode.scala 222:27]
        jalr.io.input_a <= reg_file.io.rs1 @[Decode.scala 223:21]
        skip @[Decode.scala 220:62]
      else : @[Decode.scala 224:62]
        node _T_19 = eq(decodeForwardUnit.io.forward_rs1, UInt<2>("h02")) @[Decode.scala 224:47]
        when _T_19 : @[Decode.scala 224:62]
          branchLogic.io.in_rs1 <= io.EX_MEM_alu_output @[Decode.scala 226:27]
          jalr.io.input_a <= reg_file.io.rs1 @[Decode.scala 227:21]
          skip @[Decode.scala 224:62]
        else : @[Decode.scala 228:62]
          node _T_20 = eq(decodeForwardUnit.io.forward_rs1, UInt<2>("h03")) @[Decode.scala 228:47]
          when _T_20 : @[Decode.scala 228:62]
            branchLogic.io.in_rs1 <= reg_file.io.writeData @[Decode.scala 230:27]
            jalr.io.input_a <= reg_file.io.rs1 @[Decode.scala 231:21]
            skip @[Decode.scala 228:62]
          else : @[Decode.scala 232:62]
            node _T_21 = eq(decodeForwardUnit.io.forward_rs1, UInt<3>("h04")) @[Decode.scala 232:47]
            when _T_21 : @[Decode.scala 232:62]
              branchLogic.io.in_rs1 <= io.dmem_memOut @[Decode.scala 234:27]
              jalr.io.input_a <= reg_file.io.rs1 @[Decode.scala 235:21]
              skip @[Decode.scala 232:62]
            else : @[Decode.scala 236:62]
              node _T_22 = eq(decodeForwardUnit.io.forward_rs1, UInt<3>("h05")) @[Decode.scala 236:47]
              when _T_22 : @[Decode.scala 236:62]
                branchLogic.io.in_rs1 <= reg_file.io.writeData @[Decode.scala 238:27]
                jalr.io.input_a <= reg_file.io.rs1 @[Decode.scala 239:21]
                skip @[Decode.scala 236:62]
              else : @[Decode.scala 246:63]
                node _T_23 = eq(decodeForwardUnit.io.forward_rs1, UInt<3>("h06")) @[Decode.scala 246:48]
                when _T_23 : @[Decode.scala 246:63]
                  jalr.io.input_a <= io.alu_output @[Decode.scala 248:23]
                  branchLogic.io.in_rs1 <= reg_file.io.rs1 @[Decode.scala 249:29]
                  skip @[Decode.scala 246:63]
                else : @[Decode.scala 250:64]
                  node _T_24 = eq(decodeForwardUnit.io.forward_rs1, UInt<3>("h07")) @[Decode.scala 250:49]
                  when _T_24 : @[Decode.scala 250:64]
                    jalr.io.input_a <= io.EX_MEM_alu_output @[Decode.scala 252:21]
                    branchLogic.io.in_rs1 <= reg_file.io.rs1 @[Decode.scala 253:27]
                    skip @[Decode.scala 250:64]
                  else : @[Decode.scala 254:62]
                    node _T_25 = eq(decodeForwardUnit.io.forward_rs1, UInt<4>("h08")) @[Decode.scala 254:47]
                    when _T_25 : @[Decode.scala 254:62]
                      jalr.io.input_a <= reg_file.io.writeData @[Decode.scala 256:21]
                      branchLogic.io.in_rs1 <= reg_file.io.rs1 @[Decode.scala 257:27]
                      skip @[Decode.scala 254:62]
                    else : @[Decode.scala 258:62]
                      node _T_26 = eq(decodeForwardUnit.io.forward_rs1, UInt<4>("h09")) @[Decode.scala 258:47]
                      when _T_26 : @[Decode.scala 258:62]
                        jalr.io.input_a <= io.dmem_memOut @[Decode.scala 260:21]
                        branchLogic.io.in_rs1 <= reg_file.io.rs1 @[Decode.scala 261:27]
                        skip @[Decode.scala 258:62]
                      else : @[Decode.scala 262:62]
                        node _T_27 = eq(decodeForwardUnit.io.forward_rs1, UInt<4>("h0a")) @[Decode.scala 262:47]
                        when _T_27 : @[Decode.scala 262:62]
                          jalr.io.input_a <= reg_file.io.writeData @[Decode.scala 264:21]
                          branchLogic.io.in_rs1 <= reg_file.io.rs1 @[Decode.scala 265:27]
                          skip @[Decode.scala 262:62]
                        else : @[Decode.scala 267:16]
                          branchLogic.io.in_rs1 <= reg_file.io.rs1 @[Decode.scala 268:29]
                          jalr.io.input_a <= reg_file.io.rs1 @[Decode.scala 269:23]
                          skip @[Decode.scala 267:16]
    node _T_28 = eq(decodeForwardUnit.io.forward_rs2, UInt<1>("h00")) @[Decode.scala 274:41]
    when _T_28 : @[Decode.scala 274:56]
      branchLogic.io.in_rs2 <= reg_file.io.rs2 @[Decode.scala 276:27]
      skip @[Decode.scala 274:56]
    else : @[Decode.scala 277:62]
      node _T_29 = eq(decodeForwardUnit.io.forward_rs2, UInt<1>("h01")) @[Decode.scala 277:47]
      when _T_29 : @[Decode.scala 277:62]
        branchLogic.io.in_rs2 <= io.alu_output @[Decode.scala 279:27]
        skip @[Decode.scala 277:62]
      else : @[Decode.scala 280:62]
        node _T_30 = eq(decodeForwardUnit.io.forward_rs2, UInt<2>("h02")) @[Decode.scala 280:47]
        when _T_30 : @[Decode.scala 280:62]
          branchLogic.io.in_rs2 <= io.EX_MEM_alu_output @[Decode.scala 282:27]
          skip @[Decode.scala 280:62]
        else : @[Decode.scala 283:62]
          node _T_31 = eq(decodeForwardUnit.io.forward_rs2, UInt<2>("h03")) @[Decode.scala 283:47]
          when _T_31 : @[Decode.scala 283:62]
            branchLogic.io.in_rs2 <= reg_file.io.writeData @[Decode.scala 285:27]
            skip @[Decode.scala 283:62]
          else : @[Decode.scala 286:62]
            node _T_32 = eq(decodeForwardUnit.io.forward_rs2, UInt<3>("h04")) @[Decode.scala 286:47]
            when _T_32 : @[Decode.scala 286:62]
              branchLogic.io.in_rs2 <= io.dmem_memOut @[Decode.scala 288:27]
              skip @[Decode.scala 286:62]
            else : @[Decode.scala 289:62]
              node _T_33 = eq(decodeForwardUnit.io.forward_rs2, UInt<3>("h05")) @[Decode.scala 289:47]
              when _T_33 : @[Decode.scala 289:62]
                branchLogic.io.in_rs2 <= reg_file.io.writeData @[Decode.scala 291:27]
                skip @[Decode.scala 289:62]
              else : @[Decode.scala 293:16]
                branchLogic.io.in_rs2 <= reg_file.io.rs2 @[Decode.scala 294:29]
                skip @[Decode.scala 293:16]
    jalr.io.input_b <= imm_generation.io.i_imm @[Decode.scala 297:19]
    io.branchLogic_output <= branchLogic.io.output @[Decode.scala 300:25]
    node _T_34 = eq(hazardDetection.io.ctrl_forward, UInt<1>("h01")) @[Decode.scala 305:40]
    when _T_34 : @[Decode.scala 305:52]
      io.ctrl_MemWr_out <= UInt<1>("h00") @[Decode.scala 381:23]
      io.ctrl_MemRd_out <= UInt<1>("h00") @[Decode.scala 382:23]
      io.ctrl_Branch_out <= UInt<1>("h00") @[Decode.scala 383:24]
      io.ctrl_RegWr_out <= UInt<1>("h00") @[Decode.scala 384:23]
      io.ctrl_CsrWen_out <= UInt<1>("h00") @[Decode.scala 385:24]
      io.ctrl_MemToReg_out <= UInt<1>("h00") @[Decode.scala 386:26]
      io.ctrl_AluOp_out <= UInt<1>("h00") @[Decode.scala 387:23]
      io.ctrl_OpA_sel_out <= UInt<1>("h00") @[Decode.scala 388:25]
      io.ctrl_OpB_sel_out <= UInt<1>("h00") @[Decode.scala 389:25]
      io.ctrl_next_pc_sel_out <= UInt<1>("h00") @[Decode.scala 390:29]
      skip @[Decode.scala 305:52]
    else : @[Decode.scala 307:15]
      io.ctrl_MemWr_out <= control.io.out_memWrite @[Decode.scala 395:23]
      io.ctrl_MemRd_out <= control.io.out_memRead @[Decode.scala 396:23]
      io.ctrl_Branch_out <= control.io.out_branch @[Decode.scala 397:24]
      io.ctrl_RegWr_out <= control.io.out_regWrite @[Decode.scala 398:23]
      io.ctrl_CsrWen_out <= control.io.csr_we_o @[Decode.scala 399:24]
      io.ctrl_MemToReg_out <= control.io.out_memToReg @[Decode.scala 400:26]
      io.ctrl_AluOp_out <= control.io.out_aluOp @[Decode.scala 401:23]
      io.ctrl_OpA_sel_out <= control.io.out_operand_a_sel @[Decode.scala 402:25]
      io.ctrl_OpB_sel_out <= control.io.out_operand_b_sel @[Decode.scala 403:25]
      io.ctrl_next_pc_sel_out <= control.io.out_next_pc_sel @[Decode.scala 404:29]
      skip @[Decode.scala 307:15]
    node _T_35 = bits(io.IF_ID_inst, 19, 15) @[Decode.scala 313:39]
    reg_file.io.rs1_sel <= _T_35 @[Decode.scala 313:23]
    node _T_36 = bits(io.IF_ID_inst, 24, 20) @[Decode.scala 314:39]
    reg_file.io.rs2_sel <= _T_36 @[Decode.scala 314:23]
    reg_file.io.regWrite <= io.MEM_WB_ctrl_regWr @[Decode.scala 315:24]
    reg_file.io.rd_sel <= io.MEM_WB_rd_sel @[Decode.scala 316:22]
    node _T_37 = asSInt(io.MEM_WB_csr_rdata_i) @[Decode.scala 317:83]
    node _T_38 = mux(io.MEM_WB_ctrl_csrWen, _T_37, io.writeback_write_data) @[Decode.scala 317:31]
    reg_file.io.writeData <= _T_38 @[Decode.scala 317:25]
    imm_generation.io.instruction <= io.IF_ID_inst @[Decode.scala 321:33]
    imm_generation.io.pc <= io.IF_ID_pc @[Decode.scala 322:24]
    io.sb_imm <= imm_generation.io.sb_imm @[Decode.scala 325:13]
    io.uj_imm <= imm_generation.io.uj_imm @[Decode.scala 326:13]
    io.jalr_output <= jalr.io.output @[Decode.scala 327:18]
    node _T_39 = bits(io.IF_ID_inst, 19, 15) @[Decode.scala 330:49]
    structuralDetector.io.rs1_sel <= _T_39 @[Decode.scala 330:33]
    node _T_40 = bits(io.IF_ID_inst, 24, 20) @[Decode.scala 331:49]
    structuralDetector.io.rs2_sel <= _T_40 @[Decode.scala 331:33]
    structuralDetector.io.MEM_WB_REGRD <= io.MEM_WB_rd_sel @[Decode.scala 332:38]
    structuralDetector.io.MEM_WB_regWr <= io.MEM_WB_ctrl_regWr @[Decode.scala 333:38]
    node _T_41 = bits(io.IF_ID_inst, 6, 0) @[Decode.scala 334:52]
    structuralDetector.io.inst_op_in <= _T_41 @[Decode.scala 334:36]
    node _T_42 = eq(structuralDetector.io.fwd_rs1, UInt<1>("h01")) @[Decode.scala 337:38]
    when _T_42 : @[Decode.scala 337:47]
      node _T_43 = bits(io.IF_ID_inst, 6, 0) @[Decode.scala 341:36]
      node _T_44 = neq(_T_43, UInt<6>("h037")) @[Decode.scala 341:43]
      node _T_45 = mux(_T_44, reg_file.io.writeData, asSInt(UInt<1>("h00"))) @[Decode.scala 341:22]
      io.rs1_out <= _T_45 @[Decode.scala 341:16]
      skip @[Decode.scala 337:47]
    else : @[Decode.scala 342:15]
      node _T_46 = bits(io.IF_ID_inst, 6, 0) @[Decode.scala 343:36]
      node _T_47 = neq(_T_46, UInt<6>("h037")) @[Decode.scala 343:43]
      node _T_48 = mux(_T_47, reg_file.io.rs1, asSInt(UInt<1>("h00"))) @[Decode.scala 343:22]
      io.rs1_out <= _T_48 @[Decode.scala 343:16]
      skip @[Decode.scala 342:15]
    node _T_49 = eq(structuralDetector.io.fwd_rs2, UInt<1>("h01")) @[Decode.scala 347:38]
    when _T_49 : @[Decode.scala 347:47]
      node _T_50 = bits(io.IF_ID_inst, 6, 0) @[Decode.scala 351:36]
      node _T_51 = neq(_T_50, UInt<6>("h037")) @[Decode.scala 351:43]
      node _T_52 = mux(_T_51, reg_file.io.writeData, asSInt(UInt<1>("h00"))) @[Decode.scala 351:22]
      io.rs2_out <= _T_52 @[Decode.scala 351:16]
      skip @[Decode.scala 347:47]
    else : @[Decode.scala 352:15]
      node _T_53 = bits(io.IF_ID_inst, 6, 0) @[Decode.scala 353:36]
      node _T_54 = neq(_T_53, UInt<6>("h037")) @[Decode.scala 353:43]
      node _T_55 = mux(_T_54, reg_file.io.rs2, asSInt(UInt<1>("h00"))) @[Decode.scala 353:22]
      io.rs2_out <= _T_55 @[Decode.scala 353:16]
      skip @[Decode.scala 352:15]
    node _T_56 = eq(control.io.out_extend_sel, UInt<1>("h00")) @[Decode.scala 356:34]
    when _T_56 : @[Decode.scala 356:47]
      imm_out <= imm_generation.io.i_imm @[Decode.scala 358:13]
      skip @[Decode.scala 356:47]
    else : @[Decode.scala 359:53]
      node _T_57 = eq(control.io.out_extend_sel, UInt<1>("h01")) @[Decode.scala 359:40]
      when _T_57 : @[Decode.scala 359:53]
        imm_out <= imm_generation.io.s_imm @[Decode.scala 361:13]
        skip @[Decode.scala 359:53]
      else : @[Decode.scala 362:53]
        node _T_58 = eq(control.io.out_extend_sel, UInt<2>("h02")) @[Decode.scala 362:40]
        when _T_58 : @[Decode.scala 362:53]
          imm_out <= imm_generation.io.u_imm @[Decode.scala 364:13]
          skip @[Decode.scala 362:53]
        else : @[Decode.scala 365:15]
          imm_out <= asSInt(UInt<32>("h00")) @[Decode.scala 366:13]
          skip @[Decode.scala 365:15]
    io.pc_out <= io.IF_ID_pc @[Decode.scala 369:13]
    io.pc4_out <= io.IF_ID_pc4 @[Decode.scala 370:14]
    node _T_59 = bits(io.IF_ID_inst, 6, 0) @[Decode.scala 371:34]
    io.inst_op_out <= _T_59 @[Decode.scala 371:18]
    node _T_60 = bits(io.IF_ID_inst, 14, 12) @[Decode.scala 372:32]
    io.func3_out <= _T_60 @[Decode.scala 372:16]
    node _T_61 = bits(io.IF_ID_inst, 31, 25) @[Decode.scala 373:32]
    io.func7_out <= _T_61 @[Decode.scala 373:16]
    node _T_62 = bits(io.IF_ID_inst, 11, 7) @[Decode.scala 374:33]
    io.rd_sel_out <= _T_62 @[Decode.scala 374:17]
    node _T_63 = bits(io.IF_ID_inst, 19, 15) @[Decode.scala 375:34]
    io.rs1_sel_out <= _T_63 @[Decode.scala 375:18]
    node _T_64 = bits(io.IF_ID_inst, 24, 20) @[Decode.scala 376:34]
    io.rs2_sel_out <= _T_64 @[Decode.scala 376:18]
    io.reg_7_out <= reg_file.io.reg_7 @[Decode.scala 408:16]
    io.imm_out <= imm_out @[Decode.scala 410:14]
    node _T_65 = eq(control.io.csr_imm_type, UInt<1>("h01")) @[Decode.scala 412:32]
    when _T_65 : @[Decode.scala 412:41]
      node _T_66 = bits(io.IF_ID_inst, 19, 15) @[Decode.scala 413:31]
      csr_wdata <= _T_66 @[Decode.scala 413:15]
      skip @[Decode.scala 412:41]
    else : @[Decode.scala 414:16]
      node _T_67 = eq(csrControlUnit.io.forward_rs1, UInt<1>("h01")) @[Decode.scala 415:40]
      when _T_67 : @[Decode.scala 415:49]
        node _T_68 = asUInt(io.alu_output) @[Decode.scala 416:40]
        csr_wdata <= _T_68 @[Decode.scala 416:17]
        skip @[Decode.scala 415:49]
      else : @[Decode.scala 417:55]
        node _T_69 = eq(csrControlUnit.io.forward_rs1, UInt<2>("h02")) @[Decode.scala 417:46]
        when _T_69 : @[Decode.scala 417:55]
          node _T_70 = eq(io.EX_MEM_ctrl_MemRd, UInt<1>("h01")) @[Decode.scala 420:45]
          node _T_71 = asUInt(io.dmem_memOut) @[Decode.scala 420:75]
          node _T_72 = asUInt(io.EX_MEM_alu_output) @[Decode.scala 420:106]
          node _T_73 = mux(_T_70, _T_71, _T_72) @[Decode.scala 420:23]
          csr_wdata <= _T_73 @[Decode.scala 420:17]
          skip @[Decode.scala 417:55]
        else : @[Decode.scala 421:55]
          node _T_74 = eq(csrControlUnit.io.forward_rs1, UInt<2>("h03")) @[Decode.scala 421:46]
          when _T_74 : @[Decode.scala 421:55]
            node _T_75 = asUInt(io.writeback_write_data) @[Decode.scala 422:50]
            csr_wdata <= _T_75 @[Decode.scala 422:17]
            skip @[Decode.scala 421:55]
          else : @[Decode.scala 423:55]
            node _T_76 = eq(csrControlUnit.io.forward_rs1, UInt<3>("h04")) @[Decode.scala 423:46]
            when _T_76 : @[Decode.scala 423:55]
              csr_wdata <= io.ID_EX_csr_rdata_i @[Decode.scala 425:17]
              skip @[Decode.scala 423:55]
            else : @[Decode.scala 426:55]
              node _T_77 = eq(csrControlUnit.io.forward_rs1, UInt<3>("h05")) @[Decode.scala 426:46]
              when _T_77 : @[Decode.scala 426:55]
                csr_wdata <= io.EX_MEM_csr_rdata_i @[Decode.scala 428:17]
                skip @[Decode.scala 426:55]
              else : @[Decode.scala 429:55]
                node _T_78 = eq(csrControlUnit.io.forward_rs1, UInt<3>("h06")) @[Decode.scala 429:46]
                when _T_78 : @[Decode.scala 429:55]
                  csr_wdata <= io.MEM_WB_csr_rdata_i @[Decode.scala 430:17]
                  skip @[Decode.scala 429:55]
                else : @[Decode.scala 431:17]
                  node _T_79 = asUInt(reg_file.io.rs1) @[Decode.scala 432:42]
                  csr_wdata <= _T_79 @[Decode.scala 432:17]
                  skip @[Decode.scala 431:17]
      skip @[Decode.scala 414:16]
    io.csr_rdata_o <= csrRegFile.io.o_csr_rdata @[Decode.scala 437:18]
    
  module ForwardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip EX_MEM_REGRD : UInt<5>, flip MEM_WB_REGRD : UInt<5>, flip ID_EX_REGRS1 : UInt<5>, flip ID_EX_REGRS2 : UInt<5>, flip ID_EX_inst_op : UInt<7>, flip EX_MEM_REGWR : UInt<1>, flip MEM_WB_REGWR : UInt<1>, forward_a : UInt<2>, forward_b : UInt<2>}
    
    io.forward_a <= UInt<1>("h00") @[ForwardUnit.scala 17:18]
    io.forward_b <= UInt<1>("h00") @[ForwardUnit.scala 18:18]
    node _T = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[ForwardUnit.scala 23:26]
    node _T_1 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[ForwardUnit.scala 23:56]
    node _T_2 = and(_T, _T_1) @[ForwardUnit.scala 23:37]
    node _T_3 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS1) @[ForwardUnit.scala 23:91]
    node _T_4 = and(_T_2, _T_3) @[ForwardUnit.scala 23:71]
    node _T_5 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[ForwardUnit.scala 23:132]
    node _T_6 = and(_T_4, _T_5) @[ForwardUnit.scala 23:112]
    node _T_7 = neq(io.ID_EX_inst_op, UInt<6>("h037")) @[ForwardUnit.scala 23:173]
    node _T_8 = and(_T_6, _T_7) @[ForwardUnit.scala 23:153]
    when _T_8 : @[ForwardUnit.scala 23:191]
      io.forward_a <= UInt<1>("h01") @[ForwardUnit.scala 29:22]
      io.forward_b <= UInt<1>("h01") @[ForwardUnit.scala 30:22]
      skip @[ForwardUnit.scala 23:191]
    else : @[ForwardUnit.scala 31:157]
      node _T_9 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[ForwardUnit.scala 31:33]
      node _T_10 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[ForwardUnit.scala 31:63]
      node _T_11 = and(_T_9, _T_10) @[ForwardUnit.scala 31:44]
      node _T_12 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[ForwardUnit.scala 31:98]
      node _T_13 = and(_T_11, _T_12) @[ForwardUnit.scala 31:78]
      node _T_14 = neq(io.ID_EX_inst_op, UInt<6>("h037")) @[ForwardUnit.scala 31:139]
      node _T_15 = and(_T_13, _T_14) @[ForwardUnit.scala 31:119]
      when _T_15 : @[ForwardUnit.scala 31:157]
        io.forward_b <= UInt<1>("h01") @[ForwardUnit.scala 32:22]
        skip @[ForwardUnit.scala 31:157]
      else : @[ForwardUnit.scala 34:157]
        node _T_16 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[ForwardUnit.scala 34:33]
        node _T_17 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[ForwardUnit.scala 34:63]
        node _T_18 = and(_T_16, _T_17) @[ForwardUnit.scala 34:44]
        node _T_19 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS1) @[ForwardUnit.scala 34:98]
        node _T_20 = and(_T_18, _T_19) @[ForwardUnit.scala 34:78]
        node _T_21 = neq(io.ID_EX_inst_op, UInt<6>("h037")) @[ForwardUnit.scala 34:139]
        node _T_22 = and(_T_20, _T_21) @[ForwardUnit.scala 34:119]
        when _T_22 : @[ForwardUnit.scala 34:157]
          io.forward_a <= UInt<1>("h01") @[ForwardUnit.scala 35:22]
          skip @[ForwardUnit.scala 34:157]
    node _T_23 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[ForwardUnit.scala 42:26]
    node _T_24 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[ForwardUnit.scala 42:56]
    node _T_25 = and(_T_23, _T_24) @[ForwardUnit.scala 42:37]
    node _T_26 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[ForwardUnit.scala 42:93]
    node _T_27 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[ForwardUnit.scala 42:125]
    node _T_28 = and(_T_26, _T_27) @[ForwardUnit.scala 42:105]
    node _T_29 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS1) @[ForwardUnit.scala 42:161]
    node _T_30 = and(_T_28, _T_29) @[ForwardUnit.scala 42:141]
    node _T_31 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[ForwardUnit.scala 42:202]
    node _T_32 = and(_T_30, _T_31) @[ForwardUnit.scala 42:182]
    node _T_33 = not(_T_32) @[ForwardUnit.scala 42:74]
    node _T_34 = and(_T_25, _T_33) @[ForwardUnit.scala 42:71]
    node _T_35 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS1) @[ForwardUnit.scala 42:244]
    node _T_36 = and(_T_34, _T_35) @[ForwardUnit.scala 42:224]
    node _T_37 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS2) @[ForwardUnit.scala 42:285]
    node _T_38 = and(_T_36, _T_37) @[ForwardUnit.scala 42:265]
    node _T_39 = neq(io.ID_EX_inst_op, UInt<6>("h037")) @[ForwardUnit.scala 42:326]
    node _T_40 = and(_T_38, _T_39) @[ForwardUnit.scala 42:306]
    when _T_40 : @[ForwardUnit.scala 42:344]
      io.forward_a <= UInt<2>("h02") @[ForwardUnit.scala 43:22]
      io.forward_b <= UInt<2>("h02") @[ForwardUnit.scala 44:22]
      skip @[ForwardUnit.scala 42:344]
    else : @[ForwardUnit.scala 45:269]
      node _T_41 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[ForwardUnit.scala 45:33]
      node _T_42 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[ForwardUnit.scala 45:63]
      node _T_43 = and(_T_41, _T_42) @[ForwardUnit.scala 45:44]
      node _T_44 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[ForwardUnit.scala 45:100]
      node _T_45 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[ForwardUnit.scala 45:132]
      node _T_46 = and(_T_44, _T_45) @[ForwardUnit.scala 45:112]
      node _T_47 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[ForwardUnit.scala 45:168]
      node _T_48 = and(_T_46, _T_47) @[ForwardUnit.scala 45:148]
      node _T_49 = not(_T_48) @[ForwardUnit.scala 45:81]
      node _T_50 = and(_T_43, _T_49) @[ForwardUnit.scala 45:78]
      node _T_51 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS2) @[ForwardUnit.scala 45:210]
      node _T_52 = and(_T_50, _T_51) @[ForwardUnit.scala 45:190]
      node _T_53 = neq(io.ID_EX_inst_op, UInt<6>("h037")) @[ForwardUnit.scala 45:251]
      node _T_54 = and(_T_52, _T_53) @[ForwardUnit.scala 45:231]
      when _T_54 : @[ForwardUnit.scala 45:269]
        io.forward_b <= UInt<2>("h02") @[ForwardUnit.scala 46:22]
        skip @[ForwardUnit.scala 45:269]
      else : @[ForwardUnit.scala 48:270]
        node _T_55 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[ForwardUnit.scala 48:33]
        node _T_56 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[ForwardUnit.scala 48:63]
        node _T_57 = and(_T_55, _T_56) @[ForwardUnit.scala 48:44]
        node _T_58 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[ForwardUnit.scala 48:100]
        node _T_59 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[ForwardUnit.scala 48:132]
        node _T_60 = and(_T_58, _T_59) @[ForwardUnit.scala 48:112]
        node _T_61 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS1) @[ForwardUnit.scala 48:168]
        node _T_62 = and(_T_60, _T_61) @[ForwardUnit.scala 48:148]
        node _T_63 = not(_T_62) @[ForwardUnit.scala 48:81]
        node _T_64 = and(_T_57, _T_63) @[ForwardUnit.scala 48:78]
        node _T_65 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS1) @[ForwardUnit.scala 48:211]
        node _T_66 = and(_T_64, _T_65) @[ForwardUnit.scala 48:191]
        node _T_67 = neq(io.ID_EX_inst_op, UInt<6>("h037")) @[ForwardUnit.scala 48:252]
        node _T_68 = and(_T_66, _T_67) @[ForwardUnit.scala 48:232]
        when _T_68 : @[ForwardUnit.scala 48:270]
          io.forward_a <= UInt<2>("h02") @[ForwardUnit.scala 49:22]
          skip @[ForwardUnit.scala 48:270]
    
  module Alu : 
    input clock : Clock
    input reset : Reset
    output io : {flip oper_a : SInt<32>, flip oper_b : SInt<32>, flip aluCtrl : UInt<5>, output : SInt<32>}
    
    node _T = eq(io.aluCtrl, UInt<1>("h00")) @[Alu.scala 17:21]
    when _T : @[Alu.scala 17:37]
      node _T_1 = add(io.oper_a, io.oper_b) @[Alu.scala 19:32]
      node _T_2 = tail(_T_1, 1) @[Alu.scala 19:32]
      node _T_3 = asSInt(_T_2) @[Alu.scala 19:32]
      io.output <= _T_3 @[Alu.scala 19:19]
      skip @[Alu.scala 17:37]
    else : @[Alu.scala 20:44]
      node _T_4 = eq(io.aluCtrl, UInt<1>("h01")) @[Alu.scala 20:28]
      when _T_4 : @[Alu.scala 20:44]
        node _T_5 = bits(io.oper_b, 4, 0) @[Alu.scala 22:38]
        node _T_6 = dshl(io.oper_a, _T_5) @[Alu.scala 23:32]
        io.output <= _T_6 @[Alu.scala 23:19]
        skip @[Alu.scala 20:44]
      else : @[Alu.scala 24:44]
        node _T_7 = eq(io.aluCtrl, UInt<2>("h02")) @[Alu.scala 24:28]
        when _T_7 : @[Alu.scala 24:44]
          node _T_8 = lt(io.oper_a, io.oper_b) @[Alu.scala 26:24]
          when _T_8 : @[Alu.scala 26:37]
            io.output <= asSInt(UInt<2>("h01")) @[Alu.scala 27:23]
            skip @[Alu.scala 26:37]
          else : @[Alu.scala 28:22]
            io.output <= asSInt(UInt<1>("h00")) @[Alu.scala 29:23]
            skip @[Alu.scala 28:22]
          skip @[Alu.scala 24:44]
        else : @[Alu.scala 31:73]
          node _T_9 = eq(io.aluCtrl, UInt<2>("h03")) @[Alu.scala 31:28]
          node _T_10 = eq(io.aluCtrl, UInt<5>("h016")) @[Alu.scala 31:57]
          node _T_11 = or(_T_9, _T_10) @[Alu.scala 31:43]
          when _T_11 : @[Alu.scala 31:73]
            node _T_12 = asUInt(io.oper_a) @[Alu.scala 33:24]
            node _T_13 = asUInt(io.oper_b) @[Alu.scala 33:43]
            node _T_14 = lt(_T_12, _T_13) @[Alu.scala 33:31]
            when _T_14 : @[Alu.scala 33:51]
              io.output <= asSInt(UInt<2>("h01")) @[Alu.scala 34:23]
              skip @[Alu.scala 33:51]
            else : @[Alu.scala 35:22]
              io.output <= asSInt(UInt<1>("h00")) @[Alu.scala 36:23]
              skip @[Alu.scala 35:22]
            skip @[Alu.scala 31:73]
          else : @[Alu.scala 38:44]
            node _T_15 = eq(io.aluCtrl, UInt<3>("h04")) @[Alu.scala 38:28]
            when _T_15 : @[Alu.scala 38:44]
              node _T_16 = xor(io.oper_a, io.oper_b) @[Alu.scala 40:32]
              node _T_17 = asSInt(_T_16) @[Alu.scala 40:32]
              io.output <= _T_17 @[Alu.scala 40:19]
              skip @[Alu.scala 38:44]
            else : @[Alu.scala 41:73]
              node _T_18 = eq(io.aluCtrl, UInt<3>("h05")) @[Alu.scala 41:28]
              node _T_19 = eq(io.aluCtrl, UInt<4>("h0d")) @[Alu.scala 41:57]
              node _T_20 = or(_T_18, _T_19) @[Alu.scala 41:43]
              when _T_20 : @[Alu.scala 41:73]
                node _T_21 = bits(io.oper_b, 4, 0) @[Alu.scala 48:39]
                node _T_22 = dshr(io.oper_a, _T_21) @[Alu.scala 49:32]
                io.output <= _T_22 @[Alu.scala 49:19]
                skip @[Alu.scala 41:73]
              else : @[Alu.scala 50:44]
                node _T_23 = eq(io.aluCtrl, UInt<3>("h06")) @[Alu.scala 50:28]
                when _T_23 : @[Alu.scala 50:44]
                  node _T_24 = or(io.oper_a, io.oper_b) @[Alu.scala 52:32]
                  node _T_25 = asSInt(_T_24) @[Alu.scala 52:32]
                  io.output <= _T_25 @[Alu.scala 52:19]
                  skip @[Alu.scala 50:44]
                else : @[Alu.scala 53:44]
                  node _T_26 = eq(io.aluCtrl, UInt<3>("h07")) @[Alu.scala 53:28]
                  when _T_26 : @[Alu.scala 53:44]
                    node _T_27 = and(io.oper_a, io.oper_b) @[Alu.scala 55:32]
                    node _T_28 = asSInt(_T_27) @[Alu.scala 55:32]
                    io.output <= _T_28 @[Alu.scala 55:19]
                    skip @[Alu.scala 53:44]
                  else : @[Alu.scala 56:44]
                    node _T_29 = eq(io.aluCtrl, UInt<4>("h08")) @[Alu.scala 56:28]
                    when _T_29 : @[Alu.scala 56:44]
                      node _T_30 = sub(io.oper_a, io.oper_b) @[Alu.scala 58:32]
                      node _T_31 = tail(_T_30, 1) @[Alu.scala 58:32]
                      node _T_32 = asSInt(_T_31) @[Alu.scala 58:32]
                      io.output <= _T_32 @[Alu.scala 58:19]
                      skip @[Alu.scala 56:44]
                    else : @[Alu.scala 60:44]
                      node _T_33 = eq(io.aluCtrl, UInt<5>("h010")) @[Alu.scala 60:28]
                      when _T_33 : @[Alu.scala 60:44]
                        node _T_34 = eq(io.oper_a, io.oper_b) @[Alu.scala 62:24]
                        when _T_34 : @[Alu.scala 62:39]
                          io.output <= asSInt(UInt<2>("h01")) @[Alu.scala 63:23]
                          skip @[Alu.scala 62:39]
                        else : @[Alu.scala 64:22]
                          io.output <= asSInt(UInt<1>("h00")) @[Alu.scala 65:23]
                          skip @[Alu.scala 64:22]
                        skip @[Alu.scala 60:44]
                      else : @[Alu.scala 67:44]
                        node _T_35 = eq(io.aluCtrl, UInt<5>("h011")) @[Alu.scala 67:28]
                        when _T_35 : @[Alu.scala 67:44]
                          node _T_36 = eq(io.oper_a, io.oper_b) @[Alu.scala 69:26]
                          node _T_37 = not(_T_36) @[Alu.scala 69:14]
                          when _T_37 : @[Alu.scala 69:42]
                            io.output <= asSInt(UInt<2>("h01")) @[Alu.scala 70:23]
                            skip @[Alu.scala 69:42]
                          else : @[Alu.scala 71:22]
                            io.output <= asSInt(UInt<1>("h00")) @[Alu.scala 72:23]
                            skip @[Alu.scala 71:22]
                          skip @[Alu.scala 67:44]
                        else : @[Alu.scala 74:44]
                          node _T_38 = eq(io.aluCtrl, UInt<5>("h014")) @[Alu.scala 74:28]
                          when _T_38 : @[Alu.scala 74:44]
                            node _T_39 = lt(io.oper_a, io.oper_b) @[Alu.scala 76:24]
                            when _T_39 : @[Alu.scala 76:37]
                              io.output <= asSInt(UInt<2>("h01")) @[Alu.scala 77:23]
                              skip @[Alu.scala 76:37]
                            else : @[Alu.scala 78:22]
                              io.output <= asSInt(UInt<1>("h00")) @[Alu.scala 79:23]
                              skip @[Alu.scala 78:22]
                            skip @[Alu.scala 74:44]
                          else : @[Alu.scala 81:44]
                            node _T_40 = eq(io.aluCtrl, UInt<5>("h015")) @[Alu.scala 81:28]
                            when _T_40 : @[Alu.scala 81:44]
                              node _T_41 = geq(io.oper_a, io.oper_b) @[Alu.scala 83:24]
                              when _T_41 : @[Alu.scala 83:38]
                                io.output <= asSInt(UInt<2>("h01")) @[Alu.scala 84:23]
                                skip @[Alu.scala 83:38]
                              else : @[Alu.scala 85:22]
                                io.output <= asSInt(UInt<1>("h00")) @[Alu.scala 86:23]
                                skip @[Alu.scala 85:22]
                              skip @[Alu.scala 81:44]
                            else : @[Alu.scala 88:44]
                              node _T_42 = eq(io.aluCtrl, UInt<5>("h017")) @[Alu.scala 88:28]
                              when _T_42 : @[Alu.scala 88:44]
                                node _T_43 = asUInt(io.oper_a) @[Alu.scala 90:24]
                                node _T_44 = asUInt(io.oper_b) @[Alu.scala 90:44]
                                node _T_45 = geq(_T_43, _T_44) @[Alu.scala 90:31]
                                when _T_45 : @[Alu.scala 90:52]
                                  io.output <= asSInt(UInt<2>("h01")) @[Alu.scala 91:23]
                                  skip @[Alu.scala 90:52]
                                else : @[Alu.scala 92:22]
                                  io.output <= asSInt(UInt<1>("h00")) @[Alu.scala 93:23]
                                  skip @[Alu.scala 92:22]
                                skip @[Alu.scala 88:44]
                              else : @[Alu.scala 95:44]
                                node _T_46 = eq(io.aluCtrl, UInt<5>("h01f")) @[Alu.scala 95:28]
                                when _T_46 : @[Alu.scala 95:44]
                                  io.output <= io.oper_a @[Alu.scala 97:19]
                                  skip @[Alu.scala 95:44]
                                else : @[Alu.scala 100:5]
                                  node _T_47 = eq(io.aluCtrl, UInt<4>("h0b")) @[Alu.scala 99:26]
                                  when _T_47 : @[Alu.scala 100:5]
                                    io.output <= io.oper_b @[Alu.scala 101:19]
                                    skip @[Alu.scala 100:5]
                                  else : @[Alu.scala 105:5]
                                    node _T_48 = eq(io.aluCtrl, UInt<5>("h01e")) @[Alu.scala 104:26]
                                    when _T_48 : @[Alu.scala 105:5]
                                      node _T_49 = mul(io.oper_a, io.oper_b) @[Alu.scala 106:32]
                                      io.output <= _T_49 @[Alu.scala 106:19]
                                      skip @[Alu.scala 105:5]
                                    else : @[Alu.scala 109:5]
                                      node _T_50 = eq(io.aluCtrl, UInt<5>("h01d")) @[Alu.scala 108:26]
                                      when _T_50 : @[Alu.scala 109:5]
                                        node _T_51 = div(io.oper_a, io.oper_b) @[Alu.scala 110:32]
                                        io.output <= _T_51 @[Alu.scala 110:19]
                                        skip @[Alu.scala 109:5]
                                      else : @[Alu.scala 113:5]
                                        node _T_52 = eq(io.aluCtrl, UInt<5>("h01b")) @[Alu.scala 112:26]
                                        when _T_52 : @[Alu.scala 113:5]
                                          node _T_53 = asUInt(io.oper_a) @[Alu.scala 114:34]
                                          node _T_54 = asUInt(io.oper_b) @[Alu.scala 114:55]
                                          node _T_55 = div(_T_53, _T_54) @[Alu.scala 114:42]
                                          node _T_56 = asSInt(_T_55) @[Alu.scala 114:64]
                                          io.output <= _T_56 @[Alu.scala 114:19]
                                          skip @[Alu.scala 113:5]
                                        else : @[Alu.scala 117:5]
                                          node _T_57 = eq(io.aluCtrl, UInt<5>("h01a")) @[Alu.scala 116:26]
                                          when _T_57 : @[Alu.scala 117:5]
                                            node _T_58 = rem(io.oper_a, io.oper_b) @[Alu.scala 118:32]
                                            io.output <= _T_58 @[Alu.scala 118:19]
                                            skip @[Alu.scala 117:5]
                                          else : @[Alu.scala 121:5]
                                            node _T_59 = eq(io.aluCtrl, UInt<5>("h019")) @[Alu.scala 120:26]
                                            when _T_59 : @[Alu.scala 121:5]
                                              node _T_60 = asUInt(io.oper_a) @[Alu.scala 122:34]
                                              node _T_61 = asUInt(io.oper_b) @[Alu.scala 122:55]
                                              node _T_62 = rem(_T_60, _T_61) @[Alu.scala 122:42]
                                              node _T_63 = asSInt(_T_62) @[Alu.scala 122:64]
                                              io.output <= _T_63 @[Alu.scala 122:19]
                                              skip @[Alu.scala 121:5]
                                            else : @[Alu.scala 125:5]
                                              node _T_64 = eq(io.aluCtrl, UInt<5>("h018")) @[Alu.scala 124:26]
                                              when _T_64 : @[Alu.scala 125:5]
                                                node _T_65 = mul(io.oper_a, io.oper_b) @[Alu.scala 126:47]
                                                node _T_66 = bits(_T_65, 63, 32) @[Alu.scala 127:43]
                                                node _T_67 = asSInt(_T_66) @[Alu.scala 127:51]
                                                io.output <= _T_67 @[Alu.scala 127:19]
                                                skip @[Alu.scala 125:5]
                                              else : @[Alu.scala 130:5]
                                                node _T_68 = eq(io.aluCtrl, UInt<5>("h013")) @[Alu.scala 129:26]
                                                when _T_68 : @[Alu.scala 130:5]
                                                  node _T_69 = asUInt(io.oper_b) @[Alu.scala 131:61]
                                                  node _T_70 = cvt(_T_69) @[Alu.scala 131:49]
                                                  node _T_71 = mul(io.oper_a, _T_70) @[Alu.scala 131:49]
                                                  node _T_72 = tail(_T_71, 1) @[Alu.scala 131:49]
                                                  node _T_73 = asSInt(_T_72) @[Alu.scala 131:49]
                                                  node _T_74 = bits(_T_73, 63, 32) @[Alu.scala 132:45]
                                                  node _T_75 = asSInt(_T_74) @[Alu.scala 132:53]
                                                  io.output <= _T_75 @[Alu.scala 132:19]
                                                  skip @[Alu.scala 130:5]
                                                else : @[Alu.scala 135:5]
                                                  node _T_76 = eq(io.aluCtrl, UInt<5>("h012")) @[Alu.scala 134:26]
                                                  when _T_76 : @[Alu.scala 135:5]
                                                    node _T_77 = asUInt(io.oper_a) @[Alu.scala 136:48]
                                                    node _T_78 = asUInt(io.oper_b) @[Alu.scala 136:67]
                                                    node _T_79 = mul(_T_77, _T_78) @[Alu.scala 136:55]
                                                    node _T_80 = bits(_T_79, 63, 32) @[Alu.scala 137:44]
                                                    node _T_81 = asSInt(_T_80) @[Alu.scala 137:52]
                                                    io.output <= _T_81 @[Alu.scala 137:19]
                                                    skip @[Alu.scala 135:5]
                                                  else : @[Alu.scala 139:16]
                                                    io.output is invalid @[Alu.scala 140:19]
                                                    skip @[Alu.scala 139:16]
    
  module AluControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluOp : UInt<4>, flip func7 : UInt<7>, flip func3 : UInt<3>, output : UInt<5>}
    
    node _T = eq(io.func3, UInt<1>("h00")) @[ALU_operations_Sel.scala 37:35]
    node _T_1 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 37:57]
    node _T_2 = and(_T, _T_1) @[ALU_operations_Sel.scala 37:49]
    node _T_3 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 37:80]
    node _T_4 = and(_T_2, _T_3) @[ALU_operations_Sel.scala 37:71]
    node _T_5 = eq(io.func3, UInt<1>("h00")) @[ALU_operations_Sel.scala 12:35]
    node _T_6 = eq(io.aluOp, UInt<1>("h01")) @[ALU_operations_Sel.scala 12:57]
    node _T_7 = and(_T_5, _T_6) @[ALU_operations_Sel.scala 12:49]
    node _T_8 = or(_T_4, _T_7) @[AluControl.scala 19:20]
    node _T_9 = eq(io.func3, UInt<2>("h02")) @[ALU_operations_Sel.scala 33:35]
    node _T_10 = eq(io.aluOp, UInt<3>("h05")) @[ALU_operations_Sel.scala 33:57]
    node _T_11 = and(_T_9, _T_10) @[ALU_operations_Sel.scala 33:49]
    node _T_12 = or(_T_8, _T_11) @[AluControl.scala 19:34]
    node _T_13 = eq(io.func3, UInt<1>("h00")) @[ALU_operations_Sel.scala 31:35]
    node _T_14 = eq(io.aluOp, UInt<3>("h05")) @[ALU_operations_Sel.scala 31:57]
    node _T_15 = and(_T_13, _T_14) @[ALU_operations_Sel.scala 31:49]
    node _T_16 = or(_T_12, _T_15) @[AluControl.scala 19:46]
    node _T_17 = eq(io.func3, UInt<1>("h01")) @[ALU_operations_Sel.scala 32:35]
    node _T_18 = eq(io.aluOp, UInt<3>("h05")) @[ALU_operations_Sel.scala 32:57]
    node _T_19 = and(_T_17, _T_18) @[ALU_operations_Sel.scala 32:49]
    node _T_20 = or(_T_16, _T_19) @[AluControl.scala 19:58]
    node _T_21 = eq(io.func3, UInt<2>("h02")) @[ALU_operations_Sel.scala 27:35]
    node _T_22 = eq(io.aluOp, UInt<3>("h04")) @[ALU_operations_Sel.scala 27:57]
    node _T_23 = and(_T_21, _T_22) @[ALU_operations_Sel.scala 27:49]
    node _T_24 = or(_T_20, _T_23) @[AluControl.scala 19:70]
    node _T_25 = eq(io.func3, UInt<1>("h00")) @[ALU_operations_Sel.scala 25:35]
    node _T_26 = eq(io.aluOp, UInt<3>("h04")) @[ALU_operations_Sel.scala 25:57]
    node _T_27 = and(_T_25, _T_26) @[ALU_operations_Sel.scala 25:49]
    node _T_28 = or(_T_24, _T_27) @[AluControl.scala 19:82]
    node _T_29 = eq(io.func3, UInt<1>("h01")) @[ALU_operations_Sel.scala 26:35]
    node _T_30 = eq(io.aluOp, UInt<3>("h04")) @[ALU_operations_Sel.scala 26:57]
    node _T_31 = and(_T_29, _T_30) @[ALU_operations_Sel.scala 26:49]
    node _T_32 = or(_T_28, _T_31) @[AluControl.scala 19:94]
    node _T_33 = eq(io.func3, UInt<3>("h04")) @[ALU_operations_Sel.scala 28:35]
    node _T_34 = eq(io.aluOp, UInt<3>("h04")) @[ALU_operations_Sel.scala 28:57]
    node _T_35 = and(_T_33, _T_34) @[ALU_operations_Sel.scala 28:49]
    node _T_36 = or(_T_32, _T_35) @[AluControl.scala 19:106]
    node _T_37 = eq(io.func3, UInt<3>("h05")) @[ALU_operations_Sel.scala 29:35]
    node _T_38 = eq(io.aluOp, UInt<3>("h04")) @[ALU_operations_Sel.scala 29:57]
    node _T_39 = and(_T_37, _T_38) @[ALU_operations_Sel.scala 29:49]
    node _T_40 = or(_T_36, _T_39) @[AluControl.scala 19:119]
    node _T_41 = eq(io.func3, UInt<3>("h06")) @[ALU_operations_Sel.scala 30:35]
    node _T_42 = eq(io.aluOp, UInt<3>("h04")) @[ALU_operations_Sel.scala 30:57]
    node _T_43 = and(_T_41, _T_42) @[ALU_operations_Sel.scala 30:49]
    node _T_44 = or(_T_40, _T_43) @[AluControl.scala 19:132]
    node _T_45 = eq(io.aluOp, UInt<3>("h06")) @[ALU_operations_Sel.scala 10:35]
    node _T_46 = or(_T_44, _T_45) @[AluControl.scala 19:145]
    node _T_47 = eq(io.aluOp, UInt<3>("h07")) @[ALU_operations_Sel.scala 11:35]
    node _T_48 = or(_T_46, _T_47) @[AluControl.scala 19:158]
    when _T_48 : @[AluControl.scala 20:5]
      io.output <= UInt<1>("h00") @[AluControl.scala 20:17]
      skip @[AluControl.scala 20:5]
    else : @[AluControl.scala 21:40]
      node _T_49 = eq(io.func3, UInt<1>("h01")) @[ALU_operations_Sel.scala 39:35]
      node _T_50 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 39:57]
      node _T_51 = and(_T_49, _T_50) @[ALU_operations_Sel.scala 39:49]
      node _T_52 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 39:80]
      node _T_53 = and(_T_51, _T_52) @[ALU_operations_Sel.scala 39:71]
      node _T_54 = eq(io.func3, UInt<1>("h01")) @[ALU_operations_Sel.scala 34:35]
      node _T_55 = eq(io.aluOp, UInt<1>("h01")) @[ALU_operations_Sel.scala 34:57]
      node _T_56 = and(_T_54, _T_55) @[ALU_operations_Sel.scala 34:49]
      node _T_57 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 34:80]
      node _T_58 = and(_T_56, _T_57) @[ALU_operations_Sel.scala 34:71]
      node _T_59 = or(_T_53, _T_58) @[AluControl.scala 21:25]
      when _T_59 : @[AluControl.scala 21:40]
        io.output <= UInt<1>("h01") @[AluControl.scala 21:52]
        skip @[AluControl.scala 21:40]
      else : @[AluControl.scala 22:40]
        node _T_60 = eq(io.func3, UInt<2>("h02")) @[ALU_operations_Sel.scala 40:35]
        node _T_61 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 40:57]
        node _T_62 = and(_T_60, _T_61) @[ALU_operations_Sel.scala 40:49]
        node _T_63 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 40:80]
        node _T_64 = and(_T_62, _T_63) @[ALU_operations_Sel.scala 40:71]
        node _T_65 = eq(io.func3, UInt<2>("h02")) @[ALU_operations_Sel.scala 13:35]
        node _T_66 = eq(io.aluOp, UInt<1>("h01")) @[ALU_operations_Sel.scala 13:57]
        node _T_67 = and(_T_65, _T_66) @[ALU_operations_Sel.scala 13:49]
        node _T_68 = or(_T_64, _T_67) @[AluControl.scala 22:25]
        when _T_68 : @[AluControl.scala 22:40]
          io.output <= UInt<2>("h02") @[AluControl.scala 22:52]
          skip @[AluControl.scala 22:40]
        else : @[AluControl.scala 23:55]
          node _T_69 = eq(io.func3, UInt<2>("h03")) @[ALU_operations_Sel.scala 41:35]
          node _T_70 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 41:57]
          node _T_71 = and(_T_69, _T_70) @[ALU_operations_Sel.scala 41:49]
          node _T_72 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 41:80]
          node _T_73 = and(_T_71, _T_72) @[ALU_operations_Sel.scala 41:71]
          node _T_74 = eq(io.func3, UInt<2>("h03")) @[ALU_operations_Sel.scala 14:35]
          node _T_75 = eq(io.aluOp, UInt<1>("h01")) @[ALU_operations_Sel.scala 14:57]
          node _T_76 = and(_T_74, _T_75) @[ALU_operations_Sel.scala 14:49]
          node _T_77 = or(_T_73, _T_76) @[AluControl.scala 23:25]
          node _T_78 = eq(io.func3, UInt<3>("h06")) @[ALU_operations_Sel.scala 22:35]
          node _T_79 = eq(io.aluOp, UInt<2>("h02")) @[ALU_operations_Sel.scala 22:57]
          node _T_80 = and(_T_78, _T_79) @[ALU_operations_Sel.scala 22:49]
          node _T_81 = or(_T_77, _T_80) @[AluControl.scala 23:40]
          when _T_81 : @[AluControl.scala 23:55]
            io.output <= UInt<2>("h03") @[AluControl.scala 23:67]
            skip @[AluControl.scala 23:55]
          else : @[AluControl.scala 24:40]
            node _T_82 = eq(io.func3, UInt<3>("h04")) @[ALU_operations_Sel.scala 42:35]
            node _T_83 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 42:57]
            node _T_84 = and(_T_82, _T_83) @[ALU_operations_Sel.scala 42:49]
            node _T_85 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 42:80]
            node _T_86 = and(_T_84, _T_85) @[ALU_operations_Sel.scala 42:71]
            node _T_87 = eq(io.func3, UInt<3>("h04")) @[ALU_operations_Sel.scala 15:35]
            node _T_88 = eq(io.aluOp, UInt<1>("h01")) @[ALU_operations_Sel.scala 15:57]
            node _T_89 = and(_T_87, _T_88) @[ALU_operations_Sel.scala 15:49]
            node _T_90 = or(_T_86, _T_89) @[AluControl.scala 24:25]
            when _T_90 : @[AluControl.scala 24:40]
              io.output <= UInt<3>("h04") @[AluControl.scala 24:52]
              skip @[AluControl.scala 24:40]
            else : @[AluControl.scala 25:67]
              node _T_91 = eq(io.func3, UInt<3>("h05")) @[ALU_operations_Sel.scala 43:35]
              node _T_92 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 43:57]
              node _T_93 = and(_T_91, _T_92) @[ALU_operations_Sel.scala 43:49]
              node _T_94 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 43:80]
              node _T_95 = and(_T_93, _T_94) @[ALU_operations_Sel.scala 43:71]
              node _T_96 = eq(io.func3, UInt<3>("h05")) @[ALU_operations_Sel.scala 35:35]
              node _T_97 = eq(io.aluOp, UInt<1>("h01")) @[ALU_operations_Sel.scala 35:57]
              node _T_98 = and(_T_96, _T_97) @[ALU_operations_Sel.scala 35:49]
              node _T_99 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 35:80]
              node _T_100 = and(_T_98, _T_99) @[ALU_operations_Sel.scala 35:71]
              node _T_101 = or(_T_95, _T_100) @[AluControl.scala 25:25]
              node _T_102 = eq(io.func3, UInt<3>("h05")) @[ALU_operations_Sel.scala 44:35]
              node _T_103 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 44:57]
              node _T_104 = and(_T_102, _T_103) @[ALU_operations_Sel.scala 44:49]
              node _T_105 = eq(io.func7, UInt<6>("h020")) @[ALU_operations_Sel.scala 44:80]
              node _T_106 = and(_T_104, _T_105) @[ALU_operations_Sel.scala 44:71]
              node _T_107 = or(_T_101, _T_106) @[AluControl.scala 25:39]
              node _T_108 = eq(io.func3, UInt<3>("h05")) @[ALU_operations_Sel.scala 36:35]
              node _T_109 = eq(io.aluOp, UInt<1>("h01")) @[ALU_operations_Sel.scala 36:57]
              node _T_110 = and(_T_108, _T_109) @[ALU_operations_Sel.scala 36:49]
              node _T_111 = eq(io.func7, UInt<6>("h020")) @[ALU_operations_Sel.scala 36:80]
              node _T_112 = and(_T_110, _T_111) @[ALU_operations_Sel.scala 36:71]
              node _T_113 = or(_T_107, _T_112) @[AluControl.scala 25:52]
              when _T_113 : @[AluControl.scala 25:67]
                io.output <= UInt<3>("h05") @[AluControl.scala 25:79]
                skip @[AluControl.scala 25:67]
              else : @[AluControl.scala 26:40]
                node _T_114 = eq(io.func3, UInt<3>("h06")) @[ALU_operations_Sel.scala 45:35]
                node _T_115 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 45:57]
                node _T_116 = and(_T_114, _T_115) @[ALU_operations_Sel.scala 45:49]
                node _T_117 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 45:80]
                node _T_118 = and(_T_116, _T_117) @[ALU_operations_Sel.scala 45:71]
                node _T_119 = eq(io.func3, UInt<3>("h06")) @[ALU_operations_Sel.scala 16:35]
                node _T_120 = eq(io.aluOp, UInt<1>("h01")) @[ALU_operations_Sel.scala 16:57]
                node _T_121 = and(_T_119, _T_120) @[ALU_operations_Sel.scala 16:49]
                node _T_122 = or(_T_118, _T_121) @[AluControl.scala 26:25]
                when _T_122 : @[AluControl.scala 26:40]
                  io.output <= UInt<3>("h06") @[AluControl.scala 26:52]
                  skip @[AluControl.scala 26:40]
                else : @[AluControl.scala 27:40]
                  node _T_123 = eq(io.func3, UInt<3>("h07")) @[ALU_operations_Sel.scala 46:35]
                  node _T_124 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 46:57]
                  node _T_125 = and(_T_123, _T_124) @[ALU_operations_Sel.scala 46:49]
                  node _T_126 = eq(io.func7, UInt<1>("h00")) @[ALU_operations_Sel.scala 46:80]
                  node _T_127 = and(_T_125, _T_126) @[ALU_operations_Sel.scala 46:71]
                  node _T_128 = eq(io.func3, UInt<3>("h07")) @[ALU_operations_Sel.scala 17:35]
                  node _T_129 = eq(io.aluOp, UInt<1>("h01")) @[ALU_operations_Sel.scala 17:57]
                  node _T_130 = and(_T_128, _T_129) @[ALU_operations_Sel.scala 17:49]
                  node _T_131 = or(_T_127, _T_130) @[AluControl.scala 27:25]
                  when _T_131 : @[AluControl.scala 27:40]
                    io.output <= UInt<3>("h07") @[AluControl.scala 27:52]
                    skip @[AluControl.scala 27:40]
                  else : @[AluControl.scala 28:26]
                    node _T_132 = eq(io.func3, UInt<1>("h00")) @[ALU_operations_Sel.scala 38:35]
                    node _T_133 = eq(io.aluOp, UInt<1>("h00")) @[ALU_operations_Sel.scala 38:57]
                    node _T_134 = and(_T_132, _T_133) @[ALU_operations_Sel.scala 38:49]
                    node _T_135 = eq(io.func7, UInt<6>("h020")) @[ALU_operations_Sel.scala 38:80]
                    node _T_136 = and(_T_134, _T_135) @[ALU_operations_Sel.scala 38:71]
                    when _T_136 : @[AluControl.scala 28:26]
                      io.output <= UInt<4>("h08") @[AluControl.scala 28:38]
                      skip @[AluControl.scala 28:26]
                    else : @[AluControl.scala 29:26]
                      node _T_137 = eq(io.func3, UInt<1>("h00")) @[ALU_operations_Sel.scala 18:35]
                      node _T_138 = eq(io.aluOp, UInt<2>("h02")) @[ALU_operations_Sel.scala 18:57]
                      node _T_139 = and(_T_137, _T_138) @[ALU_operations_Sel.scala 18:49]
                      when _T_139 : @[AluControl.scala 29:26]
                        io.output <= UInt<5>("h010") @[AluControl.scala 29:38]
                        skip @[AluControl.scala 29:26]
                      else : @[AluControl.scala 30:26]
                        node _T_140 = eq(io.func3, UInt<1>("h01")) @[ALU_operations_Sel.scala 19:35]
                        node _T_141 = eq(io.aluOp, UInt<2>("h02")) @[ALU_operations_Sel.scala 19:57]
                        node _T_142 = and(_T_140, _T_141) @[ALU_operations_Sel.scala 19:49]
                        when _T_142 : @[AluControl.scala 30:26]
                          io.output <= UInt<5>("h011") @[AluControl.scala 30:38]
                          skip @[AluControl.scala 30:26]
                        else : @[AluControl.scala 31:26]
                          node _T_143 = eq(io.func3, UInt<3>("h04")) @[ALU_operations_Sel.scala 20:35]
                          node _T_144 = eq(io.aluOp, UInt<2>("h02")) @[ALU_operations_Sel.scala 20:57]
                          node _T_145 = and(_T_143, _T_144) @[ALU_operations_Sel.scala 20:49]
                          when _T_145 : @[AluControl.scala 31:26]
                            io.output <= UInt<5>("h014") @[AluControl.scala 31:38]
                            skip @[AluControl.scala 31:26]
                          else : @[AluControl.scala 32:26]
                            node _T_146 = eq(io.func3, UInt<3>("h05")) @[ALU_operations_Sel.scala 21:35]
                            node _T_147 = eq(io.aluOp, UInt<2>("h02")) @[ALU_operations_Sel.scala 21:57]
                            node _T_148 = and(_T_146, _T_147) @[ALU_operations_Sel.scala 21:49]
                            when _T_148 : @[AluControl.scala 32:26]
                              io.output <= UInt<5>("h015") @[AluControl.scala 32:38]
                              skip @[AluControl.scala 32:26]
                            else : @[AluControl.scala 33:26]
                              node _T_149 = eq(io.func3, UInt<3>("h07")) @[ALU_operations_Sel.scala 23:35]
                              node _T_150 = eq(io.aluOp, UInt<2>("h02")) @[ALU_operations_Sel.scala 23:57]
                              node _T_151 = and(_T_149, _T_150) @[ALU_operations_Sel.scala 23:49]
                              when _T_151 : @[AluControl.scala 33:26]
                                io.output <= UInt<5>("h017") @[AluControl.scala 33:38]
                                skip @[AluControl.scala 33:26]
                              else : @[AluControl.scala 34:133]
                                node _T_152 = eq(io.aluOp, UInt<2>("h03")) @[ALU_operations_Sel.scala 9:35]
                                node _T_153 = eq(io.func3, UInt<1>("h00")) @[ALU_operations_Sel.scala 24:35]
                                node _T_154 = eq(io.aluOp, UInt<2>("h03")) @[ALU_operations_Sel.scala 24:57]
                                node _T_155 = and(_T_153, _T_154) @[ALU_operations_Sel.scala 24:49]
                                node _T_156 = or(_T_152, _T_155) @[AluControl.scala 34:25]
                                node _T_157 = eq(io.func3, UInt<1>("h01")) @[ALU_operations_Sel.scala 55:35]
                                node _T_158 = eq(io.aluOp, UInt<4>("h08")) @[ALU_operations_Sel.scala 55:57]
                                node _T_159 = and(_T_157, _T_158) @[ALU_operations_Sel.scala 55:49]
                                node _T_160 = or(_T_156, _T_159) @[AluControl.scala 34:39]
                                node _T_161 = eq(io.func3, UInt<2>("h02")) @[ALU_operations_Sel.scala 56:35]
                                node _T_162 = eq(io.aluOp, UInt<4>("h08")) @[ALU_operations_Sel.scala 56:57]
                                node _T_163 = and(_T_161, _T_162) @[ALU_operations_Sel.scala 56:49]
                                node _T_164 = or(_T_160, _T_163) @[AluControl.scala 34:54]
                                node _T_165 = eq(io.func3, UInt<2>("h03")) @[ALU_operations_Sel.scala 57:35]
                                node _T_166 = eq(io.aluOp, UInt<4>("h08")) @[ALU_operations_Sel.scala 57:57]
                                node _T_167 = and(_T_165, _T_166) @[ALU_operations_Sel.scala 57:49]
                                node _T_168 = or(_T_164, _T_167) @[AluControl.scala 34:69]
                                node _T_169 = eq(io.func3, UInt<3>("h05")) @[ALU_operations_Sel.scala 58:35]
                                node _T_170 = eq(io.aluOp, UInt<4>("h08")) @[ALU_operations_Sel.scala 58:57]
                                node _T_171 = and(_T_169, _T_170) @[ALU_operations_Sel.scala 58:49]
                                node _T_172 = or(_T_168, _T_171) @[AluControl.scala 34:84]
                                node _T_173 = eq(io.func3, UInt<3>("h06")) @[ALU_operations_Sel.scala 59:35]
                                node _T_174 = eq(io.aluOp, UInt<4>("h08")) @[ALU_operations_Sel.scala 59:57]
                                node _T_175 = and(_T_173, _T_174) @[ALU_operations_Sel.scala 59:49]
                                node _T_176 = or(_T_172, _T_175) @[AluControl.scala 34:100]
                                node _T_177 = eq(io.func3, UInt<3>("h07")) @[ALU_operations_Sel.scala 60:35]
                                node _T_178 = eq(io.aluOp, UInt<4>("h08")) @[ALU_operations_Sel.scala 60:57]
                                node _T_179 = and(_T_177, _T_178) @[ALU_operations_Sel.scala 60:49]
                                node _T_180 = or(_T_176, _T_179) @[AluControl.scala 34:116]
                                when _T_180 : @[AluControl.scala 34:133]
                                  io.output <= UInt<5>("h01f") @[AluControl.scala 34:145]
                                  skip @[AluControl.scala 34:133]
                                else : @[AluControl.scala 35:26]
                                  node _T_181 = eq(io.func3, UInt<1>("h00")) @[ALU_operations_Sel.scala 47:35]
                                  node _T_182 = eq(io.aluOp, UInt<4>("h09")) @[ALU_operations_Sel.scala 47:57]
                                  node _T_183 = and(_T_181, _T_182) @[ALU_operations_Sel.scala 47:49]
                                  node _T_184 = eq(io.func7, UInt<1>("h01")) @[ALU_operations_Sel.scala 47:80]
                                  node _T_185 = and(_T_183, _T_184) @[ALU_operations_Sel.scala 47:71]
                                  when _T_185 : @[AluControl.scala 35:26]
                                    io.output <= UInt<5>("h01e") @[AluControl.scala 35:38]
                                    skip @[AluControl.scala 35:26]
                                  else : @[AluControl.scala 36:26]
                                    node _T_186 = eq(io.func3, UInt<3>("h04")) @[ALU_operations_Sel.scala 51:35]
                                    node _T_187 = eq(io.aluOp, UInt<4>("h09")) @[ALU_operations_Sel.scala 51:57]
                                    node _T_188 = and(_T_186, _T_187) @[ALU_operations_Sel.scala 51:49]
                                    node _T_189 = eq(io.func7, UInt<1>("h01")) @[ALU_operations_Sel.scala 51:80]
                                    node _T_190 = and(_T_188, _T_189) @[ALU_operations_Sel.scala 51:71]
                                    when _T_190 : @[AluControl.scala 36:26]
                                      io.output <= UInt<5>("h01d") @[AluControl.scala 36:38]
                                      skip @[AluControl.scala 36:26]
                                    else : @[AluControl.scala 37:26]
                                      node _T_191 = eq(io.func3, UInt<3>("h05")) @[ALU_operations_Sel.scala 52:35]
                                      node _T_192 = eq(io.aluOp, UInt<4>("h09")) @[ALU_operations_Sel.scala 52:57]
                                      node _T_193 = and(_T_191, _T_192) @[ALU_operations_Sel.scala 52:49]
                                      node _T_194 = eq(io.func7, UInt<1>("h01")) @[ALU_operations_Sel.scala 52:80]
                                      node _T_195 = and(_T_193, _T_194) @[ALU_operations_Sel.scala 52:71]
                                      when _T_195 : @[AluControl.scala 37:26]
                                        io.output <= UInt<5>("h01b") @[AluControl.scala 37:38]
                                        skip @[AluControl.scala 37:26]
                                      else : @[AluControl.scala 38:26]
                                        node _T_196 = eq(io.func3, UInt<3>("h06")) @[ALU_operations_Sel.scala 53:35]
                                        node _T_197 = eq(io.aluOp, UInt<4>("h09")) @[ALU_operations_Sel.scala 53:57]
                                        node _T_198 = and(_T_196, _T_197) @[ALU_operations_Sel.scala 53:49]
                                        node _T_199 = eq(io.func7, UInt<1>("h01")) @[ALU_operations_Sel.scala 53:80]
                                        node _T_200 = and(_T_198, _T_199) @[ALU_operations_Sel.scala 53:71]
                                        when _T_200 : @[AluControl.scala 38:26]
                                          io.output <= UInt<5>("h01a") @[AluControl.scala 38:38]
                                          skip @[AluControl.scala 38:26]
                                        else : @[AluControl.scala 39:26]
                                          node _T_201 = eq(io.func3, UInt<3>("h07")) @[ALU_operations_Sel.scala 54:35]
                                          node _T_202 = eq(io.aluOp, UInt<4>("h09")) @[ALU_operations_Sel.scala 54:57]
                                          node _T_203 = and(_T_201, _T_202) @[ALU_operations_Sel.scala 54:49]
                                          node _T_204 = eq(io.func7, UInt<1>("h01")) @[ALU_operations_Sel.scala 54:80]
                                          node _T_205 = and(_T_203, _T_204) @[ALU_operations_Sel.scala 54:71]
                                          when _T_205 : @[AluControl.scala 39:26]
                                            io.output <= UInt<5>("h019") @[AluControl.scala 39:38]
                                            skip @[AluControl.scala 39:26]
                                          else : @[AluControl.scala 40:26]
                                            node _T_206 = eq(io.func3, UInt<1>("h01")) @[ALU_operations_Sel.scala 48:35]
                                            node _T_207 = eq(io.aluOp, UInt<4>("h09")) @[ALU_operations_Sel.scala 48:57]
                                            node _T_208 = and(_T_206, _T_207) @[ALU_operations_Sel.scala 48:49]
                                            node _T_209 = eq(io.func7, UInt<1>("h01")) @[ALU_operations_Sel.scala 48:80]
                                            node _T_210 = and(_T_208, _T_209) @[ALU_operations_Sel.scala 48:71]
                                            when _T_210 : @[AluControl.scala 40:26]
                                              io.output <= UInt<5>("h018") @[AluControl.scala 40:38]
                                              skip @[AluControl.scala 40:26]
                                            else : @[AluControl.scala 41:29]
                                              node _T_211 = eq(io.func3, UInt<2>("h02")) @[ALU_operations_Sel.scala 49:35]
                                              node _T_212 = eq(io.aluOp, UInt<4>("h09")) @[ALU_operations_Sel.scala 49:57]
                                              node _T_213 = and(_T_211, _T_212) @[ALU_operations_Sel.scala 49:49]
                                              node _T_214 = eq(io.func7, UInt<1>("h01")) @[ALU_operations_Sel.scala 49:80]
                                              node _T_215 = and(_T_213, _T_214) @[ALU_operations_Sel.scala 49:71]
                                              when _T_215 : @[AluControl.scala 41:29]
                                                io.output <= UInt<5>("h013") @[AluControl.scala 41:41]
                                                skip @[AluControl.scala 41:29]
                                              else : @[AluControl.scala 42:28]
                                                node _T_216 = eq(io.func3, UInt<2>("h03")) @[ALU_operations_Sel.scala 50:35]
                                                node _T_217 = eq(io.aluOp, UInt<4>("h09")) @[ALU_operations_Sel.scala 50:57]
                                                node _T_218 = and(_T_216, _T_217) @[ALU_operations_Sel.scala 50:49]
                                                node _T_219 = eq(io.func7, UInt<1>("h01")) @[ALU_operations_Sel.scala 50:80]
                                                node _T_220 = and(_T_218, _T_219) @[ALU_operations_Sel.scala 50:71]
                                                when _T_220 : @[AluControl.scala 42:28]
                                                  io.output <= UInt<5>("h012") @[AluControl.scala 42:40]
                                                  skip @[AluControl.scala 42:28]
                                                else : @[AluControl.scala 43:16]
                                                  io.output is invalid @[AluControl.scala 43:28]
                                                  skip @[AluControl.scala 43:16]
    
  module Execute : 
    input clock : Clock
    input reset : Reset
    output io : {flip EX_MEM_rd_sel : UInt<5>, flip MEM_WB_rd_sel : UInt<5>, flip ID_EX_rs1_sel : UInt<5>, flip ID_EX_rs2_sel : UInt<5>, flip EX_MEM_ctrl_RegWr : UInt<1>, flip MEM_WB_ctrl_RegWr : UInt<1>, flip ID_EX_ctrl_OpA_sel : UInt<2>, flip ID_EX_ctrl_OpB_sel : UInt<1>, flip ID_EX_pc4 : SInt<32>, flip ID_EX_pc_out : SInt<32>, flip ID_EX_rs1 : SInt<32>, flip ID_EX_rs2 : SInt<32>, flip ID_EX_csr_data : UInt<32>, flip EX_MEM_alu_output : SInt<32>, flip writeback_write_data : SInt<32>, flip ID_EX_imm : SInt<32>, flip ID_EX_ctrl_AluOp : UInt<4>, flip ID_EX_func7 : UInt<7>, flip ID_EX_inst_op : UInt<7>, flip ID_EX_func3 : UInt<3>, flip ID_EX_rd_sel : UInt<5>, flip ID_EX_ctrl_MemWr : UInt<1>, flip ID_EX_ctrl_MemRd : UInt<1>, flip ID_EX_ctrl_RegWr : UInt<1>, flip ID_EX_ctrl_CsrWen : UInt<1>, flip ID_EX_ctrl_MemToReg : UInt<1>, rs2_out : SInt<32>, alu_output : SInt<32>, rd_sel_out : UInt<5>, rs2_sel_out : UInt<5>, ctrl_MemWr_out : UInt<1>, ctrl_MemRd_out : UInt<1>, ctrl_RegWr_out : UInt<1>, ctrl_CsrWe_out : UInt<1>, ctrl_MemToReg_out : UInt<1>, func3_out : UInt<3>, csr_addr_out : SInt<32>, csr_data_o : UInt<32>}
    
    inst forwardUnit of ForwardUnit @[Execute.scala 53:27]
    forwardUnit.clock <= clock
    forwardUnit.reset <= reset
    inst alu of Alu @[Execute.scala 54:19]
    alu.clock <= clock
    alu.reset <= reset
    inst alu_control of AluControl @[Execute.scala 55:27]
    alu_control.clock <= clock
    alu_control.reset <= reset
    forwardUnit.io.ID_EX_inst_op <= io.ID_EX_inst_op @[Execute.scala 58:32]
    forwardUnit.io.EX_MEM_REGRD <= io.EX_MEM_rd_sel @[Execute.scala 59:31]
    forwardUnit.io.MEM_WB_REGRD <= io.MEM_WB_rd_sel @[Execute.scala 60:31]
    forwardUnit.io.ID_EX_REGRS1 <= io.ID_EX_rs1_sel @[Execute.scala 61:31]
    forwardUnit.io.ID_EX_REGRS2 <= io.ID_EX_rs2_sel @[Execute.scala 62:31]
    forwardUnit.io.EX_MEM_REGWR <= io.EX_MEM_ctrl_RegWr @[Execute.scala 63:31]
    forwardUnit.io.MEM_WB_REGWR <= io.MEM_WB_ctrl_RegWr @[Execute.scala 64:31]
    node _T = eq(io.ID_EX_ctrl_OpA_sel, UInt<2>("h02")) @[Execute.scala 67:31]
    when _T : @[Execute.scala 67:44]
      alu.io.oper_a <= io.ID_EX_pc4 @[Execute.scala 68:19]
      skip @[Execute.scala 67:44]
    else : @[Execute.scala 71:4]
      node _T_1 = eq(io.ID_EX_ctrl_OpA_sel, UInt<1>("h01")) @[Execute.scala 70:35]
      when _T_1 : @[Execute.scala 71:4]
        alu.io.oper_a <= io.ID_EX_pc_out @[Execute.scala 72:21]
        skip @[Execute.scala 71:4]
      else : @[Execute.scala 74:13]
        node _T_2 = eq(forwardUnit.io.forward_a, UInt<1>("h00")) @[Execute.scala 75:35]
        when _T_2 : @[Execute.scala 75:48]
          alu.io.oper_a <= io.ID_EX_rs1 @[Execute.scala 76:21]
          skip @[Execute.scala 75:48]
        else : @[Execute.scala 77:55]
          node _T_3 = eq(forwardUnit.io.forward_a, UInt<1>("h01")) @[Execute.scala 77:42]
          when _T_3 : @[Execute.scala 77:55]
            alu.io.oper_a <= io.EX_MEM_alu_output @[Execute.scala 78:21]
            skip @[Execute.scala 77:55]
          else : @[Execute.scala 79:55]
            node _T_4 = eq(forwardUnit.io.forward_a, UInt<2>("h02")) @[Execute.scala 79:42]
            when _T_4 : @[Execute.scala 79:55]
              alu.io.oper_a <= io.writeback_write_data @[Execute.scala 80:21]
              skip @[Execute.scala 79:55]
            else : @[Execute.scala 81:18]
              alu.io.oper_a <= io.ID_EX_rs1 @[Execute.scala 82:21]
              skip @[Execute.scala 81:18]
        skip @[Execute.scala 74:13]
    node _T_5 = eq(io.ID_EX_ctrl_OpB_sel, UInt<1>("h01")) @[Execute.scala 87:30]
    when _T_5 : @[Execute.scala 87:42]
      alu.io.oper_b <= io.ID_EX_imm @[Execute.scala 88:19]
      node _T_6 = eq(forwardUnit.io.forward_b, UInt<1>("h00")) @[Execute.scala 89:35]
      when _T_6 : @[Execute.scala 89:48]
        io.rs2_out <= io.ID_EX_rs2 @[Execute.scala 90:18]
        skip @[Execute.scala 89:48]
      else : @[Execute.scala 91:55]
        node _T_7 = eq(forwardUnit.io.forward_b, UInt<1>("h01")) @[Execute.scala 91:42]
        when _T_7 : @[Execute.scala 91:55]
          io.rs2_out <= io.EX_MEM_alu_output @[Execute.scala 92:18]
          skip @[Execute.scala 91:55]
        else : @[Execute.scala 93:55]
          node _T_8 = eq(forwardUnit.io.forward_b, UInt<2>("h02")) @[Execute.scala 93:42]
          when _T_8 : @[Execute.scala 93:55]
            io.rs2_out <= io.writeback_write_data @[Execute.scala 94:18]
            skip @[Execute.scala 93:55]
          else : @[Execute.scala 95:18]
            io.rs2_out <= io.ID_EX_rs2 @[Execute.scala 96:18]
            skip @[Execute.scala 95:18]
      skip @[Execute.scala 87:42]
    else : @[Execute.scala 100:16]
      node _T_9 = eq(forwardUnit.io.forward_b, UInt<1>("h00")) @[Execute.scala 101:35]
      when _T_9 : @[Execute.scala 101:48]
        alu.io.oper_b <= io.ID_EX_rs2 @[Execute.scala 102:21]
        io.rs2_out <= io.ID_EX_rs2 @[Execute.scala 103:18]
        skip @[Execute.scala 101:48]
      else : @[Execute.scala 104:55]
        node _T_10 = eq(forwardUnit.io.forward_b, UInt<1>("h01")) @[Execute.scala 104:42]
        when _T_10 : @[Execute.scala 104:55]
          alu.io.oper_b <= io.EX_MEM_alu_output @[Execute.scala 105:21]
          io.rs2_out <= io.EX_MEM_alu_output @[Execute.scala 106:18]
          skip @[Execute.scala 104:55]
        else : @[Execute.scala 107:55]
          node _T_11 = eq(forwardUnit.io.forward_b, UInt<2>("h02")) @[Execute.scala 107:42]
          when _T_11 : @[Execute.scala 107:55]
            alu.io.oper_b <= io.writeback_write_data @[Execute.scala 108:21]
            io.rs2_out <= io.writeback_write_data @[Execute.scala 109:18]
            skip @[Execute.scala 107:55]
          else : @[Execute.scala 110:18]
            alu.io.oper_b <= io.ID_EX_rs2 @[Execute.scala 111:21]
            io.rs2_out <= io.ID_EX_rs2 @[Execute.scala 112:18]
            skip @[Execute.scala 110:18]
      skip @[Execute.scala 100:16]
    alu_control.io.aluOp <= io.ID_EX_ctrl_AluOp @[Execute.scala 117:24]
    alu_control.io.func7 <= io.ID_EX_func7 @[Execute.scala 118:24]
    alu_control.io.func3 <= io.ID_EX_func3 @[Execute.scala 119:24]
    alu.io.aluCtrl <= alu_control.io.output @[Execute.scala 123:18]
    io.alu_output <= alu.io.output @[Execute.scala 126:17]
    io.rd_sel_out <= io.ID_EX_rd_sel @[Execute.scala 129:17]
    io.rs2_sel_out <= io.ID_EX_rs2_sel @[Execute.scala 130:18]
    io.func3_out <= io.ID_EX_func3 @[Execute.scala 131:16]
    io.ctrl_MemWr_out <= io.ID_EX_ctrl_MemWr @[Execute.scala 133:21]
    io.ctrl_MemRd_out <= io.ID_EX_ctrl_MemRd @[Execute.scala 134:21]
    io.ctrl_RegWr_out <= io.ID_EX_ctrl_RegWr @[Execute.scala 135:21]
    io.ctrl_CsrWe_out <= io.ID_EX_ctrl_CsrWen @[Execute.scala 136:21]
    io.ctrl_MemToReg_out <= io.ID_EX_ctrl_MemToReg @[Execute.scala 137:24]
    io.csr_addr_out <= io.ID_EX_imm @[Execute.scala 138:19]
    io.csr_data_o <= io.ID_EX_csr_data @[Execute.scala 140:17]
    
  module Load_unit : 
    input clock : Clock
    input reset : Reset
    output io : {flip func3 : UInt<3>, flip en : UInt<1>, flip data_offset : UInt<2>, flip memData : SInt<32>, LoadData : SInt<32>}
    
    node lb = bits(io.memData, 7, 0) @[Load_unit.scala 13:24]
    node lh = bits(io.memData, 15, 0) @[Load_unit.scala 14:24]
    when io.en : @[Load_unit.scala 25:17]
      node _T = eq(io.func3, UInt<1>("h00")) @[Load_unit.scala 26:23]
      when _T : @[Load_unit.scala 26:37]
        node _T_1 = eq(io.data_offset, UInt<1>("h00")) @[Load_unit.scala 28:33]
        when _T_1 : @[Load_unit.scala 28:46]
          node _T_2 = bits(io.memData, 7, 7) @[Load_unit.scala 30:54]
          node _T_3 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
          node _T_4 = mux(_T_3, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
          node _T_5 = bits(io.memData, 7, 0) @[Load_unit.scala 30:69]
          node _T_6 = cat(_T_4, _T_5) @[Cat.scala 29:58]
          node _T_7 = asSInt(_T_6) @[Load_unit.scala 30:76]
          io.LoadData <= _T_7 @[Load_unit.scala 30:29]
          skip @[Load_unit.scala 28:46]
        else : @[Load_unit.scala 31:53]
          node _T_8 = eq(io.data_offset, UInt<1>("h01")) @[Load_unit.scala 31:40]
          when _T_8 : @[Load_unit.scala 31:53]
            node _T_9 = bits(io.memData, 15, 15) @[Load_unit.scala 33:55]
            node _T_10 = bits(_T_9, 0, 0) @[Bitwise.scala 72:15]
            node _T_11 = mux(_T_10, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
            node _T_12 = bits(io.memData, 15, 8) @[Load_unit.scala 33:71]
            node _T_13 = cat(_T_11, _T_12) @[Cat.scala 29:58]
            node _T_14 = asSInt(_T_13) @[Load_unit.scala 33:85]
            io.LoadData <= _T_14 @[Load_unit.scala 33:29]
            skip @[Load_unit.scala 31:53]
          else : @[Load_unit.scala 34:53]
            node _T_15 = eq(io.data_offset, UInt<2>("h02")) @[Load_unit.scala 34:40]
            when _T_15 : @[Load_unit.scala 34:53]
              node _T_16 = bits(io.memData, 23, 23) @[Load_unit.scala 36:55]
              node _T_17 = bits(_T_16, 0, 0) @[Bitwise.scala 72:15]
              node _T_18 = mux(_T_17, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node _T_19 = bits(io.memData, 23, 16) @[Load_unit.scala 36:71]
              node _T_20 = cat(_T_18, _T_19) @[Cat.scala 29:58]
              node _T_21 = asSInt(_T_20) @[Load_unit.scala 36:86]
              io.LoadData <= _T_21 @[Load_unit.scala 36:29]
              skip @[Load_unit.scala 34:53]
            else : @[Load_unit.scala 37:53]
              node _T_22 = eq(io.data_offset, UInt<2>("h03")) @[Load_unit.scala 37:40]
              when _T_22 : @[Load_unit.scala 37:53]
                node _T_23 = bits(io.memData, 31, 31) @[Load_unit.scala 39:55]
                node _T_24 = bits(_T_23, 0, 0) @[Bitwise.scala 72:15]
                node _T_25 = mux(_T_24, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node _T_26 = bits(io.memData, 31, 24) @[Load_unit.scala 39:71]
                node _T_27 = cat(_T_25, _T_26) @[Cat.scala 29:58]
                node _T_28 = asSInt(_T_27) @[Load_unit.scala 39:86]
                io.LoadData <= _T_28 @[Load_unit.scala 39:29]
                skip @[Load_unit.scala 37:53]
              else : @[Load_unit.scala 40:26]
                io.LoadData is invalid @[Load_unit.scala 42:29]
                skip @[Load_unit.scala 40:26]
        skip @[Load_unit.scala 26:37]
      else : @[Load_unit.scala 44:44]
        node _T_29 = eq(io.func3, UInt<1>("h01")) @[Load_unit.scala 44:30]
        when _T_29 : @[Load_unit.scala 44:44]
          node _T_30 = eq(io.data_offset, UInt<1>("h00")) @[Load_unit.scala 46:33]
          when _T_30 : @[Load_unit.scala 46:46]
            node _T_31 = bits(io.memData, 15, 15) @[Load_unit.scala 48:54]
            node _T_32 = bits(_T_31, 0, 0) @[Bitwise.scala 72:15]
            node _T_33 = mux(_T_32, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
            node _T_34 = bits(io.memData, 15, 0) @[Load_unit.scala 48:70]
            node _T_35 = cat(_T_33, _T_34) @[Cat.scala 29:58]
            node _T_36 = asSInt(_T_35) @[Load_unit.scala 48:78]
            io.LoadData <= _T_36 @[Load_unit.scala 48:29]
            skip @[Load_unit.scala 46:46]
          else : @[Load_unit.scala 49:53]
            node _T_37 = eq(io.data_offset, UInt<1>("h01")) @[Load_unit.scala 49:40]
            when _T_37 : @[Load_unit.scala 49:53]
              node _T_38 = bits(io.memData, 23, 23) @[Load_unit.scala 51:55]
              node _T_39 = bits(_T_38, 0, 0) @[Bitwise.scala 72:15]
              node _T_40 = mux(_T_39, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
              node _T_41 = bits(io.memData, 23, 8) @[Load_unit.scala 51:71]
              node _T_42 = cat(_T_40, _T_41) @[Cat.scala 29:58]
              node _T_43 = asSInt(_T_42) @[Load_unit.scala 51:85]
              io.LoadData <= _T_43 @[Load_unit.scala 51:29]
              skip @[Load_unit.scala 49:53]
            else : @[Load_unit.scala 52:53]
              node _T_44 = eq(io.data_offset, UInt<2>("h02")) @[Load_unit.scala 52:40]
              when _T_44 : @[Load_unit.scala 52:53]
                node _T_45 = bits(io.memData, 31, 31) @[Load_unit.scala 54:55]
                node _T_46 = bits(_T_45, 0, 0) @[Bitwise.scala 72:15]
                node _T_47 = mux(_T_46, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                node _T_48 = bits(io.memData, 31, 16) @[Load_unit.scala 54:71]
                node _T_49 = cat(_T_47, _T_48) @[Cat.scala 29:58]
                node _T_50 = asSInt(_T_49) @[Load_unit.scala 54:86]
                io.LoadData <= _T_50 @[Load_unit.scala 54:29]
                skip @[Load_unit.scala 52:53]
              else : @[Load_unit.scala 55:53]
                node _T_51 = eq(io.data_offset, UInt<2>("h03")) @[Load_unit.scala 55:40]
                when _T_51 : @[Load_unit.scala 55:53]
                  node _T_52 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                  node _T_53 = bits(io.memData, 31, 24) @[Load_unit.scala 63:60]
                  node _T_54 = cat(_T_52, _T_53) @[Cat.scala 29:58]
                  node _T_55 = asSInt(_T_54) @[Load_unit.scala 63:75]
                  io.LoadData <= _T_55 @[Load_unit.scala 63:29]
                  skip @[Load_unit.scala 55:53]
                else : @[Load_unit.scala 64:26]
                  io.LoadData is invalid @[Load_unit.scala 66:29]
                  skip @[Load_unit.scala 64:26]
          skip @[Load_unit.scala 44:44]
        else : @[Load_unit.scala 68:44]
          node _T_56 = eq(io.func3, UInt<3>("h06")) @[Load_unit.scala 68:30]
          when _T_56 : @[Load_unit.scala 68:44]
            io.LoadData <= io.memData @[Load_unit.scala 73:25]
            skip @[Load_unit.scala 68:44]
          else : @[Load_unit.scala 74:44]
            node _T_57 = eq(io.func3, UInt<3>("h04")) @[Load_unit.scala 74:30]
            when _T_57 : @[Load_unit.scala 74:44]
              node _T_58 = eq(io.data_offset, UInt<1>("h00")) @[Load_unit.scala 76:33]
              when _T_58 : @[Load_unit.scala 76:46]
                node _T_59 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node _T_60 = bits(io.memData, 7, 0) @[Load_unit.scala 78:59]
                node _T_61 = cat(_T_59, _T_60) @[Cat.scala 29:58]
                node _T_62 = asSInt(_T_61) @[Load_unit.scala 78:66]
                io.LoadData <= _T_62 @[Load_unit.scala 78:29]
                skip @[Load_unit.scala 76:46]
              else : @[Load_unit.scala 79:53]
                node _T_63 = eq(io.data_offset, UInt<1>("h01")) @[Load_unit.scala 79:40]
                when _T_63 : @[Load_unit.scala 79:53]
                  node _T_64 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                  node _T_65 = bits(io.memData, 15, 8) @[Load_unit.scala 81:60]
                  node _T_66 = cat(_T_64, _T_65) @[Cat.scala 29:58]
                  node _T_67 = asSInt(_T_66) @[Load_unit.scala 81:74]
                  io.LoadData <= _T_67 @[Load_unit.scala 81:29]
                  skip @[Load_unit.scala 79:53]
                else : @[Load_unit.scala 82:53]
                  node _T_68 = eq(io.data_offset, UInt<2>("h02")) @[Load_unit.scala 82:40]
                  when _T_68 : @[Load_unit.scala 82:53]
                    node _T_69 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                    node _T_70 = bits(io.memData, 23, 16) @[Load_unit.scala 84:60]
                    node _T_71 = cat(_T_69, _T_70) @[Cat.scala 29:58]
                    node _T_72 = asSInt(_T_71) @[Load_unit.scala 84:75]
                    io.LoadData <= _T_72 @[Load_unit.scala 84:29]
                    skip @[Load_unit.scala 82:53]
                  else : @[Load_unit.scala 85:53]
                    node _T_73 = eq(io.data_offset, UInt<2>("h03")) @[Load_unit.scala 85:40]
                    when _T_73 : @[Load_unit.scala 85:53]
                      node _T_74 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                      node _T_75 = bits(io.memData, 31, 24) @[Load_unit.scala 87:60]
                      node _T_76 = cat(_T_74, _T_75) @[Cat.scala 29:58]
                      node _T_77 = asSInt(_T_76) @[Load_unit.scala 87:75]
                      io.LoadData <= _T_77 @[Load_unit.scala 87:29]
                      skip @[Load_unit.scala 85:53]
                    else : @[Load_unit.scala 88:26]
                      io.LoadData is invalid @[Load_unit.scala 90:29]
                      skip @[Load_unit.scala 88:26]
              skip @[Load_unit.scala 74:44]
            else : @[Load_unit.scala 92:44]
              node _T_78 = eq(io.func3, UInt<3>("h05")) @[Load_unit.scala 92:30]
              when _T_78 : @[Load_unit.scala 92:44]
                node _T_79 = eq(io.data_offset, UInt<1>("h00")) @[Load_unit.scala 94:33]
                when _T_79 : @[Load_unit.scala 94:46]
                  node _T_80 = mux(UInt<1>("h00"), UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                  node _T_81 = bits(io.memData, 15, 0) @[Load_unit.scala 96:60]
                  node _T_82 = cat(_T_80, _T_81) @[Cat.scala 29:58]
                  node _T_83 = asSInt(_T_82) @[Load_unit.scala 96:68]
                  io.LoadData <= _T_83 @[Load_unit.scala 96:29]
                  skip @[Load_unit.scala 94:46]
                else : @[Load_unit.scala 97:53]
                  node _T_84 = eq(io.data_offset, UInt<1>("h01")) @[Load_unit.scala 97:40]
                  when _T_84 : @[Load_unit.scala 97:53]
                    node _T_85 = mux(UInt<1>("h00"), UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                    node _T_86 = bits(io.memData, 23, 8) @[Load_unit.scala 99:60]
                    node _T_87 = cat(_T_85, _T_86) @[Cat.scala 29:58]
                    node _T_88 = asSInt(_T_87) @[Load_unit.scala 99:74]
                    io.LoadData <= _T_88 @[Load_unit.scala 99:29]
                    skip @[Load_unit.scala 97:53]
                  else : @[Load_unit.scala 100:53]
                    node _T_89 = eq(io.data_offset, UInt<2>("h02")) @[Load_unit.scala 100:40]
                    when _T_89 : @[Load_unit.scala 100:53]
                      node _T_90 = mux(UInt<1>("h00"), UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                      node _T_91 = bits(io.memData, 31, 16) @[Load_unit.scala 102:60]
                      node _T_92 = cat(_T_90, _T_91) @[Cat.scala 29:58]
                      node _T_93 = asSInt(_T_92) @[Load_unit.scala 102:75]
                      io.LoadData <= _T_93 @[Load_unit.scala 102:29]
                      skip @[Load_unit.scala 100:53]
                    else : @[Load_unit.scala 103:53]
                      node _T_94 = eq(io.data_offset, UInt<2>("h03")) @[Load_unit.scala 103:40]
                      when _T_94 : @[Load_unit.scala 103:53]
                        node _T_95 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                        node _T_96 = bits(io.memData, 31, 24) @[Load_unit.scala 111:60]
                        node _T_97 = cat(_T_95, _T_96) @[Cat.scala 29:58]
                        node _T_98 = asSInt(_T_97) @[Load_unit.scala 111:75]
                        io.LoadData <= _T_98 @[Load_unit.scala 111:29]
                        skip @[Load_unit.scala 103:53]
                      else : @[Load_unit.scala 112:26]
                        io.LoadData is invalid @[Load_unit.scala 114:29]
                        skip @[Load_unit.scala 112:26]
                skip @[Load_unit.scala 92:44]
              else : @[Load_unit.scala 116:44]
                node _T_99 = eq(io.func3, UInt<2>("h02")) @[Load_unit.scala 116:30]
                when _T_99 : @[Load_unit.scala 116:44]
                  node _T_100 = eq(io.data_offset, UInt<1>("h00")) @[Load_unit.scala 118:33]
                  when _T_100 : @[Load_unit.scala 118:46]
                    node _T_101 = bits(io.memData, 31, 0) @[Load_unit.scala 120:42]
                    node _T_102 = asSInt(_T_101) @[Load_unit.scala 120:55]
                    io.LoadData <= _T_102 @[Load_unit.scala 120:29]
                    skip @[Load_unit.scala 118:46]
                  else : @[Load_unit.scala 121:53]
                    node _T_103 = eq(io.data_offset, UInt<1>("h01")) @[Load_unit.scala 121:40]
                    when _T_103 : @[Load_unit.scala 121:53]
                      node _T_104 = mux(UInt<1>("h00"), UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                      node _T_105 = bits(io.memData, 31, 8) @[Load_unit.scala 130:59]
                      node _T_106 = cat(_T_104, _T_105) @[Cat.scala 29:58]
                      node _T_107 = asSInt(_T_106) @[Load_unit.scala 130:73]
                      io.LoadData <= _T_107 @[Load_unit.scala 130:29]
                      skip @[Load_unit.scala 121:53]
                    else : @[Load_unit.scala 131:53]
                      node _T_108 = eq(io.data_offset, UInt<2>("h02")) @[Load_unit.scala 131:40]
                      when _T_108 : @[Load_unit.scala 131:53]
                        node _T_109 = mux(UInt<1>("h00"), UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                        node _T_110 = bits(io.memData, 31, 16) @[Load_unit.scala 137:60]
                        node _T_111 = cat(_T_109, _T_110) @[Cat.scala 29:58]
                        node _T_112 = asSInt(_T_111) @[Load_unit.scala 137:75]
                        io.LoadData <= _T_112 @[Load_unit.scala 137:29]
                        skip @[Load_unit.scala 131:53]
                      else : @[Load_unit.scala 138:53]
                        node _T_113 = eq(io.data_offset, UInt<2>("h03")) @[Load_unit.scala 138:40]
                        when _T_113 : @[Load_unit.scala 138:53]
                          node _T_114 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                          node _T_115 = bits(io.memData, 31, 24) @[Load_unit.scala 144:61]
                          node _T_116 = cat(_T_114, _T_115) @[Cat.scala 29:58]
                          node _T_117 = asSInt(_T_116) @[Load_unit.scala 144:76]
                          io.LoadData <= _T_117 @[Load_unit.scala 144:29]
                          skip @[Load_unit.scala 138:53]
                        else : @[Load_unit.scala 145:26]
                          io.LoadData is invalid @[Load_unit.scala 147:29]
                          skip @[Load_unit.scala 145:26]
                  skip @[Load_unit.scala 116:44]
                else : @[Load_unit.scala 149:22]
                  io.LoadData is invalid @[Load_unit.scala 151:25]
                  skip @[Load_unit.scala 149:22]
      skip @[Load_unit.scala 25:17]
    else : @[Load_unit.scala 153:18]
      io.LoadData is invalid @[Load_unit.scala 154:21]
      skip @[Load_unit.scala 153:18]
    
  module MemoryStage : 
    input clock : Clock
    input reset : Reset
    output io : {flip EX_MEM_alu_output : SInt<32>, flip EX_MEM_rd_sel : UInt<5>, flip EX_MEM_RegWr : UInt<1>, flip EX_MEM_CsrWe : UInt<1>, flip EX_MEM_MemRd : UInt<1>, flip EX_MEM_MemToReg : UInt<1>, flip EX_MEM_MemWr : UInt<1>, flip EX_MEM_rs2 : SInt<32>, flip func3 : UInt<3>, flip EX_MEM_csr_data : UInt<32>, flip data_gnt_i : UInt<1>, flip data_rvalid_i : UInt<1>, flip data_rdata_i : SInt<32>, data_req_o : UInt<1>, data_be_o : UInt<1>[4], ctrl_MemWr_out : UInt<1>, data_wdata_o : SInt<8>[4], memAddress : SInt<32>, data_out : SInt<32>, alu_output : SInt<32>, rd_sel_out : UInt<5>, ctrl_RegWr_out : UInt<1>, ctrl_CsrWen_out : UInt<1>, ctrl_MemRd_out : UInt<1>, ctrl_MemToReg_out : UInt<1>, csr_data_out : UInt<32>, stall : UInt<1>}
    
    inst load_unit of Load_unit @[MemoryStage.scala 45:25]
    load_unit.clock <= clock
    load_unit.reset <= reset
    node data_offset = bits(io.EX_MEM_alu_output, 1, 0) @[MemoryStage.scala 47:41]
    wire data_wdata : SInt<8>[4] @[MemoryStage.scala 48:24]
    node _T = eq(io.EX_MEM_MemWr, UInt<1>("h01")) @[MemoryStage.scala 55:32]
    node _T_1 = eq(io.EX_MEM_MemRd, UInt<1>("h01")) @[MemoryStage.scala 55:59]
    node _T_2 = or(_T, _T_1) @[MemoryStage.scala 55:40]
    node _T_3 = eq(io.data_rvalid_i, UInt<1>("h00")) @[MemoryStage.scala 55:71]
    node _T_4 = and(_T_2, _T_3) @[MemoryStage.scala 55:68]
    io.stall <= _T_4 @[MemoryStage.scala 55:12]
    load_unit.io.func3 <= io.func3 @[MemoryStage.scala 60:22]
    load_unit.io.memData <= io.data_rdata_i @[MemoryStage.scala 61:24]
    load_unit.io.data_offset <= data_offset @[MemoryStage.scala 62:28]
    load_unit.io.en <= UInt<1>("h00") @[MemoryStage.scala 63:19]
    node _T_5 = eq(io.func3, UInt<2>("h02")) @[MemoryStage.scala 81:17]
    node _T_6 = eq(io.EX_MEM_MemWr, UInt<1>("h01")) @[MemoryStage.scala 81:49]
    node _T_7 = and(_T_5, _T_6) @[MemoryStage.scala 81:30]
    when _T_7 : @[MemoryStage.scala 81:58]
      node _T_8 = eq(data_offset, UInt<1>("h00")) @[MemoryStage.scala 83:22]
      when _T_8 : @[MemoryStage.scala 83:35]
        io.data_be_o[0] <= UInt<1>("h01") @[MemoryStage.scala 86:25]
        io.data_be_o[1] <= UInt<1>("h01") @[MemoryStage.scala 86:25]
        io.data_be_o[2] <= UInt<1>("h01") @[MemoryStage.scala 86:25]
        io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 86:25]
        skip @[MemoryStage.scala 83:35]
      else : @[MemoryStage.scala 89:42]
        node _T_9 = eq(data_offset, UInt<1>("h01")) @[MemoryStage.scala 89:29]
        when _T_9 : @[MemoryStage.scala 89:42]
          io.data_be_o[0] <= UInt<1>("h00") @[MemoryStage.scala 91:23]
          io.data_be_o[1] <= UInt<1>("h01") @[MemoryStage.scala 93:25]
          io.data_be_o[2] <= UInt<1>("h01") @[MemoryStage.scala 93:25]
          io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 93:25]
          skip @[MemoryStage.scala 89:42]
        else : @[MemoryStage.scala 96:42]
          node _T_10 = eq(data_offset, UInt<2>("h02")) @[MemoryStage.scala 96:29]
          when _T_10 : @[MemoryStage.scala 96:42]
            io.data_be_o[0] <= UInt<1>("h00") @[MemoryStage.scala 99:25]
            io.data_be_o[1] <= UInt<1>("h00") @[MemoryStage.scala 99:25]
            io.data_be_o[2] <= UInt<1>("h01") @[MemoryStage.scala 102:25]
            io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 102:25]
            skip @[MemoryStage.scala 96:42]
          else : @[MemoryStage.scala 105:42]
            node _T_11 = eq(data_offset, UInt<2>("h03")) @[MemoryStage.scala 105:29]
            when _T_11 : @[MemoryStage.scala 105:42]
              io.data_be_o[0] <= UInt<1>("h00") @[MemoryStage.scala 108:25]
              io.data_be_o[1] <= UInt<1>("h00") @[MemoryStage.scala 108:25]
              io.data_be_o[2] <= UInt<1>("h00") @[MemoryStage.scala 108:25]
              io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 110:23]
              skip @[MemoryStage.scala 105:42]
            else : @[MemoryStage.scala 112:18]
              io.data_be_o[0] <= UInt<1>("h01") @[MemoryStage.scala 114:25]
              io.data_be_o[1] <= UInt<1>("h01") @[MemoryStage.scala 114:25]
              io.data_be_o[2] <= UInt<1>("h01") @[MemoryStage.scala 114:25]
              io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 114:25]
              skip @[MemoryStage.scala 112:18]
      skip @[MemoryStage.scala 81:58]
    else : @[MemoryStage.scala 118:65]
      node _T_12 = eq(io.func3, UInt<1>("h01")) @[MemoryStage.scala 118:24]
      node _T_13 = eq(io.EX_MEM_MemWr, UInt<1>("h01")) @[MemoryStage.scala 118:56]
      node _T_14 = and(_T_12, _T_13) @[MemoryStage.scala 118:37]
      when _T_14 : @[MemoryStage.scala 118:65]
        node _T_15 = eq(data_offset, UInt<1>("h00")) @[MemoryStage.scala 120:22]
        when _T_15 : @[MemoryStage.scala 120:35]
          io.data_be_o[0] <= UInt<1>("h01") @[MemoryStage.scala 123:25]
          io.data_be_o[1] <= UInt<1>("h01") @[MemoryStage.scala 123:25]
          io.data_be_o[2] <= UInt<1>("h00") @[MemoryStage.scala 126:25]
          io.data_be_o[3] <= UInt<1>("h00") @[MemoryStage.scala 126:25]
          skip @[MemoryStage.scala 120:35]
        else : @[MemoryStage.scala 129:42]
          node _T_16 = eq(data_offset, UInt<1>("h01")) @[MemoryStage.scala 129:29]
          when _T_16 : @[MemoryStage.scala 129:42]
            io.data_be_o[0] <= UInt<1>("h00") @[MemoryStage.scala 131:23]
            io.data_be_o[1] <= UInt<1>("h01") @[MemoryStage.scala 133:25]
            io.data_be_o[2] <= UInt<1>("h01") @[MemoryStage.scala 133:25]
            io.data_be_o[3] <= UInt<1>("h00") @[MemoryStage.scala 135:23]
            skip @[MemoryStage.scala 129:42]
          else : @[MemoryStage.scala 137:42]
            node _T_17 = eq(data_offset, UInt<2>("h02")) @[MemoryStage.scala 137:29]
            when _T_17 : @[MemoryStage.scala 137:42]
              io.data_be_o[0] <= UInt<1>("h00") @[MemoryStage.scala 140:25]
              io.data_be_o[1] <= UInt<1>("h00") @[MemoryStage.scala 140:25]
              io.data_be_o[2] <= UInt<1>("h01") @[MemoryStage.scala 143:25]
              io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 143:25]
              skip @[MemoryStage.scala 137:42]
            else : @[MemoryStage.scala 146:42]
              node _T_18 = eq(data_offset, UInt<2>("h03")) @[MemoryStage.scala 146:29]
              when _T_18 : @[MemoryStage.scala 146:42]
                io.data_be_o[0] <= UInt<1>("h00") @[MemoryStage.scala 149:25]
                io.data_be_o[1] <= UInt<1>("h00") @[MemoryStage.scala 149:25]
                io.data_be_o[2] <= UInt<1>("h00") @[MemoryStage.scala 149:25]
                io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 151:23]
                skip @[MemoryStage.scala 146:42]
              else : @[MemoryStage.scala 153:18]
                io.data_be_o[0] <= UInt<1>("h01") @[MemoryStage.scala 155:25]
                io.data_be_o[1] <= UInt<1>("h01") @[MemoryStage.scala 155:25]
                io.data_be_o[2] <= UInt<1>("h01") @[MemoryStage.scala 155:25]
                io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 155:25]
                skip @[MemoryStage.scala 153:18]
        skip @[MemoryStage.scala 118:65]
      else : @[MemoryStage.scala 158:65]
        node _T_19 = eq(io.func3, UInt<1>("h00")) @[MemoryStage.scala 158:24]
        node _T_20 = eq(io.EX_MEM_MemWr, UInt<1>("h01")) @[MemoryStage.scala 158:56]
        node _T_21 = and(_T_19, _T_20) @[MemoryStage.scala 158:37]
        when _T_21 : @[MemoryStage.scala 158:65]
          node _T_22 = eq(data_offset, UInt<1>("h00")) @[MemoryStage.scala 160:22]
          when _T_22 : @[MemoryStage.scala 160:35]
            io.data_be_o[0] <= UInt<1>("h01") @[MemoryStage.scala 162:23]
            io.data_be_o[1] <= UInt<1>("h00") @[MemoryStage.scala 164:25]
            io.data_be_o[2] <= UInt<1>("h00") @[MemoryStage.scala 164:25]
            io.data_be_o[3] <= UInt<1>("h00") @[MemoryStage.scala 164:25]
            skip @[MemoryStage.scala 160:35]
          else : @[MemoryStage.scala 167:42]
            node _T_23 = eq(data_offset, UInt<1>("h01")) @[MemoryStage.scala 167:29]
            when _T_23 : @[MemoryStage.scala 167:42]
              io.data_be_o[0] <= UInt<1>("h00") @[MemoryStage.scala 169:23]
              io.data_be_o[1] <= UInt<1>("h01") @[MemoryStage.scala 170:23]
              io.data_be_o[2] <= UInt<1>("h00") @[MemoryStage.scala 172:25]
              io.data_be_o[3] <= UInt<1>("h00") @[MemoryStage.scala 172:25]
              skip @[MemoryStage.scala 167:42]
            else : @[MemoryStage.scala 175:42]
              node _T_24 = eq(data_offset, UInt<2>("h02")) @[MemoryStage.scala 175:29]
              when _T_24 : @[MemoryStage.scala 175:42]
                io.data_be_o[0] <= UInt<1>("h00") @[MemoryStage.scala 178:25]
                io.data_be_o[1] <= UInt<1>("h00") @[MemoryStage.scala 178:25]
                io.data_be_o[2] <= UInt<1>("h01") @[MemoryStage.scala 180:23]
                io.data_be_o[3] <= UInt<1>("h00") @[MemoryStage.scala 181:23]
                skip @[MemoryStage.scala 175:42]
              else : @[MemoryStage.scala 183:42]
                node _T_25 = eq(data_offset, UInt<2>("h03")) @[MemoryStage.scala 183:29]
                when _T_25 : @[MemoryStage.scala 183:42]
                  io.data_be_o[0] <= UInt<1>("h00") @[MemoryStage.scala 186:25]
                  io.data_be_o[1] <= UInt<1>("h00") @[MemoryStage.scala 186:25]
                  io.data_be_o[2] <= UInt<1>("h00") @[MemoryStage.scala 186:25]
                  io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 188:23]
                  skip @[MemoryStage.scala 183:42]
                else : @[MemoryStage.scala 190:18]
                  io.data_be_o[0] <= UInt<1>("h01") @[MemoryStage.scala 192:25]
                  io.data_be_o[1] <= UInt<1>("h01") @[MemoryStage.scala 192:25]
                  io.data_be_o[2] <= UInt<1>("h01") @[MemoryStage.scala 192:25]
                  io.data_be_o[3] <= UInt<1>("h01") @[MemoryStage.scala 192:25]
                  skip @[MemoryStage.scala 190:18]
          skip @[MemoryStage.scala 158:65]
        else : @[MemoryStage.scala 195:16]
          io.data_be_o[0] is invalid @[MemoryStage.scala 196:18]
          io.data_be_o[1] is invalid @[MemoryStage.scala 196:18]
          io.data_be_o[2] is invalid @[MemoryStage.scala 196:18]
          io.data_be_o[3] is invalid @[MemoryStage.scala 196:18]
          skip @[MemoryStage.scala 195:16]
    node _T_26 = eq(data_offset, UInt<1>("h00")) @[MemoryStage.scala 206:20]
    when _T_26 : @[MemoryStage.scala 206:33]
      node _T_27 = bits(io.EX_MEM_rs2, 7, 0) @[MemoryStage.scala 207:35]
      node _T_28 = asSInt(_T_27) @[MemoryStage.scala 207:47]
      data_wdata[0] <= _T_28 @[MemoryStage.scala 207:19]
      node _T_29 = bits(io.EX_MEM_rs2, 15, 8) @[MemoryStage.scala 208:35]
      node _T_30 = asSInt(_T_29) @[MemoryStage.scala 208:48]
      data_wdata[1] <= _T_30 @[MemoryStage.scala 208:19]
      node _T_31 = bits(io.EX_MEM_rs2, 23, 16) @[MemoryStage.scala 209:35]
      node _T_32 = asSInt(_T_31) @[MemoryStage.scala 209:49]
      data_wdata[2] <= _T_32 @[MemoryStage.scala 209:19]
      node _T_33 = bits(io.EX_MEM_rs2, 31, 24) @[MemoryStage.scala 210:35]
      node _T_34 = asSInt(_T_33) @[MemoryStage.scala 210:49]
      data_wdata[3] <= _T_34 @[MemoryStage.scala 210:19]
      skip @[MemoryStage.scala 206:33]
    else : @[MemoryStage.scala 211:40]
      node _T_35 = eq(data_offset, UInt<1>("h01")) @[MemoryStage.scala 211:27]
      when _T_35 : @[MemoryStage.scala 211:40]
        node _T_36 = bits(io.EX_MEM_rs2, 31, 24) @[MemoryStage.scala 212:35]
        node _T_37 = asSInt(_T_36) @[MemoryStage.scala 212:49]
        data_wdata[0] <= _T_37 @[MemoryStage.scala 212:19]
        node _T_38 = bits(io.EX_MEM_rs2, 7, 0) @[MemoryStage.scala 213:35]
        node _T_39 = asSInt(_T_38) @[MemoryStage.scala 213:47]
        data_wdata[1] <= _T_39 @[MemoryStage.scala 213:19]
        node _T_40 = bits(io.EX_MEM_rs2, 15, 8) @[MemoryStage.scala 214:35]
        node _T_41 = asSInt(_T_40) @[MemoryStage.scala 214:48]
        data_wdata[2] <= _T_41 @[MemoryStage.scala 214:19]
        node _T_42 = bits(io.EX_MEM_rs2, 23, 16) @[MemoryStage.scala 215:35]
        node _T_43 = asSInt(_T_42) @[MemoryStage.scala 215:49]
        data_wdata[3] <= _T_43 @[MemoryStage.scala 215:19]
        skip @[MemoryStage.scala 211:40]
      else : @[MemoryStage.scala 216:40]
        node _T_44 = eq(data_offset, UInt<2>("h02")) @[MemoryStage.scala 216:27]
        when _T_44 : @[MemoryStage.scala 216:40]
          node _T_45 = bits(io.EX_MEM_rs2, 31, 24) @[MemoryStage.scala 217:35]
          node _T_46 = asSInt(_T_45) @[MemoryStage.scala 217:49]
          data_wdata[0] <= _T_46 @[MemoryStage.scala 217:19]
          node _T_47 = bits(io.EX_MEM_rs2, 23, 16) @[MemoryStage.scala 218:35]
          node _T_48 = asSInt(_T_47) @[MemoryStage.scala 218:49]
          data_wdata[1] <= _T_48 @[MemoryStage.scala 218:19]
          node _T_49 = bits(io.EX_MEM_rs2, 7, 0) @[MemoryStage.scala 219:35]
          node _T_50 = asSInt(_T_49) @[MemoryStage.scala 219:47]
          data_wdata[2] <= _T_50 @[MemoryStage.scala 219:19]
          node _T_51 = bits(io.EX_MEM_rs2, 15, 8) @[MemoryStage.scala 220:35]
          node _T_52 = asSInt(_T_51) @[MemoryStage.scala 220:48]
          data_wdata[3] <= _T_52 @[MemoryStage.scala 220:19]
          skip @[MemoryStage.scala 216:40]
        else : @[MemoryStage.scala 221:40]
          node _T_53 = eq(data_offset, UInt<2>("h03")) @[MemoryStage.scala 221:27]
          when _T_53 : @[MemoryStage.scala 221:40]
            node _T_54 = bits(io.EX_MEM_rs2, 31, 24) @[MemoryStage.scala 222:35]
            node _T_55 = asSInt(_T_54) @[MemoryStage.scala 222:49]
            data_wdata[0] <= _T_55 @[MemoryStage.scala 222:19]
            node _T_56 = bits(io.EX_MEM_rs2, 23, 16) @[MemoryStage.scala 223:35]
            node _T_57 = asSInt(_T_56) @[MemoryStage.scala 223:49]
            data_wdata[1] <= _T_57 @[MemoryStage.scala 223:19]
            node _T_58 = bits(io.EX_MEM_rs2, 15, 8) @[MemoryStage.scala 224:35]
            node _T_59 = asSInt(_T_58) @[MemoryStage.scala 224:48]
            data_wdata[2] <= _T_59 @[MemoryStage.scala 224:19]
            node _T_60 = bits(io.EX_MEM_rs2, 7, 0) @[MemoryStage.scala 225:35]
            node _T_61 = asSInt(_T_60) @[MemoryStage.scala 225:47]
            data_wdata[3] <= _T_61 @[MemoryStage.scala 225:19]
            skip @[MemoryStage.scala 221:40]
          else : @[MemoryStage.scala 226:16]
            node _T_62 = bits(io.EX_MEM_rs2, 7, 0) @[MemoryStage.scala 227:35]
            node _T_63 = asSInt(_T_62) @[MemoryStage.scala 227:47]
            data_wdata[0] <= _T_63 @[MemoryStage.scala 227:19]
            node _T_64 = bits(io.EX_MEM_rs2, 15, 8) @[MemoryStage.scala 228:35]
            node _T_65 = asSInt(_T_64) @[MemoryStage.scala 228:48]
            data_wdata[1] <= _T_65 @[MemoryStage.scala 228:19]
            node _T_66 = bits(io.EX_MEM_rs2, 23, 16) @[MemoryStage.scala 229:35]
            node _T_67 = asSInt(_T_66) @[MemoryStage.scala 229:49]
            data_wdata[2] <= _T_67 @[MemoryStage.scala 229:19]
            node _T_68 = bits(io.EX_MEM_rs2, 31, 24) @[MemoryStage.scala 230:35]
            node _T_69 = asSInt(_T_68) @[MemoryStage.scala 230:49]
            data_wdata[3] <= _T_69 @[MemoryStage.scala 230:19]
            skip @[MemoryStage.scala 226:16]
    io.memAddress <= io.EX_MEM_alu_output @[MemoryStage.scala 240:17]
    node _T_70 = eq(io.EX_MEM_MemWr, UInt<1>("h01")) @[MemoryStage.scala 241:41]
    node _T_71 = and(io.data_gnt_i, _T_70) @[MemoryStage.scala 241:22]
    when _T_71 : @[MemoryStage.scala 242:3]
      io.data_req_o <= UInt<1>("h01") @[MemoryStage.scala 243:19]
      io.data_wdata_o[0] <= data_wdata[0] @[MemoryStage.scala 245:21]
      io.data_wdata_o[1] <= data_wdata[1] @[MemoryStage.scala 245:21]
      io.data_wdata_o[2] <= data_wdata[2] @[MemoryStage.scala 245:21]
      io.data_wdata_o[3] <= data_wdata[3] @[MemoryStage.scala 245:21]
      skip @[MemoryStage.scala 242:3]
    else : @[MemoryStage.scala 246:59]
      node _T_72 = eq(io.EX_MEM_MemRd, UInt<1>("h01")) @[MemoryStage.scala 246:49]
      node _T_73 = and(io.data_gnt_i, _T_72) @[MemoryStage.scala 246:29]
      when _T_73 : @[MemoryStage.scala 246:59]
        io.data_req_o <= UInt<1>("h01") @[MemoryStage.scala 247:19]
        io.data_wdata_o[0] is invalid @[MemoryStage.scala 249:21]
        io.data_wdata_o[1] is invalid @[MemoryStage.scala 249:21]
        io.data_wdata_o[2] is invalid @[MemoryStage.scala 249:21]
        io.data_wdata_o[3] is invalid @[MemoryStage.scala 249:21]
        skip @[MemoryStage.scala 246:59]
      else : @[MemoryStage.scala 251:5]
        io.data_req_o <= UInt<1>("h00") @[MemoryStage.scala 252:21]
        io.data_wdata_o[0] is invalid @[MemoryStage.scala 254:30]
        io.data_wdata_o[1] is invalid @[MemoryStage.scala 254:30]
        io.data_wdata_o[2] is invalid @[MemoryStage.scala 254:30]
        io.data_wdata_o[3] is invalid @[MemoryStage.scala 254:30]
        skip @[MemoryStage.scala 251:5]
    node _T_74 = eq(io.EX_MEM_MemRd, UInt<1>("h01")) @[MemoryStage.scala 265:44]
    node _T_75 = and(io.data_rvalid_i, _T_74) @[MemoryStage.scala 265:25]
    when _T_75 : @[MemoryStage.scala 266:3]
      load_unit.io.en <= UInt<1>("h01") @[MemoryStage.scala 267:21]
      io.data_out <= load_unit.io.LoadData @[MemoryStage.scala 269:21]
      skip @[MemoryStage.scala 266:3]
    else : @[MemoryStage.scala 272:5]
      io.data_out is invalid @[MemoryStage.scala 273:23]
      skip @[MemoryStage.scala 272:5]
    io.ctrl_MemWr_out <= io.EX_MEM_MemWr @[MemoryStage.scala 284:21]
    io.alu_output <= io.EX_MEM_alu_output @[MemoryStage.scala 285:17]
    io.rd_sel_out <= io.EX_MEM_rd_sel @[MemoryStage.scala 287:17]
    io.ctrl_RegWr_out <= io.EX_MEM_RegWr @[MemoryStage.scala 288:21]
    io.ctrl_CsrWen_out <= io.EX_MEM_CsrWe @[MemoryStage.scala 289:22]
    io.ctrl_MemRd_out <= io.EX_MEM_MemRd @[MemoryStage.scala 290:21]
    io.ctrl_MemToReg_out <= io.EX_MEM_MemToReg @[MemoryStage.scala 291:24]
    io.csr_data_out <= io.EX_MEM_csr_data @[MemoryStage.scala 294:19]
    
  module WriteBack : 
    input clock : Clock
    input reset : Reset
    output io : {flip MEM_WB_MemToReg : UInt<1>, flip MEM_WB_dataMem_data : SInt<32>, flip MEM_WB_alu_output : SInt<32>, write_data : SInt<32>}
    
    node _T = eq(io.MEM_WB_MemToReg, UInt<1>("h01")) @[WriteBack.scala 13:29]
    when _T : @[WriteBack.scala 13:38]
      io.write_data <= io.MEM_WB_dataMem_data @[WriteBack.scala 14:23]
      skip @[WriteBack.scala 13:38]
    else : @[WriteBack.scala 15:18]
      io.write_data <= io.MEM_WB_alu_output @[WriteBack.scala 16:23]
      skip @[WriteBack.scala 15:18]
    
  module Core : 
    input clock : Clock
    input reset : Reset
    output io : {flip data_gnt_i : UInt<1>, flip data_rvalid_i : UInt<1>, flip data_rdata_i : SInt<32>, data_req_o : UInt<1>, data_we_o : UInt<1>, data_be_o : UInt<1>[4], data_addr_o : SInt<32>, data_wdata_o : SInt<8>[4], flip instr_gnt_i : UInt<1>, flip instr_rvalid_i : UInt<1>, flip instr_rdata_i : UInt<32>, instr_req_o : UInt<1>, instr_addr_o : UInt<32>, flip stall_core_i : UInt<1>, flip irq_external_i : UInt<1>, reg_7 : SInt<32>, reg_out : SInt<32>}
    
    inst ID_EX of ID_EX @[Core.scala 69:37]
    ID_EX.clock <= clock
    ID_EX.reset <= reset
    inst EX_MEM of EX_MEM @[Core.scala 70:37]
    EX_MEM.clock <= clock
    EX_MEM.reset <= reset
    inst MEM_WB of MEM_WB @[Core.scala 71:37]
    MEM_WB.clock <= clock
    MEM_WB.reset <= reset
    inst fetch of Fetch @[Core.scala 72:37]
    fetch.clock <= clock
    fetch.reset <= reset
    inst decode of Decode @[Core.scala 73:37]
    decode.clock <= clock
    decode.reset <= reset
    inst execute of Execute @[Core.scala 74:37]
    execute.clock <= clock
    execute.reset <= reset
    inst memory_stage of MemoryStage @[Core.scala 75:37]
    memory_stage.clock <= clock
    memory_stage.reset <= reset
    inst writeback of WriteBack @[Core.scala 76:37]
    writeback.clock <= clock
    writeback.reset <= reset
    node stall = or(memory_stage.io.stall, io.stall_core_i) @[Core.scala 80:53]
    node _T = eq(io.stall_core_i, UInt<1>("h00")) @[Core.scala 118:57]
    fetch.io.core_init_mtvec_i <= _T @[Core.scala 118:49]
    fetch.io.core_stall_i <= stall @[Core.scala 119:49]
    fetch.io.core_instr_gnt_i <= io.instr_gnt_i @[Core.scala 121:49]
    fetch.io.core_instr_rvalid_i <= io.instr_rvalid_i @[Core.scala 122:49]
    fetch.io.core_instr_rdata_i <= io.instr_rdata_i @[Core.scala 123:49]
    fetch.io.csrRegFile_irq_pending_i <= decode.io.fetch_irq_pending_o @[Core.scala 126:49]
    fetch.io.csrRegFile_csr_mstatus_mie_i <= decode.io.fetch_csr_mstatus_mie_o @[Core.scala 127:49]
    fetch.io.csrRegFile_csr_mtvec_i <= decode.io.fetch_csr_mtvec_o @[Core.scala 128:49]
    fetch.io.csrRegFile_csr_mepc_i <= decode.io.fetch_csr_mepc_o @[Core.scala 129:49]
    fetch.io.decode_mret_inst_i <= decode.io.fetch_mret_inst_o @[Core.scala 130:49]
    fetch.io.decode_sb_imm_i <= decode.io.sb_imm @[Core.scala 132:49]
    fetch.io.decode_uj_imm_i <= decode.io.uj_imm @[Core.scala 133:49]
    fetch.io.decode_jalr_imm_i <= decode.io.jalr_output @[Core.scala 134:49]
    fetch.io.decode_ctrl_next_pc_sel_i <= decode.io.ctrl_next_pc_sel_out @[Core.scala 135:49]
    fetch.io.decode_ctrl_out_branch_i <= decode.io.ctrl_Branch_out @[Core.scala 136:49]
    fetch.io.decode_branchLogic_output_i <= decode.io.branchLogic_output @[Core.scala 137:49]
    fetch.io.decode_hazardDetection_pc_i <= decode.io.hazardDetection_pc_out @[Core.scala 138:49]
    fetch.io.decode_hazardDetection_inst_i <= decode.io.hazardDetection_inst_out @[Core.scala 139:49]
    fetch.io.decode_hazardDetection_current_pc_i <= decode.io.hazardDetection_current_pc_out @[Core.scala 140:49]
    fetch.io.decode_hazardDetection_pc_forward_i <= decode.io.hazardDetection_pc_forward @[Core.scala 141:49]
    fetch.io.decode_hazardDetection_inst_forward_i <= decode.io.hazardDetection_inst_forward @[Core.scala 142:49]
    io.instr_req_o <= fetch.io.core_instr_req_o @[Core.scala 146:49]
    io.instr_addr_o <= fetch.io.core_instr_addr_o @[Core.scala 147:49]
    decode.io.IF_ID_inst <= fetch.io.decode_if_id_inst_o @[Core.scala 150:49]
    decode.io.IF_ID_pc <= fetch.io.decode_if_id_pc_o @[Core.scala 151:49]
    decode.io.IF_ID_pc4 <= fetch.io.decode_if_id_pc4_o @[Core.scala 152:49]
    decode.io.MEM_WB_ctrl_regWr <= MEM_WB.io.ctrl_RegWr_out @[Core.scala 153:49]
    decode.io.MEM_WB_ctrl_csrWen <= MEM_WB.io.ctrl_CsrWen_out @[Core.scala 154:49]
    decode.io.ID_EX_ctrl_csrWen <= ID_EX.io.ctrl_CsrWen_out @[Core.scala 155:49]
    decode.io.EX_MEM_ctrl_csrWen <= EX_MEM.io.ctrl_CsrWen_out @[Core.scala 156:49]
    decode.io.MEM_WB_rd_sel <= MEM_WB.io.rd_sel_out @[Core.scala 161:49]
    decode.io.ID_EX_ctrl_MemRd <= ID_EX.io.ctrl_MemRd_out @[Core.scala 162:49]
    decode.io.ID_EX_rd_sel <= ID_EX.io.rd_sel_out @[Core.scala 163:49]
    decode.io.EX_MEM_rd_sel <= EX_MEM.io.rd_sel_out @[Core.scala 164:49]
    decode.io.EX_MEM_ctrl_MemRd <= EX_MEM.io.ctrl_MemRd_out @[Core.scala 165:49]
    decode.io.MEM_WB_ctrl_MemRd <= MEM_WB.io.ctrl_MemRd_out @[Core.scala 166:49]
    decode.io.writeback_write_data <= writeback.io.write_data @[Core.scala 167:49]
    decode.io.MEM_WB_csr_rdata_i <= MEM_WB.io.csr_data_out @[Core.scala 168:51]
    decode.io.EX_MEM_csr_rdata_i <= EX_MEM.io.csr_data_o @[Core.scala 169:49]
    decode.io.ID_EX_csr_rdata_i <= ID_EX.io.csr_data_o @[Core.scala 170:49]
    decode.io.alu_output <= execute.io.alu_output @[Core.scala 171:49]
    decode.io.EX_MEM_alu_output <= EX_MEM.io.alu_output @[Core.scala 172:49]
    decode.io.MEM_WB_alu_output <= MEM_WB.io.alu_output @[Core.scala 173:49]
    decode.io.dmem_memOut <= io.data_rdata_i @[Core.scala 174:49]
    decode.io.dccm_rvalid_i <= io.data_rvalid_i @[Core.scala 175:49]
    decode.io.fetch_csr_save_cause_i <= fetch.io.csrRegFile_csr_save_cause_o @[Core.scala 176:49]
    decode.io.fetch_exc_cause_i <= fetch.io.csrRegFile_exc_cause_o @[Core.scala 177:49]
    decode.io.fetch_csr_save_if <= fetch.io.csrRegFile_csr_save_if_o @[Core.scala 178:49]
    decode.io.fetch_csr_if_pc <= fetch.io.csrRegFile_csr_if_pc_o @[Core.scala 179:49]
    decode.io.fetch_csr_mtvec_init <= fetch.io.csrRegFile_csr_mtvec_init_o @[Core.scala 180:49]
    decode.io.irq_external_i <= io.irq_external_i @[Core.scala 182:49]
    decode.io.ID_EX_ctrl_regWr <= ID_EX.io.ctrl_RegWr_out @[Core.scala 183:49]
    decode.io.EX_MEM_ctrl_regWr <= EX_MEM.io.ctrl_RegWr_out @[Core.scala 184:49]
    ID_EX.io.stall <= stall @[Core.scala 186:49]
    ID_EX.io.ctrl_MemWr_in <= decode.io.ctrl_MemWr_out @[Core.scala 187:49]
    ID_EX.io.ctrl_MemRd_in <= decode.io.ctrl_MemRd_out @[Core.scala 188:49]
    ID_EX.io.ctrl_Branch_in <= decode.io.ctrl_Branch_out @[Core.scala 189:49]
    ID_EX.io.ctrl_RegWr_in <= decode.io.ctrl_RegWr_out @[Core.scala 190:49]
    ID_EX.io.ctrl_CsrWen_in <= decode.io.ctrl_CsrWen_out @[Core.scala 191:49]
    ID_EX.io.ctrl_MemToReg_in <= decode.io.ctrl_MemToReg_out @[Core.scala 192:49]
    ID_EX.io.ctrl_AluOp_in <= decode.io.ctrl_AluOp_out @[Core.scala 193:49]
    ID_EX.io.ctrl_OpA_sel_in <= decode.io.ctrl_OpA_sel_out @[Core.scala 194:49]
    ID_EX.io.ctrl_OpB_sel_in <= decode.io.ctrl_OpB_sel_out @[Core.scala 195:49]
    ID_EX.io.ctrl_nextPc_sel_in <= decode.io.ctrl_next_pc_sel_out @[Core.scala 196:49]
    ID_EX.io.rs1_in <= decode.io.rs1_out @[Core.scala 198:49]
    ID_EX.io.rs2_in <= decode.io.rs2_out @[Core.scala 199:49]
    ID_EX.io.imm <= decode.io.imm_out @[Core.scala 200:49]
    ID_EX.io.csr_data_i <= decode.io.csr_rdata_o @[Core.scala 202:49]
    ID_EX.io.pc_in <= decode.io.pc_out @[Core.scala 204:49]
    ID_EX.io.pc4_in <= decode.io.pc4_out @[Core.scala 205:49]
    ID_EX.io.func3_in <= decode.io.func3_out @[Core.scala 206:49]
    ID_EX.io.func7_in <= decode.io.func7_out @[Core.scala 207:49]
    ID_EX.io.inst_op_in <= decode.io.inst_op_out @[Core.scala 208:49]
    ID_EX.io.rd_sel_in <= decode.io.rd_sel_out @[Core.scala 209:49]
    ID_EX.io.rs1_sel_in <= decode.io.rs1_sel_out @[Core.scala 210:49]
    ID_EX.io.rs2_sel_in <= decode.io.rs2_sel_out @[Core.scala 211:49]
    decode.io.execute_regwrite <= ID_EX.io.ctrl_RegWr_out @[Core.scala 213:49]
    decode.io.mem_regwrite <= EX_MEM.io.ctrl_RegWr_out @[Core.scala 214:49]
    decode.io.wb_regwrite <= MEM_WB.io.ctrl_RegWr_out @[Core.scala 215:49]
    execute.io.ID_EX_pc_out <= ID_EX.io.pc_out @[Core.scala 219:49]
    execute.io.EX_MEM_rd_sel <= EX_MEM.io.rd_sel_out @[Core.scala 220:49]
    execute.io.MEM_WB_rd_sel <= MEM_WB.io.rd_sel_out @[Core.scala 221:49]
    execute.io.ID_EX_rs1_sel <= ID_EX.io.rs1_sel_out @[Core.scala 222:49]
    execute.io.ID_EX_rs2_sel <= ID_EX.io.rs2_sel_out @[Core.scala 223:49]
    execute.io.EX_MEM_ctrl_RegWr <= EX_MEM.io.ctrl_RegWr_out @[Core.scala 224:49]
    execute.io.MEM_WB_ctrl_RegWr <= MEM_WB.io.ctrl_RegWr_out @[Core.scala 225:49]
    execute.io.ID_EX_ctrl_OpA_sel <= ID_EX.io.ctrl_OpA_sel_out @[Core.scala 226:49]
    execute.io.ID_EX_ctrl_OpB_sel <= ID_EX.io.ctrl_OpB_sel_out @[Core.scala 227:49]
    execute.io.ID_EX_pc4 <= ID_EX.io.pc4_out @[Core.scala 228:49]
    execute.io.ID_EX_rs1 <= ID_EX.io.rs1_out @[Core.scala 229:49]
    execute.io.ID_EX_rs2 <= ID_EX.io.rs2_out @[Core.scala 230:49]
    execute.io.EX_MEM_alu_output <= EX_MEM.io.alu_output @[Core.scala 231:49]
    execute.io.writeback_write_data <= writeback.io.write_data @[Core.scala 232:49]
    execute.io.ID_EX_imm <= ID_EX.io.imm_out @[Core.scala 233:49]
    execute.io.ID_EX_ctrl_AluOp <= ID_EX.io.ctrl_AluOp_out @[Core.scala 234:49]
    execute.io.ID_EX_func7 <= ID_EX.io.func7_out @[Core.scala 235:49]
    execute.io.ID_EX_inst_op <= ID_EX.io.inst_op_out @[Core.scala 236:49]
    execute.io.ID_EX_func3 <= ID_EX.io.func3_out @[Core.scala 237:49]
    execute.io.ID_EX_rd_sel <= ID_EX.io.rd_sel_out @[Core.scala 238:49]
    execute.io.ID_EX_ctrl_MemWr <= ID_EX.io.ctrl_MemWr_out @[Core.scala 239:49]
    execute.io.ID_EX_ctrl_MemRd <= ID_EX.io.ctrl_MemRd_out @[Core.scala 240:49]
    execute.io.ID_EX_ctrl_RegWr <= ID_EX.io.ctrl_RegWr_out @[Core.scala 241:49]
    execute.io.ID_EX_ctrl_CsrWen <= ID_EX.io.ctrl_CsrWen_out @[Core.scala 242:49]
    execute.io.ID_EX_ctrl_MemToReg <= ID_EX.io.ctrl_MemToReg_out @[Core.scala 243:49]
    execute.io.ID_EX_csr_data <= ID_EX.io.csr_data_o @[Core.scala 245:49]
    EX_MEM.io.stall <= stall @[Core.scala 247:49]
    EX_MEM.io.alu_in <= execute.io.alu_output @[Core.scala 249:49]
    EX_MEM.io.rd_sel_in <= execute.io.rd_sel_out @[Core.scala 252:49]
    EX_MEM.io.rs2_sel_in <= execute.io.rs2_sel_out @[Core.scala 253:49]
    EX_MEM.io.rs2_in <= execute.io.rs2_out @[Core.scala 254:49]
    EX_MEM.io.EX_MEM_func3 <= execute.io.func3_out @[Core.scala 255:49]
    EX_MEM.io.ctrl_CsrWen_in <= execute.io.ctrl_CsrWe_out @[Core.scala 256:49]
    EX_MEM.io.csr_data_i <= execute.io.csr_data_o @[Core.scala 259:49]
    EX_MEM.io.ctrl_MemWr_in <= execute.io.ctrl_MemWr_out @[Core.scala 263:49]
    EX_MEM.io.ctrl_MemRd_in <= execute.io.ctrl_MemRd_out @[Core.scala 264:49]
    EX_MEM.io.ctrl_RegWr_in <= execute.io.ctrl_RegWr_out @[Core.scala 265:49]
    EX_MEM.io.ctrl_MemToReg_in <= execute.io.ctrl_MemToReg_out @[Core.scala 266:49]
    memory_stage.io.EX_MEM_alu_output <= EX_MEM.io.alu_output @[Core.scala 272:49]
    memory_stage.io.EX_MEM_rd_sel <= EX_MEM.io.rd_sel_out @[Core.scala 273:49]
    memory_stage.io.EX_MEM_RegWr <= EX_MEM.io.ctrl_RegWr_out @[Core.scala 274:49]
    memory_stage.io.EX_MEM_CsrWe <= EX_MEM.io.ctrl_CsrWen_out @[Core.scala 275:49]
    memory_stage.io.EX_MEM_MemRd <= EX_MEM.io.ctrl_MemRd_out @[Core.scala 276:49]
    memory_stage.io.EX_MEM_MemToReg <= EX_MEM.io.ctrl_MemToReg_out @[Core.scala 277:49]
    memory_stage.io.EX_MEM_MemWr <= EX_MEM.io.ctrl_MemWr_out @[Core.scala 278:49]
    memory_stage.io.EX_MEM_rs2 <= EX_MEM.io.rs2_out @[Core.scala 279:49]
    memory_stage.io.func3 <= EX_MEM.io.EX_MEM_func3_out @[Core.scala 280:49]
    memory_stage.io.EX_MEM_csr_data <= EX_MEM.io.csr_data_o @[Core.scala 283:49]
    memory_stage.io.data_gnt_i <= io.data_gnt_i @[Core.scala 285:49]
    memory_stage.io.data_rvalid_i <= io.data_rvalid_i @[Core.scala 286:49]
    memory_stage.io.data_rdata_i <= io.data_rdata_i @[Core.scala 287:49]
    io.data_req_o <= memory_stage.io.data_req_o @[Core.scala 288:49]
    io.data_be_o[0] <= memory_stage.io.data_be_o[0] @[Core.scala 289:49]
    io.data_be_o[1] <= memory_stage.io.data_be_o[1] @[Core.scala 289:49]
    io.data_be_o[2] <= memory_stage.io.data_be_o[2] @[Core.scala 289:49]
    io.data_be_o[3] <= memory_stage.io.data_be_o[3] @[Core.scala 289:49]
    io.data_we_o <= memory_stage.io.ctrl_MemWr_out @[Core.scala 290:49]
    io.data_wdata_o[0] <= memory_stage.io.data_wdata_o[0] @[Core.scala 291:49]
    io.data_wdata_o[1] <= memory_stage.io.data_wdata_o[1] @[Core.scala 291:49]
    io.data_wdata_o[2] <= memory_stage.io.data_wdata_o[2] @[Core.scala 291:49]
    io.data_wdata_o[3] <= memory_stage.io.data_wdata_o[3] @[Core.scala 291:49]
    io.data_addr_o <= memory_stage.io.memAddress @[Core.scala 292:49]
    MEM_WB.io.stall <= stall @[Core.scala 295:49]
    MEM_WB.io.alu_in <= memory_stage.io.alu_output @[Core.scala 296:49]
    MEM_WB.io.dmem_data_in <= memory_stage.io.data_out @[Core.scala 298:49]
    MEM_WB.io.rd_sel_in <= memory_stage.io.rd_sel_out @[Core.scala 299:49]
    MEM_WB.io.ctrl_RegWr_in <= memory_stage.io.ctrl_RegWr_out @[Core.scala 301:49]
    MEM_WB.io.ctrl_CsrWen_in <= memory_stage.io.ctrl_CsrWen_out @[Core.scala 302:49]
    MEM_WB.io.ctrl_MemRd_in <= memory_stage.io.ctrl_MemRd_out @[Core.scala 303:49]
    MEM_WB.io.ctrl_MemToReg_in <= memory_stage.io.ctrl_MemToReg_out @[Core.scala 304:49]
    MEM_WB.io.csr_data_in <= memory_stage.io.csr_data_out @[Core.scala 307:49]
    writeback.io.MEM_WB_MemToReg <= MEM_WB.io.ctrl_MemToReg_out @[Core.scala 312:49]
    writeback.io.MEM_WB_dataMem_data <= MEM_WB.io.dmem_data_out @[Core.scala 316:49]
    writeback.io.MEM_WB_alu_output <= MEM_WB.io.alu_output @[Core.scala 317:49]
    io.reg_out <= writeback.io.write_data @[Core.scala 321:49]
    io.reg_7 <= decode.io.reg_7_out @[Core.scala 323:49]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip csb_i : UInt<1>, flip we_i : UInt<1>, flip addr_i : UInt<8>, flip wdata_i : UInt<32>, rdata_o : UInt<32>}
    
    smem mem : UInt<32>[256], undefined @[InstMem.scala 17:24]
    node _T = eq(io.csb_i, UInt<1>("h00")) @[InstMem.scala 23:8]
    node _T_1 = eq(io.we_i, UInt<1>("h00")) @[InstMem.scala 23:21]
    node _T_2 = and(_T, _T_1) @[InstMem.scala 23:18]
    when _T_2 : @[InstMem.scala 23:31]
      write mport _T_3 = mem[io.addr_i], clock
      _T_3 <= io.wdata_i
      io.rdata_o is invalid @[InstMem.scala 25:16]
      skip @[InstMem.scala 23:31]
    else : @[InstMem.scala 26:37]
      node _T_4 = eq(io.csb_i, UInt<1>("h00")) @[InstMem.scala 26:15]
      node _T_5 = and(_T_4, io.we_i) @[InstMem.scala 26:25]
      when _T_5 : @[InstMem.scala 26:37]
        read mport _T_6 = mem[io.addr_i], clock @[InstMem.scala 27:27]
        io.rdata_o <= _T_6 @[InstMem.scala 27:16]
        skip @[InstMem.scala 26:37]
      else : @[InstMem.scala 28:16]
        io.rdata_o is invalid @[InstMem.scala 29:16]
        skip @[InstMem.scala 28:16]
    
  module DataMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip csb_i : UInt<1>, flip we_i : UInt<1>, flip addr_i : UInt<8>, flip wdata_i : UInt<8>[4], flip wmask_i : UInt<1>[4], rdata_o : UInt<8>[4]}
    
    smem mem : UInt<8>[4][256], undefined @[DataMem.scala 14:24]
    node _T = eq(io.csb_i, UInt<1>("h00")) @[DataMem.scala 15:8]
    node _T_1 = eq(io.we_i, UInt<1>("h00")) @[DataMem.scala 15:21]
    node _T_2 = and(_T, _T_1) @[DataMem.scala 15:18]
    when _T_2 : @[DataMem.scala 15:31]
      write mport _T_3 = mem[io.addr_i], clock
      when io.wmask_i[0] :
        _T_3[0] <= io.wdata_i[0]
        skip
      when io.wmask_i[1] :
        _T_3[1] <= io.wdata_i[1]
        skip
      when io.wmask_i[2] :
        _T_3[2] <= io.wdata_i[2]
        skip
      when io.wmask_i[3] :
        _T_3[3] <= io.wdata_i[3]
        skip
      io.rdata_o[0] is invalid @[DataMem.scala 17:16]
      io.rdata_o[1] is invalid @[DataMem.scala 17:16]
      io.rdata_o[2] is invalid @[DataMem.scala 17:16]
      io.rdata_o[3] is invalid @[DataMem.scala 17:16]
      skip @[DataMem.scala 15:31]
    else : @[DataMem.scala 18:37]
      node _T_4 = eq(io.csb_i, UInt<1>("h00")) @[DataMem.scala 18:15]
      node _T_5 = and(_T_4, io.we_i) @[DataMem.scala 18:25]
      when _T_5 : @[DataMem.scala 18:37]
        read mport _T_6 = mem[io.addr_i], clock @[DataMem.scala 19:27]
        io.rdata_o[0] <= _T_6[0] @[DataMem.scala 19:16]
        io.rdata_o[1] <= _T_6[1] @[DataMem.scala 19:16]
        io.rdata_o[2] <= _T_6[2] @[DataMem.scala 19:16]
        io.rdata_o[3] <= _T_6[3] @[DataMem.scala 19:16]
        skip @[DataMem.scala 18:37]
      else : @[DataMem.scala 20:16]
        io.rdata_o[0] is invalid @[DataMem.scala 21:16]
        io.rdata_o[1] is invalid @[DataMem.scala 21:16]
        io.rdata_o[2] is invalid @[DataMem.scala 21:16]
        io.rdata_o[3] is invalid @[DataMem.scala 21:16]
        skip @[DataMem.scala 20:16]
    
  module TL_Err : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, err_o : UInt<1>}
    
    wire opcode_allowed : UInt<1> @[TL_Err.scala 11:28]
    wire op_get : UInt<1> @[TL_Err.scala 12:20]
    wire op_partial : UInt<1> @[TL_Err.scala 13:24]
    wire op_full : UInt<1> @[TL_Err.scala 14:21]
    wire a_config_allowed : UInt<1> @[TL_Err.scala 15:30]
    node _T = and(opcode_allowed, a_config_allowed) @[TL_Err.scala 17:32]
    node _T_1 = eq(_T, UInt<1>("h00")) @[TL_Err.scala 17:15]
    io.err_o <= _T_1 @[TL_Err.scala 17:12]
    node _T_2 = eq(io.tl_i.a_opcode, UInt<3>("h04")) @[TL_Err.scala 19:30]
    op_get <= _T_2 @[TL_Err.scala 19:10]
    node _T_3 = eq(io.tl_i.a_opcode, UInt<3>("h01")) @[TL_Err.scala 20:34]
    op_partial <= _T_3 @[TL_Err.scala 20:14]
    node _T_4 = eq(io.tl_i.a_opcode, UInt<3>("h00")) @[TL_Err.scala 21:31]
    op_full <= _T_4 @[TL_Err.scala 21:11]
    node _T_5 = or(op_get, op_partial) @[TL_Err.scala 23:28]
    node _T_6 = or(_T_5, op_full) @[TL_Err.scala 23:42]
    opcode_allowed <= _T_6 @[TL_Err.scala 23:18]
    wire addr_size_chk : UInt<1> @[TL_Err.scala 28:27]
    wire mask_chk : UInt<1> @[TL_Err.scala 29:22]
    wire fulldata_chk : UInt<1> @[TL_Err.scala 30:26]
    wire mask : UInt<4> @[TL_Err.scala 32:18]
    node _T_7 = bits(io.tl_i.a_address, 1, 0) @[TL_Err.scala 33:36]
    node _T_8 = dshl(UInt<1>("h01"), _T_7) @[TL_Err.scala 33:16]
    mask <= _T_8 @[TL_Err.scala 33:8]
    addr_size_chk <= UInt<1>("h00") @[TL_Err.scala 34:17]
    mask_chk <= UInt<1>("h00") @[TL_Err.scala 35:12]
    fulldata_chk <= UInt<1>("h00") @[TL_Err.scala 36:16]
    when io.tl_i.a_valid : @[TL_Err.scala 38:25]
      node _T_9 = eq(io.tl_i.a_size, UInt<1>("h00")) @[TL_Err.scala 39:25]
      when _T_9 : @[TL_Err.scala 39:34]
        addr_size_chk <= UInt<1>("h01") @[TL_Err.scala 40:21]
        node _T_10 = not(mask) @[TL_Err.scala 41:40]
        node _T_11 = and(io.tl_i.a_mask, _T_10) @[TL_Err.scala 41:37]
        node _T_12 = orr(_T_11) @[TL_Err.scala 41:55]
        node _T_13 = not(_T_12) @[TL_Err.scala 41:19]
        mask_chk <= _T_13 @[TL_Err.scala 41:16]
        node _T_14 = and(io.tl_i.a_mask, mask) @[TL_Err.scala 42:39]
        node _T_15 = orr(_T_14) @[TL_Err.scala 42:47]
        fulldata_chk <= _T_15 @[TL_Err.scala 42:20]
        skip @[TL_Err.scala 39:34]
      else : @[TL_Err.scala 43:41]
        node _T_16 = eq(io.tl_i.a_size, UInt<1>("h01")) @[TL_Err.scala 43:32]
        when _T_16 : @[TL_Err.scala 43:41]
          node _T_17 = bits(io.tl_i.a_address, 0, 0) @[TL_Err.scala 44:43]
          node _T_18 = not(_T_17) @[TL_Err.scala 44:24]
          addr_size_chk <= _T_18 @[TL_Err.scala 44:21]
          node _T_19 = bits(io.tl_i.a_address, 1, 1) @[TL_Err.scala 45:40]
          node _T_20 = and(io.tl_i.a_mask, UInt<2>("h03")) @[TL_Err.scala 45:63]
          node _T_21 = orr(_T_20) @[TL_Err.scala 45:76]
          node _T_22 = not(_T_21) @[TL_Err.scala 45:45]
          node _T_23 = and(io.tl_i.a_mask, UInt<4>("h0c")) @[TL_Err.scala 45:100]
          node _T_24 = orr(_T_23) @[TL_Err.scala 45:113]
          node _T_25 = not(_T_24) @[TL_Err.scala 45:82]
          node _T_26 = mux(_T_19, _T_22, _T_25) @[TL_Err.scala 45:22]
          mask_chk <= _T_26 @[TL_Err.scala 45:16]
          node _T_27 = bits(io.tl_i.a_address, 1, 1) @[TL_Err.scala 46:44]
          node _T_28 = bits(io.tl_i.a_mask, 3, 2) @[TL_Err.scala 46:63]
          node _T_29 = andr(_T_28) @[TL_Err.scala 46:69]
          node _T_30 = bits(io.tl_i.a_mask, 1, 0) @[TL_Err.scala 46:89]
          node _T_31 = andr(_T_30) @[TL_Err.scala 46:95]
          node _T_32 = mux(_T_27, _T_29, _T_31) @[TL_Err.scala 46:26]
          fulldata_chk <= _T_32 @[TL_Err.scala 46:20]
          skip @[TL_Err.scala 43:41]
        else : @[TL_Err.scala 47:41]
          node _T_33 = eq(io.tl_i.a_size, UInt<2>("h02")) @[TL_Err.scala 47:32]
          when _T_33 : @[TL_Err.scala 47:41]
            node _T_34 = bits(io.tl_i.a_address, 1, 0) @[TL_Err.scala 48:43]
            node _T_35 = orr(_T_34) @[TL_Err.scala 48:61]
            node _T_36 = not(_T_35) @[TL_Err.scala 48:24]
            addr_size_chk <= _T_36 @[TL_Err.scala 48:21]
            mask_chk <= UInt<1>("h01") @[TL_Err.scala 49:16]
            node _T_37 = bits(io.tl_i.a_mask, 3, 0) @[TL_Err.scala 50:37]
            node _T_38 = andr(_T_37) @[TL_Err.scala 50:43]
            fulldata_chk <= _T_38 @[TL_Err.scala 50:20]
            skip @[TL_Err.scala 47:41]
          else : @[TL_Err.scala 51:18]
            addr_size_chk <= UInt<1>("h00") @[TL_Err.scala 52:21]
            mask_chk <= UInt<1>("h00") @[TL_Err.scala 53:16]
            fulldata_chk <= UInt<1>("h00") @[TL_Err.scala 54:20]
            skip @[TL_Err.scala 51:18]
      skip @[TL_Err.scala 38:25]
    node _T_39 = and(addr_size_chk, mask_chk) @[TL_Err.scala 58:37]
    node _T_40 = or(op_get, op_partial) @[TL_Err.scala 58:60]
    node _T_41 = or(_T_40, fulldata_chk) @[TL_Err.scala 58:74]
    node _T_42 = and(_T_39, _T_41) @[TL_Err.scala 58:49]
    a_config_allowed <= _T_42 @[TL_Err.scala 58:20]
    node _T_43 = and(opcode_allowed, a_config_allowed) @[TL_Err.scala 60:32]
    node _T_44 = not(_T_43) @[TL_Err.scala 60:15]
    io.err_o <= _T_44 @[TL_Err.scala 60:12]
    
  module TL_RegAdapter : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, tl_o : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}, re_o : UInt<1>, we_o : UInt<1>, addr_o : UInt<6>, wdata_o : UInt<32>, be_o : UInt<4>, flip rdata_i : UInt<32>, flip error_i : UInt<1>}
    
    wire a_ack : UInt<1> @[TL_RegAdapter.scala 26:19]
    wire d_ack : UInt<1> @[TL_RegAdapter.scala 27:19]
    reg rdata_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[TL_RegAdapter.scala 29:24]
    reg error : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_RegAdapter.scala 30:22]
    wire err_internal : UInt<1> @[TL_RegAdapter.scala 32:26]
    wire addr_align_err : UInt<1> @[TL_RegAdapter.scala 33:28]
    wire tl_err : UInt<1> @[TL_RegAdapter.scala 34:20]
    reg reqId : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[TL_RegAdapter.scala 36:22]
    reg reqSz : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[TL_RegAdapter.scala 37:22]
    reg respOp : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[TL_RegAdapter.scala 38:23]
    wire rd_req : UInt<1> @[TL_RegAdapter.scala 40:20]
    wire wr_req : UInt<1> @[TL_RegAdapter.scala 41:20]
    reg outstanding : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_RegAdapter.scala 43:28]
    node _T = and(io.tl_i.a_valid, io.tl_o.a_ready) @[TL_RegAdapter.scala 46:28]
    a_ack <= _T @[TL_RegAdapter.scala 46:9]
    node _T_1 = and(io.tl_o.d_valid, io.tl_i.d_ready) @[TL_RegAdapter.scala 47:28]
    d_ack <= _T_1 @[TL_RegAdapter.scala 47:9]
    node _T_2 = eq(io.tl_i.a_opcode, UInt<3>("h00")) @[TL_RegAdapter.scala 50:41]
    node _T_3 = eq(io.tl_i.a_opcode, UInt<3>("h01")) @[TL_RegAdapter.scala 50:91]
    node _T_4 = or(_T_2, _T_3) @[TL_RegAdapter.scala 50:70]
    node _T_5 = and(a_ack, _T_4) @[TL_RegAdapter.scala 50:19]
    wr_req <= _T_5 @[TL_RegAdapter.scala 50:10]
    node _T_6 = eq(io.tl_i.a_opcode, UInt<3>("h04")) @[TL_RegAdapter.scala 51:40]
    node _T_7 = and(a_ack, _T_6) @[TL_RegAdapter.scala 51:19]
    rd_req <= _T_7 @[TL_RegAdapter.scala 51:10]
    node _T_8 = eq(err_internal, UInt<1>("h00")) @[TL_RegAdapter.scala 53:24]
    node _T_9 = and(wr_req, _T_8) @[TL_RegAdapter.scala 53:21]
    io.we_o <= _T_9 @[TL_RegAdapter.scala 53:11]
    node _T_10 = eq(err_internal, UInt<1>("h00")) @[TL_RegAdapter.scala 54:24]
    node _T_11 = and(rd_req, _T_10) @[TL_RegAdapter.scala 54:21]
    io.re_o <= _T_11 @[TL_RegAdapter.scala 54:11]
    node _T_12 = bits(io.tl_i.a_address, 5, 2) @[TL_RegAdapter.scala 55:37]
    node _T_13 = cat(_T_12, UInt<2>("h00")) @[Cat.scala 29:58]
    io.addr_o <= _T_13 @[TL_RegAdapter.scala 55:13]
    io.wdata_o <= io.tl_i.a_data @[TL_RegAdapter.scala 56:14]
    io.be_o <= io.tl_i.a_mask @[TL_RegAdapter.scala 57:11]
    when a_ack : @[TL_RegAdapter.scala 60:15]
      outstanding <= UInt<1>("h01") @[TL_RegAdapter.scala 61:17]
      reqId <= io.tl_i.a_source @[TL_RegAdapter.scala 62:11]
      reqSz <= io.tl_i.a_size @[TL_RegAdapter.scala 63:11]
      node _T_14 = mux(rd_req, UInt<3>("h01"), UInt<3>("h00")) @[TL_RegAdapter.scala 64:18]
      respOp <= _T_14 @[TL_RegAdapter.scala 64:12]
      node _T_15 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
      node _T_16 = mux(err_internal, _T_15, io.rdata_i) @[TL_RegAdapter.scala 65:19]
      rdata_q <= _T_16 @[TL_RegAdapter.scala 65:13]
      node _T_17 = or(io.error_i, err_internal) @[TL_RegAdapter.scala 66:25]
      error <= _T_17 @[TL_RegAdapter.scala 66:11]
      skip @[TL_RegAdapter.scala 60:15]
    else : @[TL_RegAdapter.scala 67:22]
      when d_ack : @[TL_RegAdapter.scala 67:22]
        outstanding <= UInt<1>("h00") @[TL_RegAdapter.scala 68:17]
        skip @[TL_RegAdapter.scala 67:22]
    node _T_18 = eq(outstanding, UInt<1>("h00")) @[TL_RegAdapter.scala 71:22]
    io.tl_o.a_ready <= _T_18 @[TL_RegAdapter.scala 71:19]
    io.tl_o.d_valid <= outstanding @[TL_RegAdapter.scala 72:19]
    io.tl_o.d_opcode <= respOp @[TL_RegAdapter.scala 73:20]
    io.tl_o.d_param <= UInt<1>("h00") @[TL_RegAdapter.scala 74:19]
    io.tl_o.d_size <= reqSz @[TL_RegAdapter.scala 75:18]
    io.tl_o.d_source <= reqId @[TL_RegAdapter.scala 76:20]
    io.tl_o.d_sink <= UInt<1>("h00") @[TL_RegAdapter.scala 77:18]
    io.tl_o.d_data <= rdata_q @[TL_RegAdapter.scala 78:18]
    io.tl_o.d_error <= error @[TL_RegAdapter.scala 79:19]
    node _T_19 = or(addr_align_err, tl_err) @[TL_RegAdapter.scala 81:34]
    err_internal <= _T_19 @[TL_RegAdapter.scala 81:16]
    when wr_req : @[TL_RegAdapter.scala 83:16]
      node _T_20 = bits(io.tl_i.a_address, 1, 0) @[TL_RegAdapter.scala 84:40]
      node _T_21 = orr(_T_20) @[TL_RegAdapter.scala 84:46]
      addr_align_err <= _T_21 @[TL_RegAdapter.scala 84:20]
      skip @[TL_RegAdapter.scala 83:16]
    else : @[TL_RegAdapter.scala 85:16]
      addr_align_err <= UInt<1>("h00") @[TL_RegAdapter.scala 86:20]
      skip @[TL_RegAdapter.scala 85:16]
    inst tlErr of TL_Err @[TL_RegAdapter.scala 90:21]
    tlErr.clock <= clock
    tlErr.reset <= reset
    tlErr.io.tl_i.d_ready <= io.tl_i.d_ready @[TL_RegAdapter.scala 91:17]
    tlErr.io.tl_i.a_data <= io.tl_i.a_data @[TL_RegAdapter.scala 91:17]
    tlErr.io.tl_i.a_mask <= io.tl_i.a_mask @[TL_RegAdapter.scala 91:17]
    tlErr.io.tl_i.a_address <= io.tl_i.a_address @[TL_RegAdapter.scala 91:17]
    tlErr.io.tl_i.a_source <= io.tl_i.a_source @[TL_RegAdapter.scala 91:17]
    tlErr.io.tl_i.a_size <= io.tl_i.a_size @[TL_RegAdapter.scala 91:17]
    tlErr.io.tl_i.a_param <= io.tl_i.a_param @[TL_RegAdapter.scala 91:17]
    tlErr.io.tl_i.a_opcode <= io.tl_i.a_opcode @[TL_RegAdapter.scala 91:17]
    tlErr.io.tl_i.a_valid <= io.tl_i.a_valid @[TL_RegAdapter.scala 91:17]
    tl_err <= tlErr.io.err_o @[TL_RegAdapter.scala 92:10]
    
  module SubReg : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _T = or(io.we, io.de) @[SubReg.scala 33:20]
    wr_en <= _T @[SubReg.scala 33:11]
    node _T_1 = mux(io.de, io.d, q_reg) @[SubReg.scala 34:19]
    node _T_2 = not(io.wd) @[SubReg.scala 34:53]
    node _T_3 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_4 = mux(io.we, _T_2, _T_3) @[SubReg.scala 34:45]
    node _T_5 = and(_T_1, _T_4) @[SubReg.scala 34:40]
    wr_data <= _T_5 @[SubReg.scala 34:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _T @[SubReg.scala 27:11]
    node _T_1 = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _T_1 @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubRegExt : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<32>, flip d : UInt<32>, qe : UInt<1>, qre : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubReg_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    wr_en <= io.de @[SubReg.scala 30:11]
    wr_data <= io.d @[SubReg.scala 31:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubRegExt_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<32>, flip d : UInt<32>, qe : UInt<1>, qre : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubRegExt_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubRegExt_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubRegExt_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubRegExt_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubRegExt_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<32>, flip d : UInt<32>, qe : UInt<1>, qre : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubRegExt_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubRegExt_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubRegExt_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubRegExt_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 22:9]
    io.q <= io.wd @[SubRegExt.scala 23:8]
    io.qe <= io.we @[SubRegExt.scala 24:9]
    io.qre <= io.re @[SubRegExt.scala 25:10]
    
  module SubReg_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _T @[SubReg.scala 27:11]
    node _T_1 = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _T_1 @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _T @[SubReg.scala 27:11]
    node _T_1 = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _T_1 @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _T @[SubReg.scala 27:11]
    node _T_1 = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _T_1 @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _T @[SubReg.scala 27:11]
    node _T_1 = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _T_1 @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module GpioRegTop : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, tl_o : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}, reg2hw : {intr_state : {q : UInt<32>}, intr_enable : {q : UInt<32>}, intr_test : {q : UInt<32>, qe : UInt<1>}, direct_out : {q : UInt<32>, qe : UInt<1>}, masked_out_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_out_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, direct_oe : {q : UInt<32>, qe : UInt<1>}, masked_oe_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_oe_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, intr_ctrl_en_rising : {q : UInt<32>}, intr_ctrl_en_falling : {q : UInt<32>}, intr_ctrl_en_lvlHigh : {q : UInt<32>}, intr_ctrl_en_lvlLow : {q : UInt<32>}}, hw2reg : {intr_state : {flip d : UInt<32>, flip de : UInt<1>}, data_in : {flip d : UInt<32>, flip de : UInt<1>}, direct_out : {flip d : UInt<32>}, masked_out_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_out_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, direct_oe : {flip d : UInt<32>}, masked_oe_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_oe_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}}}
    
    wire reg_we : UInt<1> @[GpioRegTop.scala 18:39]
    wire reg_re : UInt<1> @[GpioRegTop.scala 18:39]
    wire reg_error : UInt<1> @[GpioRegTop.scala 18:39]
    wire reg_wdata : UInt<32> @[GpioRegTop.scala 19:34]
    wire reg_rdata : UInt<32> @[GpioRegTop.scala 19:34]
    wire reg_addr : UInt<6> @[GpioRegTop.scala 20:22]
    wire reg_be : UInt<4> @[GpioRegTop.scala 21:20]
    wire addr_miss : UInt<1> @[GpioRegTop.scala 23:31]
    wire wr_err : UInt<1> @[GpioRegTop.scala 23:31]
    wire reg_rdata_next : UInt<32> @[GpioRegTop.scala 24:28]
    inst tlul_regAdapter of TL_RegAdapter @[GpioRegTop.scala 26:31]
    tlul_regAdapter.clock <= clock
    tlul_regAdapter.reset <= reset
    tlul_regAdapter.io.tl_i.d_ready <= io.tl_i.d_ready @[GpioRegTop.scala 27:27]
    tlul_regAdapter.io.tl_i.a_data <= io.tl_i.a_data @[GpioRegTop.scala 27:27]
    tlul_regAdapter.io.tl_i.a_mask <= io.tl_i.a_mask @[GpioRegTop.scala 27:27]
    tlul_regAdapter.io.tl_i.a_address <= io.tl_i.a_address @[GpioRegTop.scala 27:27]
    tlul_regAdapter.io.tl_i.a_source <= io.tl_i.a_source @[GpioRegTop.scala 27:27]
    tlul_regAdapter.io.tl_i.a_size <= io.tl_i.a_size @[GpioRegTop.scala 27:27]
    tlul_regAdapter.io.tl_i.a_param <= io.tl_i.a_param @[GpioRegTop.scala 27:27]
    tlul_regAdapter.io.tl_i.a_opcode <= io.tl_i.a_opcode @[GpioRegTop.scala 27:27]
    tlul_regAdapter.io.tl_i.a_valid <= io.tl_i.a_valid @[GpioRegTop.scala 27:27]
    io.tl_o.a_ready <= tlul_regAdapter.io.tl_o.a_ready @[GpioRegTop.scala 28:11]
    io.tl_o.d_error <= tlul_regAdapter.io.tl_o.d_error @[GpioRegTop.scala 28:11]
    io.tl_o.d_data <= tlul_regAdapter.io.tl_o.d_data @[GpioRegTop.scala 28:11]
    io.tl_o.d_sink <= tlul_regAdapter.io.tl_o.d_sink @[GpioRegTop.scala 28:11]
    io.tl_o.d_source <= tlul_regAdapter.io.tl_o.d_source @[GpioRegTop.scala 28:11]
    io.tl_o.d_size <= tlul_regAdapter.io.tl_o.d_size @[GpioRegTop.scala 28:11]
    io.tl_o.d_param <= tlul_regAdapter.io.tl_o.d_param @[GpioRegTop.scala 28:11]
    io.tl_o.d_opcode <= tlul_regAdapter.io.tl_o.d_opcode @[GpioRegTop.scala 28:11]
    io.tl_o.d_valid <= tlul_regAdapter.io.tl_o.d_valid @[GpioRegTop.scala 28:11]
    reg_we <= tlul_regAdapter.io.we_o @[GpioRegTop.scala 29:10]
    reg_re <= tlul_regAdapter.io.re_o @[GpioRegTop.scala 30:10]
    reg_wdata <= tlul_regAdapter.io.wdata_o @[GpioRegTop.scala 31:13]
    reg_addr <= tlul_regAdapter.io.addr_o @[GpioRegTop.scala 32:12]
    reg_be <= tlul_regAdapter.io.be_o @[GpioRegTop.scala 33:10]
    tlul_regAdapter.io.rdata_i <= reg_rdata @[GpioRegTop.scala 34:30]
    tlul_regAdapter.io.error_i <= reg_error @[GpioRegTop.scala 35:30]
    reg_rdata <= reg_rdata_next @[GpioRegTop.scala 37:13]
    node _T = or(addr_miss, wr_err) @[GpioRegTop.scala 39:26]
    reg_error <= _T @[GpioRegTop.scala 39:13]
    wire intr_state_qs : UInt<32> @[GpioRegTop.scala 42:42]
    wire intr_state_wd : UInt<32> @[GpioRegTop.scala 42:42]
    wire intr_state_we : UInt<1> @[GpioRegTop.scala 43:27]
    wire intr_enable_qs : UInt<32> @[GpioRegTop.scala 45:44]
    wire intr_enable_wd : UInt<32> @[GpioRegTop.scala 45:44]
    wire intr_enable_we : UInt<1> @[GpioRegTop.scala 46:28]
    wire intr_test_wd : UInt<32> @[GpioRegTop.scala 48:26]
    wire intr_test_we : UInt<1> @[GpioRegTop.scala 49:26]
    wire data_in_qs : UInt<32> @[GpioRegTop.scala 51:24]
    wire direct_out_qs : UInt<32> @[GpioRegTop.scala 53:42]
    wire direct_out_wd : UInt<32> @[GpioRegTop.scala 53:42]
    wire direct_out_we : UInt<1> @[GpioRegTop.scala 54:42]
    wire direct_out_re : UInt<1> @[GpioRegTop.scala 54:42]
    wire masked_out_lower_data_qs : UInt<16> @[GpioRegTop.scala 56:90]
    wire masked_out_lower_data_wd : UInt<16> @[GpioRegTop.scala 56:90]
    wire masked_out_lower_mask_wd : UInt<16> @[GpioRegTop.scala 56:90]
    wire masked_out_lower_data_we : UInt<1> @[GpioRegTop.scala 57:90]
    wire masked_out_lower_data_re : UInt<1> @[GpioRegTop.scala 57:90]
    wire masked_out_lower_mask_we : UInt<1> @[GpioRegTop.scala 57:90]
    wire masked_out_upper_data_qs : UInt<16> @[GpioRegTop.scala 59:90]
    wire masked_out_upper_data_wd : UInt<16> @[GpioRegTop.scala 59:90]
    wire masked_out_upper_mask_wd : UInt<16> @[GpioRegTop.scala 59:90]
    wire masked_out_upper_data_we : UInt<1> @[GpioRegTop.scala 60:90]
    wire masked_out_upper_data_re : UInt<1> @[GpioRegTop.scala 60:90]
    wire masked_out_upper_mask_we : UInt<1> @[GpioRegTop.scala 60:90]
    wire direct_oe_qs : UInt<32> @[GpioRegTop.scala 62:26]
    wire direct_oe_wd : UInt<32> @[GpioRegTop.scala 63:26]
    wire direct_oe_we : UInt<1> @[GpioRegTop.scala 64:40]
    wire direct_oe_re : UInt<1> @[GpioRegTop.scala 64:40]
    wire masked_oe_lower_data_qs : UInt<16> @[GpioRegTop.scala 66:112]
    wire masked_oe_lower_data_wd : UInt<16> @[GpioRegTop.scala 66:112]
    wire masked_oe_lower_mask_wd : UInt<16> @[GpioRegTop.scala 66:112]
    wire masked_oe_lower_mask_qs : UInt<16> @[GpioRegTop.scala 66:112]
    wire masked_oe_lower_data_we : UInt<1> @[GpioRegTop.scala 67:112]
    wire masked_oe_lower_data_re : UInt<1> @[GpioRegTop.scala 67:112]
    wire masked_oe_lower_mask_we : UInt<1> @[GpioRegTop.scala 67:112]
    wire masked_oe_lower_mask_re : UInt<1> @[GpioRegTop.scala 67:112]
    wire masked_oe_upper_data_qs : UInt<16> @[GpioRegTop.scala 69:112]
    wire masked_oe_upper_data_wd : UInt<16> @[GpioRegTop.scala 69:112]
    wire masked_oe_upper_mask_wd : UInt<16> @[GpioRegTop.scala 69:112]
    wire masked_oe_upper_mask_qs : UInt<16> @[GpioRegTop.scala 69:112]
    wire masked_oe_upper_data_we : UInt<1> @[GpioRegTop.scala 70:112]
    wire masked_oe_upper_data_re : UInt<1> @[GpioRegTop.scala 70:112]
    wire masked_oe_upper_mask_we : UInt<1> @[GpioRegTop.scala 70:112]
    wire masked_oe_upper_mask_re : UInt<1> @[GpioRegTop.scala 70:112]
    wire intr_ctrl_en_rising_qs : UInt<32> @[GpioRegTop.scala 72:60]
    wire intr_ctrl_en_rising_wd : UInt<32> @[GpioRegTop.scala 72:60]
    wire intr_ctrl_en_rising_we : UInt<1> @[GpioRegTop.scala 73:36]
    wire intr_ctrl_en_falling_qs : UInt<32> @[GpioRegTop.scala 75:62]
    wire intr_ctrl_en_falling_wd : UInt<32> @[GpioRegTop.scala 75:62]
    wire intr_ctrl_en_falling_we : UInt<1> @[GpioRegTop.scala 76:37]
    wire intr_ctrl_en_lvlhigh_qs : UInt<32> @[GpioRegTop.scala 78:62]
    wire intr_ctrl_en_lvlhigh_wd : UInt<32> @[GpioRegTop.scala 78:62]
    wire intr_ctrl_en_lvlhigh_we : UInt<1> @[GpioRegTop.scala 79:37]
    wire intr_ctrl_en_lvllow_qs : UInt<32> @[GpioRegTop.scala 81:60]
    wire intr_ctrl_en_lvllow_wd : UInt<32> @[GpioRegTop.scala 81:60]
    wire intr_ctrl_en_lvllow_we : UInt<1> @[GpioRegTop.scala 82:36]
    inst intr_state_reg of SubReg @[GpioRegTop.scala 87:30]
    intr_state_reg.clock <= clock
    intr_state_reg.reset <= reset
    intr_state_reg.io.we <= intr_state_we @[GpioRegTop.scala 89:24]
    intr_state_reg.io.wd <= intr_state_wd @[GpioRegTop.scala 91:24]
    intr_state_reg.io.de <= io.hw2reg.intr_state.de @[GpioRegTop.scala 93:24]
    intr_state_reg.io.d <= io.hw2reg.intr_state.d @[GpioRegTop.scala 95:23]
    io.reg2hw.intr_state.q <= intr_state_reg.io.q @[GpioRegTop.scala 97:26]
    intr_state_qs <= intr_state_reg.io.qs @[GpioRegTop.scala 99:17]
    inst intr_enable_reg of SubReg_1 @[GpioRegTop.scala 102:31]
    intr_enable_reg.clock <= clock
    intr_enable_reg.reset <= reset
    intr_enable_reg.io.we <= intr_enable_we @[GpioRegTop.scala 103:25]
    intr_enable_reg.io.wd <= intr_enable_wd @[GpioRegTop.scala 104:25]
    intr_enable_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 105:24]
    intr_enable_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 106:25]
    io.reg2hw.intr_enable.q <= intr_enable_reg.io.q @[GpioRegTop.scala 107:27]
    intr_enable_qs <= intr_enable_reg.io.qs @[GpioRegTop.scala 108:18]
    inst intr_test_reg of SubRegExt @[GpioRegTop.scala 111:29]
    intr_test_reg.clock <= clock
    intr_test_reg.reset <= reset
    intr_test_reg.io.we <= intr_test_we @[GpioRegTop.scala 112:23]
    intr_test_reg.io.re <= UInt<1>("h00") @[GpioRegTop.scala 113:23]
    intr_test_reg.io.wd <= intr_test_wd @[GpioRegTop.scala 114:23]
    intr_test_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 115:22]
    io.reg2hw.intr_test.qe <= intr_test_reg.io.qe @[GpioRegTop.scala 116:26]
    io.reg2hw.intr_test.q <= intr_test_reg.io.q @[GpioRegTop.scala 117:25]
    inst data_in_reg of SubReg_2 @[GpioRegTop.scala 120:27]
    data_in_reg.clock <= clock
    data_in_reg.reset <= reset
    data_in_reg.io.we <= UInt<1>("h00") @[GpioRegTop.scala 121:21]
    data_in_reg.io.wd <= UInt<32>("h00") @[GpioRegTop.scala 122:21]
    data_in_reg.io.de <= io.hw2reg.data_in.de @[GpioRegTop.scala 123:21]
    data_in_reg.io.d <= io.hw2reg.data_in.d @[GpioRegTop.scala 124:20]
    data_in_qs <= data_in_reg.io.qs @[GpioRegTop.scala 125:14]
    inst direct_out_reg of SubRegExt_1 @[GpioRegTop.scala 128:30]
    direct_out_reg.clock <= clock
    direct_out_reg.reset <= reset
    direct_out_reg.io.re <= direct_out_re @[GpioRegTop.scala 129:24]
    direct_out_reg.io.we <= direct_out_we @[GpioRegTop.scala 130:24]
    direct_out_reg.io.wd <= direct_out_wd @[GpioRegTop.scala 131:24]
    direct_out_reg.io.d <= io.hw2reg.direct_out.d @[GpioRegTop.scala 132:23]
    io.reg2hw.direct_out.qe <= direct_out_reg.io.qe @[GpioRegTop.scala 133:27]
    io.reg2hw.direct_out.q <= direct_out_reg.io.q @[GpioRegTop.scala 134:26]
    direct_out_qs <= direct_out_reg.io.qs @[GpioRegTop.scala 135:17]
    inst masked_out_lower_data_reg of SubRegExt_2 @[GpioRegTop.scala 139:41]
    masked_out_lower_data_reg.clock <= clock
    masked_out_lower_data_reg.reset <= reset
    masked_out_lower_data_reg.io.re <= masked_out_lower_data_re @[GpioRegTop.scala 140:35]
    masked_out_lower_data_reg.io.we <= masked_out_lower_data_we @[GpioRegTop.scala 141:35]
    masked_out_lower_data_reg.io.wd <= masked_out_lower_data_wd @[GpioRegTop.scala 142:35]
    masked_out_lower_data_reg.io.d <= io.hw2reg.masked_out_lower.data.d @[GpioRegTop.scala 143:34]
    io.reg2hw.masked_out_lower.data.qe <= masked_out_lower_data_reg.io.qe @[GpioRegTop.scala 144:38]
    io.reg2hw.masked_out_lower.data.q <= masked_out_lower_data_reg.io.q @[GpioRegTop.scala 145:37]
    masked_out_lower_data_qs <= masked_out_lower_data_reg.io.qs @[GpioRegTop.scala 146:28]
    inst masked_out_lower_mask_reg of SubRegExt_3 @[GpioRegTop.scala 150:41]
    masked_out_lower_mask_reg.clock <= clock
    masked_out_lower_mask_reg.reset <= reset
    masked_out_lower_mask_reg.io.re <= UInt<1>("h00") @[GpioRegTop.scala 151:35]
    masked_out_lower_mask_reg.io.we <= masked_out_lower_mask_we @[GpioRegTop.scala 152:35]
    masked_out_lower_mask_reg.io.wd <= masked_out_lower_mask_wd @[GpioRegTop.scala 153:35]
    masked_out_lower_mask_reg.io.d <= io.hw2reg.masked_out_lower.mask.d @[GpioRegTop.scala 154:34]
    io.reg2hw.masked_out_lower.mask.qe <= masked_out_lower_mask_reg.io.qe @[GpioRegTop.scala 155:38]
    io.reg2hw.masked_out_lower.mask.q <= masked_out_lower_mask_reg.io.q @[GpioRegTop.scala 156:37]
    inst masked_out_upper_data_reg of SubRegExt_4 @[GpioRegTop.scala 160:41]
    masked_out_upper_data_reg.clock <= clock
    masked_out_upper_data_reg.reset <= reset
    masked_out_upper_data_reg.io.re <= masked_out_upper_data_re @[GpioRegTop.scala 161:35]
    masked_out_upper_data_reg.io.we <= masked_out_upper_data_we @[GpioRegTop.scala 162:35]
    masked_out_upper_data_reg.io.wd <= masked_out_upper_data_wd @[GpioRegTop.scala 163:35]
    masked_out_upper_data_reg.io.d <= io.hw2reg.masked_out_upper.data.d @[GpioRegTop.scala 164:34]
    io.reg2hw.masked_out_upper.data.qe <= masked_out_upper_data_reg.io.qe @[GpioRegTop.scala 165:38]
    io.reg2hw.masked_out_upper.data.q <= masked_out_upper_data_reg.io.q @[GpioRegTop.scala 166:37]
    masked_out_upper_data_qs <= masked_out_upper_data_reg.io.qs @[GpioRegTop.scala 167:28]
    inst masked_out_upper_mask_reg of SubRegExt_5 @[GpioRegTop.scala 171:41]
    masked_out_upper_mask_reg.clock <= clock
    masked_out_upper_mask_reg.reset <= reset
    masked_out_upper_mask_reg.io.re <= UInt<1>("h00") @[GpioRegTop.scala 172:35]
    masked_out_upper_mask_reg.io.we <= masked_out_upper_mask_we @[GpioRegTop.scala 173:35]
    masked_out_upper_mask_reg.io.wd <= masked_out_upper_mask_wd @[GpioRegTop.scala 174:35]
    masked_out_upper_mask_reg.io.d <= io.hw2reg.masked_out_upper.mask.d @[GpioRegTop.scala 175:34]
    io.reg2hw.masked_out_upper.mask.qe <= masked_out_upper_mask_reg.io.qe @[GpioRegTop.scala 176:38]
    io.reg2hw.masked_out_upper.mask.q <= masked_out_upper_mask_reg.io.q @[GpioRegTop.scala 177:37]
    inst direct_oe_reg of SubRegExt_6 @[GpioRegTop.scala 180:29]
    direct_oe_reg.clock <= clock
    direct_oe_reg.reset <= reset
    direct_oe_reg.io.re <= direct_oe_re @[GpioRegTop.scala 181:23]
    direct_oe_reg.io.we <= direct_oe_we @[GpioRegTop.scala 182:23]
    direct_oe_reg.io.wd <= direct_oe_wd @[GpioRegTop.scala 183:23]
    direct_oe_reg.io.d <= io.hw2reg.direct_oe.d @[GpioRegTop.scala 184:22]
    io.reg2hw.direct_oe.qe <= direct_oe_reg.io.qe @[GpioRegTop.scala 185:26]
    io.reg2hw.direct_oe.q <= direct_oe_reg.io.q @[GpioRegTop.scala 186:25]
    direct_oe_qs <= direct_oe_reg.io.qs @[GpioRegTop.scala 187:16]
    inst masked_oe_lower_data_reg of SubRegExt_7 @[GpioRegTop.scala 191:40]
    masked_oe_lower_data_reg.clock <= clock
    masked_oe_lower_data_reg.reset <= reset
    masked_oe_lower_data_reg.io.re <= masked_oe_lower_data_re @[GpioRegTop.scala 192:34]
    masked_oe_lower_data_reg.io.we <= masked_oe_lower_data_we @[GpioRegTop.scala 193:34]
    masked_oe_lower_data_reg.io.wd <= masked_oe_lower_data_wd @[GpioRegTop.scala 194:34]
    masked_oe_lower_data_reg.io.d <= io.hw2reg.masked_oe_lower.data.d @[GpioRegTop.scala 195:33]
    io.reg2hw.masked_oe_lower.data.qe <= masked_oe_lower_data_reg.io.qe @[GpioRegTop.scala 196:37]
    io.reg2hw.masked_oe_lower.data.q <= masked_oe_lower_data_reg.io.q @[GpioRegTop.scala 197:36]
    masked_oe_lower_data_qs <= masked_oe_lower_data_reg.io.qs @[GpioRegTop.scala 198:27]
    inst masked_oe_lower_mask_reg of SubRegExt_8 @[GpioRegTop.scala 202:40]
    masked_oe_lower_mask_reg.clock <= clock
    masked_oe_lower_mask_reg.reset <= reset
    masked_oe_lower_mask_reg.io.re <= masked_oe_lower_mask_re @[GpioRegTop.scala 203:34]
    masked_oe_lower_mask_reg.io.we <= masked_oe_lower_mask_we @[GpioRegTop.scala 204:34]
    masked_oe_lower_mask_reg.io.wd <= masked_oe_lower_mask_wd @[GpioRegTop.scala 205:34]
    masked_oe_lower_mask_reg.io.d <= io.hw2reg.masked_oe_lower.mask.d @[GpioRegTop.scala 206:33]
    io.reg2hw.masked_oe_lower.mask.qe <= masked_oe_lower_mask_reg.io.qe @[GpioRegTop.scala 207:37]
    io.reg2hw.masked_oe_lower.mask.q <= masked_oe_lower_mask_reg.io.q @[GpioRegTop.scala 208:36]
    masked_oe_lower_mask_qs <= masked_oe_lower_mask_reg.io.qs @[GpioRegTop.scala 209:27]
    inst masked_oe_upper_data_reg of SubRegExt_9 @[GpioRegTop.scala 213:40]
    masked_oe_upper_data_reg.clock <= clock
    masked_oe_upper_data_reg.reset <= reset
    masked_oe_upper_data_reg.io.re <= masked_oe_upper_data_re @[GpioRegTop.scala 214:34]
    masked_oe_upper_data_reg.io.we <= masked_oe_upper_data_we @[GpioRegTop.scala 215:34]
    masked_oe_upper_data_reg.io.wd <= masked_oe_upper_data_wd @[GpioRegTop.scala 216:34]
    masked_oe_upper_data_reg.io.d <= io.hw2reg.masked_oe_upper.data.d @[GpioRegTop.scala 217:33]
    io.reg2hw.masked_oe_upper.data.qe <= masked_oe_upper_data_reg.io.qe @[GpioRegTop.scala 218:37]
    io.reg2hw.masked_oe_upper.data.q <= masked_oe_upper_data_reg.io.q @[GpioRegTop.scala 219:36]
    masked_oe_upper_data_qs <= masked_oe_upper_data_reg.io.qs @[GpioRegTop.scala 220:27]
    inst masked_oe_upper_mask_reg of SubRegExt_10 @[GpioRegTop.scala 224:40]
    masked_oe_upper_mask_reg.clock <= clock
    masked_oe_upper_mask_reg.reset <= reset
    masked_oe_upper_mask_reg.io.re <= masked_oe_upper_mask_re @[GpioRegTop.scala 225:34]
    masked_oe_upper_mask_reg.io.we <= masked_oe_upper_mask_we @[GpioRegTop.scala 226:34]
    masked_oe_upper_mask_reg.io.wd <= masked_oe_upper_mask_wd @[GpioRegTop.scala 227:34]
    masked_oe_upper_mask_reg.io.d <= io.hw2reg.masked_oe_upper.mask.d @[GpioRegTop.scala 228:33]
    io.reg2hw.masked_oe_upper.mask.qe <= masked_oe_upper_mask_reg.io.qe @[GpioRegTop.scala 229:37]
    io.reg2hw.masked_oe_upper.mask.q <= masked_oe_upper_mask_reg.io.q @[GpioRegTop.scala 230:36]
    masked_oe_upper_mask_qs <= masked_oe_upper_mask_reg.io.qs @[GpioRegTop.scala 231:27]
    inst intr_ctrl_en_rising_reg of SubReg_3 @[GpioRegTop.scala 234:39]
    intr_ctrl_en_rising_reg.clock <= clock
    intr_ctrl_en_rising_reg.reset <= reset
    intr_ctrl_en_rising_reg.io.we <= intr_ctrl_en_rising_we @[GpioRegTop.scala 235:33]
    intr_ctrl_en_rising_reg.io.wd <= intr_ctrl_en_rising_wd @[GpioRegTop.scala 236:33]
    intr_ctrl_en_rising_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 237:33]
    intr_ctrl_en_rising_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 238:32]
    io.reg2hw.intr_ctrl_en_rising.q <= intr_ctrl_en_rising_reg.io.q @[GpioRegTop.scala 239:35]
    intr_ctrl_en_rising_qs <= intr_ctrl_en_rising_reg.io.qs @[GpioRegTop.scala 240:26]
    inst intr_ctrl_en_falling_reg of SubReg_4 @[GpioRegTop.scala 243:40]
    intr_ctrl_en_falling_reg.clock <= clock
    intr_ctrl_en_falling_reg.reset <= reset
    intr_ctrl_en_falling_reg.io.we <= intr_ctrl_en_falling_we @[GpioRegTop.scala 244:34]
    intr_ctrl_en_falling_reg.io.wd <= intr_ctrl_en_falling_wd @[GpioRegTop.scala 245:34]
    intr_ctrl_en_falling_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 246:34]
    intr_ctrl_en_falling_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 247:33]
    io.reg2hw.intr_ctrl_en_falling.q <= intr_ctrl_en_falling_reg.io.q @[GpioRegTop.scala 248:36]
    intr_ctrl_en_falling_qs <= intr_ctrl_en_falling_reg.io.qs @[GpioRegTop.scala 249:27]
    inst intr_ctrl_en_lvlhigh_reg of SubReg_5 @[GpioRegTop.scala 252:40]
    intr_ctrl_en_lvlhigh_reg.clock <= clock
    intr_ctrl_en_lvlhigh_reg.reset <= reset
    intr_ctrl_en_lvlhigh_reg.io.we <= intr_ctrl_en_lvlhigh_we @[GpioRegTop.scala 253:34]
    intr_ctrl_en_lvlhigh_reg.io.wd <= intr_ctrl_en_lvlhigh_wd @[GpioRegTop.scala 254:34]
    intr_ctrl_en_lvlhigh_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 255:34]
    intr_ctrl_en_lvlhigh_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 256:33]
    io.reg2hw.intr_ctrl_en_lvlHigh.q <= intr_ctrl_en_lvlhigh_reg.io.q @[GpioRegTop.scala 257:36]
    intr_ctrl_en_lvlhigh_qs <= intr_ctrl_en_lvlhigh_reg.io.qs @[GpioRegTop.scala 258:27]
    inst intr_ctrl_en_lvllow_reg of SubReg_6 @[GpioRegTop.scala 261:39]
    intr_ctrl_en_lvllow_reg.clock <= clock
    intr_ctrl_en_lvllow_reg.reset <= reset
    intr_ctrl_en_lvllow_reg.io.we <= intr_ctrl_en_lvllow_we @[GpioRegTop.scala 262:33]
    intr_ctrl_en_lvllow_reg.io.wd <= intr_ctrl_en_lvllow_wd @[GpioRegTop.scala 263:33]
    intr_ctrl_en_lvllow_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 264:33]
    intr_ctrl_en_lvllow_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 265:32]
    io.reg2hw.intr_ctrl_en_lvlLow.q <= intr_ctrl_en_lvllow_reg.io.q @[GpioRegTop.scala 266:35]
    intr_ctrl_en_lvllow_qs <= intr_ctrl_en_lvllow_reg.io.qs @[GpioRegTop.scala 267:26]
    wire addr_hit : UInt<1>[14] @[GpioRegTop.scala 269:22]
    addr_hit[0] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[1] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[2] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[3] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[4] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[5] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[6] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[7] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[8] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[9] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[10] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[11] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[12] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    addr_hit[13] <= UInt<1>("h00") @[GpioRegTop.scala 270:27]
    node _T_1 = eq(reg_addr, UInt<1>("h00")) @[GpioRegTop.scala 271:28]
    addr_hit[0] <= _T_1 @[GpioRegTop.scala 271:16]
    node _T_2 = eq(reg_addr, UInt<3>("h04")) @[GpioRegTop.scala 272:28]
    addr_hit[1] <= _T_2 @[GpioRegTop.scala 272:16]
    node _T_3 = eq(reg_addr, UInt<4>("h08")) @[GpioRegTop.scala 273:28]
    addr_hit[2] <= _T_3 @[GpioRegTop.scala 273:16]
    node _T_4 = eq(reg_addr, UInt<4>("h0c")) @[GpioRegTop.scala 274:28]
    addr_hit[3] <= _T_4 @[GpioRegTop.scala 274:16]
    node _T_5 = eq(reg_addr, UInt<5>("h010")) @[GpioRegTop.scala 275:28]
    addr_hit[4] <= _T_5 @[GpioRegTop.scala 275:16]
    node _T_6 = eq(reg_addr, UInt<5>("h014")) @[GpioRegTop.scala 276:28]
    addr_hit[5] <= _T_6 @[GpioRegTop.scala 276:16]
    node _T_7 = eq(reg_addr, UInt<5>("h018")) @[GpioRegTop.scala 277:28]
    addr_hit[6] <= _T_7 @[GpioRegTop.scala 277:16]
    node _T_8 = eq(reg_addr, UInt<5>("h01c")) @[GpioRegTop.scala 278:28]
    addr_hit[7] <= _T_8 @[GpioRegTop.scala 278:16]
    node _T_9 = eq(reg_addr, UInt<6>("h020")) @[GpioRegTop.scala 279:28]
    addr_hit[8] <= _T_9 @[GpioRegTop.scala 279:16]
    node _T_10 = eq(reg_addr, UInt<6>("h024")) @[GpioRegTop.scala 280:28]
    addr_hit[9] <= _T_10 @[GpioRegTop.scala 280:16]
    node _T_11 = eq(reg_addr, UInt<6>("h028")) @[GpioRegTop.scala 281:28]
    addr_hit[10] <= _T_11 @[GpioRegTop.scala 281:16]
    node _T_12 = eq(reg_addr, UInt<6>("h02c")) @[GpioRegTop.scala 282:28]
    addr_hit[11] <= _T_12 @[GpioRegTop.scala 282:16]
    node _T_13 = eq(reg_addr, UInt<6>("h030")) @[GpioRegTop.scala 283:28]
    addr_hit[12] <= _T_13 @[GpioRegTop.scala 283:16]
    node _T_14 = eq(reg_addr, UInt<6>("h034")) @[GpioRegTop.scala 284:28]
    addr_hit[13] <= _T_14 @[GpioRegTop.scala 284:16]
    node _T_15 = or(reg_re, reg_we) @[GpioRegTop.scala 286:27]
    node _T_16 = eq(addr_hit[0], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_17 = eq(addr_hit[1], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_18 = eq(addr_hit[2], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_19 = eq(addr_hit[3], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_20 = eq(addr_hit[4], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_21 = eq(addr_hit[5], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_22 = eq(addr_hit[6], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_23 = eq(addr_hit[7], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_24 = eq(addr_hit[8], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_25 = eq(addr_hit[9], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_26 = eq(addr_hit[10], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_27 = eq(addr_hit[11], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_28 = eq(addr_hit[12], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_29 = eq(addr_hit[13], UInt<1>("h01")) @[GpioRegTop.scala 286:56]
    node _T_30 = or(UInt<1>("h00"), _T_16) @[GpioRegTop.scala 286:56]
    node _T_31 = or(_T_30, _T_17) @[GpioRegTop.scala 286:56]
    node _T_32 = or(_T_31, _T_18) @[GpioRegTop.scala 286:56]
    node _T_33 = or(_T_32, _T_19) @[GpioRegTop.scala 286:56]
    node _T_34 = or(_T_33, _T_20) @[GpioRegTop.scala 286:56]
    node _T_35 = or(_T_34, _T_21) @[GpioRegTop.scala 286:56]
    node _T_36 = or(_T_35, _T_22) @[GpioRegTop.scala 286:56]
    node _T_37 = or(_T_36, _T_23) @[GpioRegTop.scala 286:56]
    node _T_38 = or(_T_37, _T_24) @[GpioRegTop.scala 286:56]
    node _T_39 = or(_T_38, _T_25) @[GpioRegTop.scala 286:56]
    node _T_40 = or(_T_39, _T_26) @[GpioRegTop.scala 286:56]
    node _T_41 = or(_T_40, _T_27) @[GpioRegTop.scala 286:56]
    node _T_42 = or(_T_41, _T_28) @[GpioRegTop.scala 286:56]
    node _T_43 = or(_T_42, _T_29) @[GpioRegTop.scala 286:56]
    node _T_44 = not(_T_43) @[GpioRegTop.scala 286:38]
    node _T_45 = mux(_T_15, _T_44, UInt<1>("h00")) @[GpioRegTop.scala 286:19]
    addr_miss <= _T_45 @[GpioRegTop.scala 286:13]
    wr_err <= UInt<1>("h00") @[GpioRegTop.scala 288:10]
    wire GPIO_PERMIT : UInt<4>[14] @[GpioRegTop.scala 289:25]
    GPIO_PERMIT[0] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[1] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[2] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[3] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[4] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[5] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[6] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[7] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[8] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[9] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[10] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[11] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[12] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    GPIO_PERMIT[13] <= UInt<4>("h0f") @[GpioRegTop.scala 292:20]
    node _T_46 = and(addr_hit[0], reg_we) @[GpioRegTop.scala 296:31]
    node _T_47 = and(GPIO_PERMIT[0], reg_be) @[GpioRegTop.scala 296:80]
    node _T_48 = neq(GPIO_PERMIT[0], _T_47) @[GpioRegTop.scala 296:60]
    node _T_49 = and(_T_46, _T_48) @[GpioRegTop.scala 296:41]
    node _T_50 = mux(_T_49, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_50 @[GpioRegTop.scala 296:12]
    node _T_51 = and(addr_hit[1], reg_we) @[GpioRegTop.scala 296:31]
    node _T_52 = and(GPIO_PERMIT[1], reg_be) @[GpioRegTop.scala 296:80]
    node _T_53 = neq(GPIO_PERMIT[1], _T_52) @[GpioRegTop.scala 296:60]
    node _T_54 = and(_T_51, _T_53) @[GpioRegTop.scala 296:41]
    node _T_55 = mux(_T_54, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_55 @[GpioRegTop.scala 296:12]
    node _T_56 = and(addr_hit[2], reg_we) @[GpioRegTop.scala 296:31]
    node _T_57 = and(GPIO_PERMIT[2], reg_be) @[GpioRegTop.scala 296:80]
    node _T_58 = neq(GPIO_PERMIT[2], _T_57) @[GpioRegTop.scala 296:60]
    node _T_59 = and(_T_56, _T_58) @[GpioRegTop.scala 296:41]
    node _T_60 = mux(_T_59, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_60 @[GpioRegTop.scala 296:12]
    node _T_61 = and(addr_hit[3], reg_we) @[GpioRegTop.scala 296:31]
    node _T_62 = and(GPIO_PERMIT[3], reg_be) @[GpioRegTop.scala 296:80]
    node _T_63 = neq(GPIO_PERMIT[3], _T_62) @[GpioRegTop.scala 296:60]
    node _T_64 = and(_T_61, _T_63) @[GpioRegTop.scala 296:41]
    node _T_65 = mux(_T_64, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_65 @[GpioRegTop.scala 296:12]
    node _T_66 = and(addr_hit[4], reg_we) @[GpioRegTop.scala 296:31]
    node _T_67 = and(GPIO_PERMIT[4], reg_be) @[GpioRegTop.scala 296:80]
    node _T_68 = neq(GPIO_PERMIT[4], _T_67) @[GpioRegTop.scala 296:60]
    node _T_69 = and(_T_66, _T_68) @[GpioRegTop.scala 296:41]
    node _T_70 = mux(_T_69, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_70 @[GpioRegTop.scala 296:12]
    node _T_71 = and(addr_hit[5], reg_we) @[GpioRegTop.scala 296:31]
    node _T_72 = and(GPIO_PERMIT[5], reg_be) @[GpioRegTop.scala 296:80]
    node _T_73 = neq(GPIO_PERMIT[5], _T_72) @[GpioRegTop.scala 296:60]
    node _T_74 = and(_T_71, _T_73) @[GpioRegTop.scala 296:41]
    node _T_75 = mux(_T_74, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_75 @[GpioRegTop.scala 296:12]
    node _T_76 = and(addr_hit[6], reg_we) @[GpioRegTop.scala 296:31]
    node _T_77 = and(GPIO_PERMIT[6], reg_be) @[GpioRegTop.scala 296:80]
    node _T_78 = neq(GPIO_PERMIT[6], _T_77) @[GpioRegTop.scala 296:60]
    node _T_79 = and(_T_76, _T_78) @[GpioRegTop.scala 296:41]
    node _T_80 = mux(_T_79, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_80 @[GpioRegTop.scala 296:12]
    node _T_81 = and(addr_hit[7], reg_we) @[GpioRegTop.scala 296:31]
    node _T_82 = and(GPIO_PERMIT[7], reg_be) @[GpioRegTop.scala 296:80]
    node _T_83 = neq(GPIO_PERMIT[7], _T_82) @[GpioRegTop.scala 296:60]
    node _T_84 = and(_T_81, _T_83) @[GpioRegTop.scala 296:41]
    node _T_85 = mux(_T_84, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_85 @[GpioRegTop.scala 296:12]
    node _T_86 = and(addr_hit[8], reg_we) @[GpioRegTop.scala 296:31]
    node _T_87 = and(GPIO_PERMIT[8], reg_be) @[GpioRegTop.scala 296:80]
    node _T_88 = neq(GPIO_PERMIT[8], _T_87) @[GpioRegTop.scala 296:60]
    node _T_89 = and(_T_86, _T_88) @[GpioRegTop.scala 296:41]
    node _T_90 = mux(_T_89, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_90 @[GpioRegTop.scala 296:12]
    node _T_91 = and(addr_hit[9], reg_we) @[GpioRegTop.scala 296:31]
    node _T_92 = and(GPIO_PERMIT[9], reg_be) @[GpioRegTop.scala 296:80]
    node _T_93 = neq(GPIO_PERMIT[9], _T_92) @[GpioRegTop.scala 296:60]
    node _T_94 = and(_T_91, _T_93) @[GpioRegTop.scala 296:41]
    node _T_95 = mux(_T_94, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_95 @[GpioRegTop.scala 296:12]
    node _T_96 = and(addr_hit[10], reg_we) @[GpioRegTop.scala 296:31]
    node _T_97 = and(GPIO_PERMIT[10], reg_be) @[GpioRegTop.scala 296:80]
    node _T_98 = neq(GPIO_PERMIT[10], _T_97) @[GpioRegTop.scala 296:60]
    node _T_99 = and(_T_96, _T_98) @[GpioRegTop.scala 296:41]
    node _T_100 = mux(_T_99, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_100 @[GpioRegTop.scala 296:12]
    node _T_101 = and(addr_hit[11], reg_we) @[GpioRegTop.scala 296:31]
    node _T_102 = and(GPIO_PERMIT[11], reg_be) @[GpioRegTop.scala 296:80]
    node _T_103 = neq(GPIO_PERMIT[11], _T_102) @[GpioRegTop.scala 296:60]
    node _T_104 = and(_T_101, _T_103) @[GpioRegTop.scala 296:41]
    node _T_105 = mux(_T_104, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_105 @[GpioRegTop.scala 296:12]
    node _T_106 = and(addr_hit[12], reg_we) @[GpioRegTop.scala 296:31]
    node _T_107 = and(GPIO_PERMIT[12], reg_be) @[GpioRegTop.scala 296:80]
    node _T_108 = neq(GPIO_PERMIT[12], _T_107) @[GpioRegTop.scala 296:60]
    node _T_109 = and(_T_106, _T_108) @[GpioRegTop.scala 296:41]
    node _T_110 = mux(_T_109, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_110 @[GpioRegTop.scala 296:12]
    node _T_111 = and(addr_hit[13], reg_we) @[GpioRegTop.scala 296:31]
    node _T_112 = and(GPIO_PERMIT[13], reg_be) @[GpioRegTop.scala 296:80]
    node _T_113 = neq(GPIO_PERMIT[13], _T_112) @[GpioRegTop.scala 296:60]
    node _T_114 = and(_T_111, _T_113) @[GpioRegTop.scala 296:41]
    node _T_115 = mux(_T_114, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 296:18]
    wr_err <= _T_115 @[GpioRegTop.scala 296:12]
    node _T_116 = and(addr_hit[0], reg_we) @[GpioRegTop.scala 303:32]
    node _T_117 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 303:43]
    node _T_118 = and(_T_116, _T_117) @[GpioRegTop.scala 303:41]
    intr_state_we <= _T_118 @[GpioRegTop.scala 303:17]
    intr_state_wd <= reg_wdata @[GpioRegTop.scala 304:17]
    node _T_119 = and(addr_hit[1], reg_we) @[GpioRegTop.scala 306:33]
    node _T_120 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 306:44]
    node _T_121 = and(_T_119, _T_120) @[GpioRegTop.scala 306:42]
    intr_enable_we <= _T_121 @[GpioRegTop.scala 306:18]
    intr_enable_wd <= reg_wdata @[GpioRegTop.scala 307:18]
    node _T_122 = and(addr_hit[2], reg_we) @[GpioRegTop.scala 309:31]
    node _T_123 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 309:42]
    node _T_124 = and(_T_122, _T_123) @[GpioRegTop.scala 309:40]
    intr_test_we <= _T_124 @[GpioRegTop.scala 309:16]
    intr_test_wd <= reg_wdata @[GpioRegTop.scala 310:16]
    node _T_125 = and(addr_hit[4], reg_we) @[GpioRegTop.scala 312:32]
    node _T_126 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 312:43]
    node _T_127 = and(_T_125, _T_126) @[GpioRegTop.scala 312:41]
    direct_out_we <= _T_127 @[GpioRegTop.scala 312:17]
    direct_out_wd <= reg_wdata @[GpioRegTop.scala 313:17]
    node _T_128 = and(addr_hit[4], reg_re) @[GpioRegTop.scala 314:32]
    direct_out_re <= _T_128 @[GpioRegTop.scala 314:17]
    node _T_129 = and(addr_hit[5], reg_we) @[GpioRegTop.scala 316:43]
    node _T_130 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 316:54]
    node _T_131 = and(_T_129, _T_130) @[GpioRegTop.scala 316:52]
    masked_out_lower_data_we <= _T_131 @[GpioRegTop.scala 316:28]
    node _T_132 = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 317:40]
    masked_out_lower_data_wd <= _T_132 @[GpioRegTop.scala 317:28]
    node _T_133 = and(addr_hit[5], reg_re) @[GpioRegTop.scala 318:43]
    masked_out_lower_data_re <= _T_133 @[GpioRegTop.scala 318:28]
    node _T_134 = and(addr_hit[5], reg_we) @[GpioRegTop.scala 320:43]
    node _T_135 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 320:54]
    node _T_136 = and(_T_134, _T_135) @[GpioRegTop.scala 320:52]
    masked_out_lower_mask_we <= _T_136 @[GpioRegTop.scala 320:28]
    node _T_137 = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 321:40]
    masked_out_lower_mask_wd <= _T_137 @[GpioRegTop.scala 321:28]
    node _T_138 = and(addr_hit[6], reg_we) @[GpioRegTop.scala 323:43]
    node _T_139 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 323:54]
    node _T_140 = and(_T_138, _T_139) @[GpioRegTop.scala 323:52]
    masked_out_upper_data_we <= _T_140 @[GpioRegTop.scala 323:28]
    node _T_141 = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 324:40]
    masked_out_upper_data_wd <= _T_141 @[GpioRegTop.scala 324:28]
    node _T_142 = and(addr_hit[6], reg_re) @[GpioRegTop.scala 325:43]
    masked_out_upper_data_re <= _T_142 @[GpioRegTop.scala 325:28]
    node _T_143 = and(addr_hit[6], reg_we) @[GpioRegTop.scala 327:43]
    node _T_144 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 327:54]
    node _T_145 = and(_T_143, _T_144) @[GpioRegTop.scala 327:52]
    masked_out_upper_mask_we <= _T_145 @[GpioRegTop.scala 327:28]
    node _T_146 = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 328:40]
    masked_out_upper_mask_wd <= _T_146 @[GpioRegTop.scala 328:28]
    node _T_147 = and(addr_hit[7], reg_we) @[GpioRegTop.scala 330:31]
    node _T_148 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 330:42]
    node _T_149 = and(_T_147, _T_148) @[GpioRegTop.scala 330:40]
    direct_oe_we <= _T_149 @[GpioRegTop.scala 330:16]
    direct_oe_wd <= reg_wdata @[GpioRegTop.scala 331:16]
    node _T_150 = and(addr_hit[7], reg_re) @[GpioRegTop.scala 332:31]
    direct_oe_re <= _T_150 @[GpioRegTop.scala 332:16]
    node _T_151 = and(addr_hit[8], reg_we) @[GpioRegTop.scala 334:42]
    node _T_152 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 334:53]
    node _T_153 = and(_T_151, _T_152) @[GpioRegTop.scala 334:51]
    masked_oe_lower_data_we <= _T_153 @[GpioRegTop.scala 334:27]
    node _T_154 = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 335:39]
    masked_oe_lower_data_wd <= _T_154 @[GpioRegTop.scala 335:27]
    node _T_155 = and(addr_hit[8], reg_re) @[GpioRegTop.scala 336:42]
    masked_oe_lower_data_re <= _T_155 @[GpioRegTop.scala 336:27]
    node _T_156 = and(addr_hit[8], reg_we) @[GpioRegTop.scala 338:42]
    node _T_157 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 338:53]
    node _T_158 = and(_T_156, _T_157) @[GpioRegTop.scala 338:51]
    masked_oe_lower_mask_we <= _T_158 @[GpioRegTop.scala 338:27]
    node _T_159 = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 339:39]
    masked_oe_lower_mask_wd <= _T_159 @[GpioRegTop.scala 339:27]
    node _T_160 = and(addr_hit[8], reg_re) @[GpioRegTop.scala 340:42]
    masked_oe_lower_mask_re <= _T_160 @[GpioRegTop.scala 340:27]
    node _T_161 = and(addr_hit[9], reg_we) @[GpioRegTop.scala 342:42]
    node _T_162 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 342:53]
    node _T_163 = and(_T_161, _T_162) @[GpioRegTop.scala 342:51]
    masked_oe_upper_data_we <= _T_163 @[GpioRegTop.scala 342:27]
    node _T_164 = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 343:39]
    masked_oe_upper_data_wd <= _T_164 @[GpioRegTop.scala 343:27]
    node _T_165 = and(addr_hit[9], reg_re) @[GpioRegTop.scala 344:42]
    masked_oe_upper_data_re <= _T_165 @[GpioRegTop.scala 344:27]
    node _T_166 = and(addr_hit[9], reg_we) @[GpioRegTop.scala 346:42]
    node _T_167 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 346:53]
    node _T_168 = and(_T_166, _T_167) @[GpioRegTop.scala 346:51]
    masked_oe_upper_mask_we <= _T_168 @[GpioRegTop.scala 346:27]
    node _T_169 = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 347:39]
    masked_oe_upper_mask_wd <= _T_169 @[GpioRegTop.scala 347:27]
    node _T_170 = and(addr_hit[9], reg_re) @[GpioRegTop.scala 348:42]
    masked_oe_upper_mask_re <= _T_170 @[GpioRegTop.scala 348:27]
    node _T_171 = and(addr_hit[10], reg_we) @[GpioRegTop.scala 350:42]
    node _T_172 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 350:53]
    node _T_173 = and(_T_171, _T_172) @[GpioRegTop.scala 350:51]
    intr_ctrl_en_rising_we <= _T_173 @[GpioRegTop.scala 350:26]
    intr_ctrl_en_rising_wd <= reg_wdata @[GpioRegTop.scala 351:26]
    node _T_174 = and(addr_hit[11], reg_we) @[GpioRegTop.scala 353:43]
    node _T_175 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 353:54]
    node _T_176 = and(_T_174, _T_175) @[GpioRegTop.scala 353:52]
    intr_ctrl_en_falling_we <= _T_176 @[GpioRegTop.scala 353:27]
    intr_ctrl_en_falling_wd <= reg_wdata @[GpioRegTop.scala 354:27]
    node _T_177 = and(addr_hit[12], reg_we) @[GpioRegTop.scala 356:43]
    node _T_178 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 356:54]
    node _T_179 = and(_T_177, _T_178) @[GpioRegTop.scala 356:52]
    intr_ctrl_en_lvlhigh_we <= _T_179 @[GpioRegTop.scala 356:27]
    intr_ctrl_en_lvlhigh_wd <= reg_wdata @[GpioRegTop.scala 357:27]
    node _T_180 = and(addr_hit[13], reg_we) @[GpioRegTop.scala 359:42]
    node _T_181 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 359:53]
    node _T_182 = and(_T_180, _T_181) @[GpioRegTop.scala 359:51]
    intr_ctrl_en_lvllow_we <= _T_182 @[GpioRegTop.scala 359:26]
    intr_ctrl_en_lvllow_wd <= reg_wdata @[GpioRegTop.scala 360:26]
    reg_rdata_next <= UInt<1>("h00") @[GpioRegTop.scala 362:18]
    when addr_hit[0] : @[GpioRegTop.scala 363:21]
      reg_rdata_next <= intr_state_qs @[GpioRegTop.scala 364:20]
      skip @[GpioRegTop.scala 363:21]
    else : @[GpioRegTop.scala 365:27]
      when addr_hit[1] : @[GpioRegTop.scala 365:27]
        reg_rdata_next <= intr_enable_qs @[GpioRegTop.scala 366:20]
        skip @[GpioRegTop.scala 365:27]
      else : @[GpioRegTop.scala 367:27]
        when addr_hit[2] : @[GpioRegTop.scala 367:27]
          reg_rdata_next <= UInt<1>("h00") @[GpioRegTop.scala 368:20]
          skip @[GpioRegTop.scala 367:27]
        else : @[GpioRegTop.scala 369:27]
          when addr_hit[3] : @[GpioRegTop.scala 369:27]
            reg_rdata_next <= data_in_qs @[GpioRegTop.scala 370:20]
            skip @[GpioRegTop.scala 369:27]
          else : @[GpioRegTop.scala 371:27]
            when addr_hit[4] : @[GpioRegTop.scala 371:27]
              reg_rdata_next <= direct_out_qs @[GpioRegTop.scala 372:20]
              skip @[GpioRegTop.scala 371:27]
            else : @[GpioRegTop.scala 373:27]
              when addr_hit[5] : @[GpioRegTop.scala 373:27]
                node _T_183 = cat(UInt<16>("h00"), masked_out_lower_data_qs) @[Cat.scala 29:58]
                reg_rdata_next <= _T_183 @[GpioRegTop.scala 374:20]
                skip @[GpioRegTop.scala 373:27]
              else : @[GpioRegTop.scala 375:27]
                when addr_hit[6] : @[GpioRegTop.scala 375:27]
                  node _T_184 = cat(UInt<16>("h00"), masked_out_upper_data_qs) @[Cat.scala 29:58]
                  reg_rdata_next <= _T_184 @[GpioRegTop.scala 376:20]
                  skip @[GpioRegTop.scala 375:27]
                else : @[GpioRegTop.scala 377:27]
                  when addr_hit[7] : @[GpioRegTop.scala 377:27]
                    reg_rdata_next <= direct_oe_qs @[GpioRegTop.scala 378:20]
                    skip @[GpioRegTop.scala 377:27]
                  else : @[GpioRegTop.scala 379:27]
                    when addr_hit[8] : @[GpioRegTop.scala 379:27]
                      node _T_185 = cat(masked_oe_lower_mask_qs, masked_oe_lower_data_qs) @[Cat.scala 29:58]
                      reg_rdata_next <= _T_185 @[GpioRegTop.scala 380:20]
                      skip @[GpioRegTop.scala 379:27]
                    else : @[GpioRegTop.scala 381:27]
                      when addr_hit[9] : @[GpioRegTop.scala 381:27]
                        node _T_186 = cat(masked_oe_upper_mask_qs, masked_oe_upper_data_qs) @[Cat.scala 29:58]
                        reg_rdata_next <= _T_186 @[GpioRegTop.scala 382:20]
                        skip @[GpioRegTop.scala 381:27]
                      else : @[GpioRegTop.scala 383:28]
                        when addr_hit[10] : @[GpioRegTop.scala 383:28]
                          reg_rdata_next <= intr_ctrl_en_rising_qs @[GpioRegTop.scala 384:20]
                          skip @[GpioRegTop.scala 383:28]
                        else : @[GpioRegTop.scala 385:28]
                          when addr_hit[11] : @[GpioRegTop.scala 385:28]
                            reg_rdata_next <= intr_ctrl_en_falling_qs @[GpioRegTop.scala 386:20]
                            skip @[GpioRegTop.scala 385:28]
                          else : @[GpioRegTop.scala 387:28]
                            when addr_hit[12] : @[GpioRegTop.scala 387:28]
                              reg_rdata_next <= intr_ctrl_en_lvlhigh_qs @[GpioRegTop.scala 388:20]
                              skip @[GpioRegTop.scala 387:28]
                            else : @[GpioRegTop.scala 389:28]
                              when addr_hit[13] : @[GpioRegTop.scala 389:28]
                                reg_rdata_next <= intr_ctrl_en_lvllow_qs @[GpioRegTop.scala 390:20]
                                skip @[GpioRegTop.scala 389:28]
                              else : @[GpioRegTop.scala 391:15]
                                node _T_187 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
                                reg_rdata_next <= _T_187 @[GpioRegTop.scala 392:20]
                                skip @[GpioRegTop.scala 391:15]
    
  module IntrHardware : 
    input clock : Clock
    input reset : Reset
    output io : {flip event_intr_i : UInt<32>, flip reg2hw_intr_enable_q_i : UInt<32>, flip reg2hw_intr_test_q_i : UInt<32>, flip reg2hw_intr_test_qe_i : UInt<1>, flip reg2hw_intr_state_q_i : UInt<32>, hw2reg_intr_state_de_o : UInt<1>, hw2reg_intr_state_d_o : UInt<32>, intr_o : UInt<32>}
    
    wire new_event : UInt<32> @[IntrHardware.scala 23:23]
    node _T = bits(io.reg2hw_intr_test_qe_i, 0, 0) @[Bitwise.scala 72:15]
    node _T_1 = mux(_T, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_2 = and(_T_1, io.reg2hw_intr_test_q_i) @[IntrHardware.scala 24:54]
    node _T_3 = or(_T_2, io.event_intr_i) @[IntrHardware.scala 24:80]
    new_event <= _T_3 @[IntrHardware.scala 24:13]
    node _T_4 = orr(new_event) @[IntrHardware.scala 25:45]
    io.hw2reg_intr_state_de_o <= _T_4 @[IntrHardware.scala 25:29]
    node _T_5 = or(new_event, io.reg2hw_intr_state_q_i) @[IntrHardware.scala 26:41]
    io.hw2reg_intr_state_d_o <= _T_5 @[IntrHardware.scala 26:28]
    reg _T_6 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IntrHardware.scala 29:22]
    node _T_7 = and(io.reg2hw_intr_state_q_i, io.reg2hw_intr_enable_q_i) @[IntrHardware.scala 30:37]
    _T_6 <= _T_7 @[IntrHardware.scala 30:9]
    io.intr_o <= _T_6 @[IntrHardware.scala 31:15]
    
  module Gpio : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, tl_o : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}, flip cio_gpio_i : UInt<32>, cio_gpio_o : UInt<32>, cio_gpio_en_o : UInt<32>, intr_gpio_o : UInt<32>}
    
    wire reg2hw : {intr_state : {q : UInt<32>}, intr_enable : {q : UInt<32>}, intr_test : {q : UInt<32>, qe : UInt<1>}, direct_out : {q : UInt<32>, qe : UInt<1>}, masked_out_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_out_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, direct_oe : {q : UInt<32>, qe : UInt<1>}, masked_oe_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_oe_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, intr_ctrl_en_rising : {q : UInt<32>}, intr_ctrl_en_falling : {q : UInt<32>}, intr_ctrl_en_lvlHigh : {q : UInt<32>}, intr_ctrl_en_lvlLow : {q : UInt<32>}} @[Gpio.scala 18:20]
    wire hw2reg : {intr_state : {flip d : UInt<32>, flip de : UInt<1>}, data_in : {flip d : UInt<32>, flip de : UInt<1>}, direct_out : {flip d : UInt<32>}, masked_out_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_out_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, direct_oe : {flip d : UInt<32>}, masked_oe_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_oe_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}} @[Gpio.scala 19:20]
    inst gpioRegTop of GpioRegTop @[Gpio.scala 21:26]
    gpioRegTop.clock <= clock
    gpioRegTop.reset <= reset
    gpioRegTop.io.tl_i.d_ready <= io.tl_i.d_ready @[Gpio.scala 22:22]
    gpioRegTop.io.tl_i.a_data <= io.tl_i.a_data @[Gpio.scala 22:22]
    gpioRegTop.io.tl_i.a_mask <= io.tl_i.a_mask @[Gpio.scala 22:22]
    gpioRegTop.io.tl_i.a_address <= io.tl_i.a_address @[Gpio.scala 22:22]
    gpioRegTop.io.tl_i.a_source <= io.tl_i.a_source @[Gpio.scala 22:22]
    gpioRegTop.io.tl_i.a_size <= io.tl_i.a_size @[Gpio.scala 22:22]
    gpioRegTop.io.tl_i.a_param <= io.tl_i.a_param @[Gpio.scala 22:22]
    gpioRegTop.io.tl_i.a_opcode <= io.tl_i.a_opcode @[Gpio.scala 22:22]
    gpioRegTop.io.tl_i.a_valid <= io.tl_i.a_valid @[Gpio.scala 22:22]
    io.tl_o.a_ready <= gpioRegTop.io.tl_o.a_ready @[Gpio.scala 23:11]
    io.tl_o.d_error <= gpioRegTop.io.tl_o.d_error @[Gpio.scala 23:11]
    io.tl_o.d_data <= gpioRegTop.io.tl_o.d_data @[Gpio.scala 23:11]
    io.tl_o.d_sink <= gpioRegTop.io.tl_o.d_sink @[Gpio.scala 23:11]
    io.tl_o.d_source <= gpioRegTop.io.tl_o.d_source @[Gpio.scala 23:11]
    io.tl_o.d_size <= gpioRegTop.io.tl_o.d_size @[Gpio.scala 23:11]
    io.tl_o.d_param <= gpioRegTop.io.tl_o.d_param @[Gpio.scala 23:11]
    io.tl_o.d_opcode <= gpioRegTop.io.tl_o.d_opcode @[Gpio.scala 23:11]
    io.tl_o.d_valid <= gpioRegTop.io.tl_o.d_valid @[Gpio.scala 23:11]
    reg2hw.intr_ctrl_en_lvlLow.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_lvlLow.q @[Gpio.scala 24:10]
    reg2hw.intr_ctrl_en_lvlHigh.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_lvlHigh.q @[Gpio.scala 24:10]
    reg2hw.intr_ctrl_en_falling.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_falling.q @[Gpio.scala 24:10]
    reg2hw.intr_ctrl_en_rising.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_rising.q @[Gpio.scala 24:10]
    reg2hw.masked_oe_upper.mask.qe <= gpioRegTop.io.reg2hw.masked_oe_upper.mask.qe @[Gpio.scala 24:10]
    reg2hw.masked_oe_upper.mask.q <= gpioRegTop.io.reg2hw.masked_oe_upper.mask.q @[Gpio.scala 24:10]
    reg2hw.masked_oe_upper.data.qe <= gpioRegTop.io.reg2hw.masked_oe_upper.data.qe @[Gpio.scala 24:10]
    reg2hw.masked_oe_upper.data.q <= gpioRegTop.io.reg2hw.masked_oe_upper.data.q @[Gpio.scala 24:10]
    reg2hw.masked_oe_lower.mask.qe <= gpioRegTop.io.reg2hw.masked_oe_lower.mask.qe @[Gpio.scala 24:10]
    reg2hw.masked_oe_lower.mask.q <= gpioRegTop.io.reg2hw.masked_oe_lower.mask.q @[Gpio.scala 24:10]
    reg2hw.masked_oe_lower.data.qe <= gpioRegTop.io.reg2hw.masked_oe_lower.data.qe @[Gpio.scala 24:10]
    reg2hw.masked_oe_lower.data.q <= gpioRegTop.io.reg2hw.masked_oe_lower.data.q @[Gpio.scala 24:10]
    reg2hw.direct_oe.qe <= gpioRegTop.io.reg2hw.direct_oe.qe @[Gpio.scala 24:10]
    reg2hw.direct_oe.q <= gpioRegTop.io.reg2hw.direct_oe.q @[Gpio.scala 24:10]
    reg2hw.masked_out_upper.mask.qe <= gpioRegTop.io.reg2hw.masked_out_upper.mask.qe @[Gpio.scala 24:10]
    reg2hw.masked_out_upper.mask.q <= gpioRegTop.io.reg2hw.masked_out_upper.mask.q @[Gpio.scala 24:10]
    reg2hw.masked_out_upper.data.qe <= gpioRegTop.io.reg2hw.masked_out_upper.data.qe @[Gpio.scala 24:10]
    reg2hw.masked_out_upper.data.q <= gpioRegTop.io.reg2hw.masked_out_upper.data.q @[Gpio.scala 24:10]
    reg2hw.masked_out_lower.mask.qe <= gpioRegTop.io.reg2hw.masked_out_lower.mask.qe @[Gpio.scala 24:10]
    reg2hw.masked_out_lower.mask.q <= gpioRegTop.io.reg2hw.masked_out_lower.mask.q @[Gpio.scala 24:10]
    reg2hw.masked_out_lower.data.qe <= gpioRegTop.io.reg2hw.masked_out_lower.data.qe @[Gpio.scala 24:10]
    reg2hw.masked_out_lower.data.q <= gpioRegTop.io.reg2hw.masked_out_lower.data.q @[Gpio.scala 24:10]
    reg2hw.direct_out.qe <= gpioRegTop.io.reg2hw.direct_out.qe @[Gpio.scala 24:10]
    reg2hw.direct_out.q <= gpioRegTop.io.reg2hw.direct_out.q @[Gpio.scala 24:10]
    reg2hw.intr_test.qe <= gpioRegTop.io.reg2hw.intr_test.qe @[Gpio.scala 24:10]
    reg2hw.intr_test.q <= gpioRegTop.io.reg2hw.intr_test.q @[Gpio.scala 24:10]
    reg2hw.intr_enable.q <= gpioRegTop.io.reg2hw.intr_enable.q @[Gpio.scala 24:10]
    reg2hw.intr_state.q <= gpioRegTop.io.reg2hw.intr_state.q @[Gpio.scala 24:10]
    gpioRegTop.io.hw2reg.masked_oe_upper.mask.d <= hw2reg.masked_oe_upper.mask.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.masked_oe_upper.data.d <= hw2reg.masked_oe_upper.data.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.masked_oe_lower.mask.d <= hw2reg.masked_oe_lower.mask.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.masked_oe_lower.data.d <= hw2reg.masked_oe_lower.data.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.direct_oe.d <= hw2reg.direct_oe.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.masked_out_upper.mask.d <= hw2reg.masked_out_upper.mask.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.masked_out_upper.data.d <= hw2reg.masked_out_upper.data.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.masked_out_lower.mask.d <= hw2reg.masked_out_lower.mask.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.masked_out_lower.data.d <= hw2reg.masked_out_lower.data.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.direct_out.d <= hw2reg.direct_out.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.data_in.de <= hw2reg.data_in.de @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.data_in.d <= hw2reg.data_in.d @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.intr_state.de <= hw2reg.intr_state.de @[Gpio.scala 25:24]
    gpioRegTop.io.hw2reg.intr_state.d <= hw2reg.intr_state.d @[Gpio.scala 25:24]
    reg cio_gpio_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Gpio.scala 27:27]
    reg cio_gpio_en_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Gpio.scala 28:30]
    reg data_in_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Gpio.scala 29:26]
    wire data_in_d : UInt<32> @[Gpio.scala 31:23]
    data_in_d <= io.cio_gpio_i @[Gpio.scala 32:13]
    data_in_q <= data_in_d @[Gpio.scala 33:13]
    hw2reg.data_in.de <= UInt<1>("h01") @[Gpio.scala 36:21]
    hw2reg.data_in.d <= data_in_d @[Gpio.scala 37:20]
    io.cio_gpio_o <= cio_gpio_q @[Gpio.scala 40:17]
    io.cio_gpio_en_o <= cio_gpio_en_q @[Gpio.scala 41:20]
    hw2reg.direct_out.d <= cio_gpio_q @[Gpio.scala 43:23]
    node _T = bits(cio_gpio_q, 31, 16) @[Gpio.scala 44:47]
    hw2reg.masked_out_upper.data.d <= _T @[Gpio.scala 44:34]
    hw2reg.masked_out_upper.mask.d <= UInt<16>("h00") @[Gpio.scala 45:34]
    node _T_1 = bits(cio_gpio_q, 15, 0) @[Gpio.scala 46:47]
    hw2reg.masked_out_lower.data.d <= _T_1 @[Gpio.scala 46:34]
    hw2reg.masked_out_lower.mask.d <= UInt<16>("h00") @[Gpio.scala 47:34]
    when reg2hw.direct_out.qe : @[Gpio.scala 49:30]
      cio_gpio_q <= reg2hw.direct_out.q @[Gpio.scala 50:16]
      skip @[Gpio.scala 49:30]
    else : @[Gpio.scala 51:48]
      when reg2hw.masked_out_upper.data.qe : @[Gpio.scala 51:48]
        node _T_2 = and(reg2hw.masked_out_upper.data.q, reg2hw.masked_out_upper.mask.q) @[Gpio.scala 53:39]
        node _T_3 = not(reg2hw.masked_out_upper.mask.q) @[Gpio.scala 54:10]
        node _T_4 = bits(cio_gpio_q, 31, 16) @[Gpio.scala 54:54]
        node _T_5 = and(_T_3, _T_4) @[Gpio.scala 54:42]
        node _T_6 = or(_T_2, _T_5) @[Gpio.scala 53:73]
        node _T_7 = cat(_T_6, UInt<16>("h00")) @[Cat.scala 29:58]
        cio_gpio_q <= _T_7 @[Gpio.scala 52:16]
        skip @[Gpio.scala 51:48]
      else : @[Gpio.scala 62:48]
        when reg2hw.masked_out_lower.data.qe : @[Gpio.scala 62:48]
          node _T_8 = and(reg2hw.masked_out_lower.data.q, reg2hw.masked_out_lower.mask.q) @[Gpio.scala 63:66]
          node _T_9 = not(reg2hw.masked_out_lower.mask.q) @[Gpio.scala 64:36]
          node _T_10 = bits(cio_gpio_q, 15, 0) @[Gpio.scala 64:80]
          node _T_11 = and(_T_9, _T_10) @[Gpio.scala 64:68]
          node _T_12 = or(_T_8, _T_11) @[Gpio.scala 63:100]
          node _T_13 = cat(UInt<16>("h00"), _T_12) @[Cat.scala 29:58]
          cio_gpio_q <= _T_13 @[Gpio.scala 63:16]
          skip @[Gpio.scala 62:48]
    hw2reg.direct_oe.d <= cio_gpio_en_q @[Gpio.scala 68:22]
    node _T_14 = bits(cio_gpio_en_q, 31, 16) @[Gpio.scala 69:49]
    hw2reg.masked_oe_upper.data.d <= _T_14 @[Gpio.scala 69:33]
    hw2reg.masked_oe_upper.mask.d <= UInt<16>("h00") @[Gpio.scala 70:33]
    node _T_15 = bits(cio_gpio_en_q, 15, 0) @[Gpio.scala 71:49]
    hw2reg.masked_oe_lower.data.d <= _T_15 @[Gpio.scala 71:33]
    hw2reg.masked_oe_lower.mask.d <= UInt<16>("h00") @[Gpio.scala 72:33]
    when reg2hw.direct_oe.qe : @[Gpio.scala 74:29]
      cio_gpio_en_q <= reg2hw.direct_oe.q @[Gpio.scala 75:19]
      skip @[Gpio.scala 74:29]
    else : @[Gpio.scala 76:47]
      when reg2hw.masked_oe_upper.data.qe : @[Gpio.scala 76:47]
        node _T_16 = and(reg2hw.masked_oe_upper.data.q, reg2hw.masked_oe_upper.mask.q) @[Gpio.scala 77:57]
        node _T_17 = not(reg2hw.masked_oe_upper.mask.q) @[Gpio.scala 78:28]
        node _T_18 = bits(cio_gpio_en_q, 31, 16) @[Gpio.scala 78:74]
        node _T_19 = and(_T_17, _T_18) @[Gpio.scala 78:59]
        node _T_20 = or(_T_16, _T_19) @[Gpio.scala 77:90]
        node _T_21 = cat(_T_20, UInt<16>("h00")) @[Cat.scala 29:58]
        cio_gpio_en_q <= _T_21 @[Gpio.scala 77:19]
        skip @[Gpio.scala 76:47]
      else : @[Gpio.scala 79:47]
        when reg2hw.masked_oe_lower.data.qe : @[Gpio.scala 79:47]
          node _T_22 = and(reg2hw.masked_oe_lower.data.q, reg2hw.masked_oe_lower.mask.q) @[Gpio.scala 80:68]
          node _T_23 = not(reg2hw.masked_oe_lower.mask.q) @[Gpio.scala 81:38]
          node _T_24 = bits(cio_gpio_en_q, 15, 0) @[Gpio.scala 81:84]
          node _T_25 = and(_T_23, _T_24) @[Gpio.scala 81:69]
          node _T_26 = or(_T_22, _T_25) @[Gpio.scala 80:101]
          node _T_27 = cat(UInt<16>("h00"), _T_26) @[Cat.scala 29:58]
          cio_gpio_en_q <= _T_27 @[Gpio.scala 80:19]
          skip @[Gpio.scala 79:47]
    wire event_intr_rise : UInt<32> @[Gpio.scala 84:85]
    wire event_intr_fall : UInt<32> @[Gpio.scala 84:85]
    wire event_intr_actlow : UInt<32> @[Gpio.scala 84:85]
    wire event_intr_acthigh : UInt<32> @[Gpio.scala 84:85]
    wire event_intr_combined : UInt<32> @[Gpio.scala 85:33]
    node _T_28 = not(data_in_q) @[Gpio.scala 91:23]
    node _T_29 = and(_T_28, data_in_d) @[Gpio.scala 91:34]
    node _T_30 = and(_T_29, reg2hw.intr_ctrl_en_rising.q) @[Gpio.scala 91:47]
    event_intr_rise <= _T_30 @[Gpio.scala 91:19]
    node _T_31 = not(data_in_d) @[Gpio.scala 95:35]
    node _T_32 = and(data_in_q, _T_31) @[Gpio.scala 95:33]
    node _T_33 = and(_T_32, reg2hw.intr_ctrl_en_falling.q) @[Gpio.scala 95:47]
    event_intr_fall <= _T_33 @[Gpio.scala 95:19]
    node _T_34 = and(data_in_d, reg2hw.intr_ctrl_en_lvlHigh.q) @[Gpio.scala 101:35]
    event_intr_acthigh <= _T_34 @[Gpio.scala 101:22]
    node _T_35 = not(data_in_d) @[Gpio.scala 107:24]
    node _T_36 = and(_T_35, reg2hw.intr_ctrl_en_lvlLow.q) @[Gpio.scala 107:35]
    event_intr_actlow <= _T_36 @[Gpio.scala 107:21]
    node _T_37 = or(event_intr_rise, event_intr_fall) @[Gpio.scala 109:42]
    node _T_38 = or(_T_37, event_intr_acthigh) @[Gpio.scala 109:60]
    node _T_39 = or(_T_38, event_intr_actlow) @[Gpio.scala 109:81]
    event_intr_combined <= _T_39 @[Gpio.scala 109:23]
    inst intr_hw of IntrHardware @[Gpio.scala 111:23]
    intr_hw.clock <= clock
    intr_hw.reset <= reset
    intr_hw.io.event_intr_i <= event_intr_combined @[Gpio.scala 112:27]
    intr_hw.io.reg2hw_intr_enable_q_i <= reg2hw.intr_enable.q @[Gpio.scala 113:37]
    intr_hw.io.reg2hw_intr_test_q_i <= reg2hw.intr_test.q @[Gpio.scala 114:35]
    intr_hw.io.reg2hw_intr_test_qe_i <= reg2hw.intr_test.qe @[Gpio.scala 115:36]
    intr_hw.io.reg2hw_intr_state_q_i <= reg2hw.intr_state.q @[Gpio.scala 116:36]
    hw2reg.intr_state.de <= intr_hw.io.hw2reg_intr_state_de_o @[Gpio.scala 117:24]
    hw2reg.intr_state.d <= intr_hw.io.hw2reg_intr_state_d_o @[Gpio.scala 118:23]
    io.intr_gpio_o <= intr_hw.io.intr_o @[Gpio.scala 119:18]
    
  module TL_HostAdapter : 
    input clock : Clock
    input reset : Reset
    output io : {flip req_i : UInt<1>, gnt_o : UInt<1>, flip addr_i : UInt<32>, flip we_i : UInt<1>, flip wdata_i : UInt<32>, flip be_i : UInt<4>, valid_o : UInt<1>, rdata_o : UInt<32>, err_o : UInt<1>, tl_o : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, flip tl_i : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}}
    
    node _T = asUInt(reset) @[TL_HostAdapter.scala 23:20]
    when _T : @[TL_HostAdapter.scala 23:24]
      io.tl_o.a_valid <= UInt<1>("h00") @[TL_HostAdapter.scala 24:21]
      skip @[TL_HostAdapter.scala 23:24]
    wire tl_source : UInt<4> @[TL_HostAdapter.scala 28:23]
    wire tl_be : UInt<4> @[TL_HostAdapter.scala 29:19]
    tl_source <= UInt<1>("h00") @[TL_HostAdapter.scala 31:13]
    node _T_1 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node _T_2 = mux(io.we_i, io.be_i, _T_1) @[TL_HostAdapter.scala 32:15]
    tl_be <= _T_2 @[TL_HostAdapter.scala 32:9]
    io.tl_o.a_valid <= io.req_i @[TL_HostAdapter.scala 34:19]
    node _T_3 = andr(io.be_i) @[TL_HostAdapter.scala 35:48]
    node _T_4 = mux(_T_3, UInt<3>("h00"), UInt<3>("h01")) @[TL_HostAdapter.scala 35:39]
    node _T_5 = mux(io.we_i, _T_4, UInt<3>("h04")) @[TL_HostAdapter.scala 35:26]
    io.tl_o.a_opcode <= _T_5 @[TL_HostAdapter.scala 35:20]
    io.tl_o.a_param <= UInt<1>("h00") @[TL_HostAdapter.scala 36:19]
    io.tl_o.a_size <= UInt<2>("h02") @[TL_HostAdapter.scala 37:18]
    io.tl_o.a_mask <= tl_be @[TL_HostAdapter.scala 38:18]
    io.tl_o.a_source <= tl_source @[TL_HostAdapter.scala 39:20]
    node _T_6 = bits(io.addr_i, 31, 2) @[TL_HostAdapter.scala 40:37]
    node _T_7 = cat(_T_6, UInt<2>("h00")) @[Cat.scala 29:58]
    io.tl_o.a_address <= _T_7 @[TL_HostAdapter.scala 40:21]
    io.tl_o.a_data <= io.wdata_i @[TL_HostAdapter.scala 41:18]
    io.tl_o.d_ready <= UInt<1>("h01") @[TL_HostAdapter.scala 42:19]
    io.gnt_o <= io.tl_i.a_ready @[TL_HostAdapter.scala 44:12]
    io.valid_o <= io.tl_i.d_valid @[TL_HostAdapter.scala 45:14]
    io.rdata_o <= io.tl_i.d_data @[TL_HostAdapter.scala 46:14]
    io.err_o <= io.tl_i.d_error @[TL_HostAdapter.scala 47:12]
    
  module TL_HostAdapter_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip req_i : UInt<1>, gnt_o : UInt<1>, flip addr_i : UInt<32>, flip we_i : UInt<1>, flip wdata_i : UInt<32>, flip be_i : UInt<4>, valid_o : UInt<1>, rdata_o : UInt<32>, err_o : UInt<1>, tl_o : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, flip tl_i : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}}
    
    node _T = asUInt(reset) @[TL_HostAdapter.scala 23:20]
    when _T : @[TL_HostAdapter.scala 23:24]
      io.tl_o.a_valid <= UInt<1>("h00") @[TL_HostAdapter.scala 24:21]
      skip @[TL_HostAdapter.scala 23:24]
    wire tl_source : UInt<4> @[TL_HostAdapter.scala 28:23]
    wire tl_be : UInt<4> @[TL_HostAdapter.scala 29:19]
    tl_source <= UInt<1>("h00") @[TL_HostAdapter.scala 31:13]
    node _T_1 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node _T_2 = mux(io.we_i, io.be_i, _T_1) @[TL_HostAdapter.scala 32:15]
    tl_be <= _T_2 @[TL_HostAdapter.scala 32:9]
    io.tl_o.a_valid <= io.req_i @[TL_HostAdapter.scala 34:19]
    node _T_3 = andr(io.be_i) @[TL_HostAdapter.scala 35:48]
    node _T_4 = mux(_T_3, UInt<3>("h00"), UInt<3>("h01")) @[TL_HostAdapter.scala 35:39]
    node _T_5 = mux(io.we_i, _T_4, UInt<3>("h04")) @[TL_HostAdapter.scala 35:26]
    io.tl_o.a_opcode <= _T_5 @[TL_HostAdapter.scala 35:20]
    io.tl_o.a_param <= UInt<1>("h00") @[TL_HostAdapter.scala 36:19]
    io.tl_o.a_size <= UInt<2>("h02") @[TL_HostAdapter.scala 37:18]
    io.tl_o.a_mask <= tl_be @[TL_HostAdapter.scala 38:18]
    io.tl_o.a_source <= tl_source @[TL_HostAdapter.scala 39:20]
    node _T_6 = bits(io.addr_i, 31, 2) @[TL_HostAdapter.scala 40:37]
    node _T_7 = cat(_T_6, UInt<2>("h00")) @[Cat.scala 29:58]
    io.tl_o.a_address <= _T_7 @[TL_HostAdapter.scala 40:21]
    io.tl_o.a_data <= io.wdata_i @[TL_HostAdapter.scala 41:18]
    io.tl_o.d_ready <= UInt<1>("h01") @[TL_HostAdapter.scala 42:19]
    io.gnt_o <= io.tl_i.a_ready @[TL_HostAdapter.scala 44:12]
    io.valid_o <= io.tl_i.d_valid @[TL_HostAdapter.scala 45:14]
    io.rdata_o <= io.tl_i.d_data @[TL_HostAdapter.scala 46:14]
    io.err_o <= io.tl_i.d_error @[TL_HostAdapter.scala 47:12]
    
  module TL_Err_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, err_o : UInt<1>}
    
    wire opcode_allowed : UInt<1> @[TL_Err.scala 11:28]
    wire op_get : UInt<1> @[TL_Err.scala 12:20]
    wire op_partial : UInt<1> @[TL_Err.scala 13:24]
    wire op_full : UInt<1> @[TL_Err.scala 14:21]
    wire a_config_allowed : UInt<1> @[TL_Err.scala 15:30]
    node _T = and(opcode_allowed, a_config_allowed) @[TL_Err.scala 17:32]
    node _T_1 = eq(_T, UInt<1>("h00")) @[TL_Err.scala 17:15]
    io.err_o <= _T_1 @[TL_Err.scala 17:12]
    node _T_2 = eq(io.tl_i.a_opcode, UInt<3>("h04")) @[TL_Err.scala 19:30]
    op_get <= _T_2 @[TL_Err.scala 19:10]
    node _T_3 = eq(io.tl_i.a_opcode, UInt<3>("h01")) @[TL_Err.scala 20:34]
    op_partial <= _T_3 @[TL_Err.scala 20:14]
    node _T_4 = eq(io.tl_i.a_opcode, UInt<3>("h00")) @[TL_Err.scala 21:31]
    op_full <= _T_4 @[TL_Err.scala 21:11]
    node _T_5 = or(op_get, op_partial) @[TL_Err.scala 23:28]
    node _T_6 = or(_T_5, op_full) @[TL_Err.scala 23:42]
    opcode_allowed <= _T_6 @[TL_Err.scala 23:18]
    wire addr_size_chk : UInt<1> @[TL_Err.scala 28:27]
    wire mask_chk : UInt<1> @[TL_Err.scala 29:22]
    wire fulldata_chk : UInt<1> @[TL_Err.scala 30:26]
    wire mask : UInt<4> @[TL_Err.scala 32:18]
    node _T_7 = bits(io.tl_i.a_address, 1, 0) @[TL_Err.scala 33:36]
    node _T_8 = dshl(UInt<1>("h01"), _T_7) @[TL_Err.scala 33:16]
    mask <= _T_8 @[TL_Err.scala 33:8]
    addr_size_chk <= UInt<1>("h00") @[TL_Err.scala 34:17]
    mask_chk <= UInt<1>("h00") @[TL_Err.scala 35:12]
    fulldata_chk <= UInt<1>("h00") @[TL_Err.scala 36:16]
    when io.tl_i.a_valid : @[TL_Err.scala 38:25]
      node _T_9 = eq(io.tl_i.a_size, UInt<1>("h00")) @[TL_Err.scala 39:25]
      when _T_9 : @[TL_Err.scala 39:34]
        addr_size_chk <= UInt<1>("h01") @[TL_Err.scala 40:21]
        node _T_10 = not(mask) @[TL_Err.scala 41:40]
        node _T_11 = and(io.tl_i.a_mask, _T_10) @[TL_Err.scala 41:37]
        node _T_12 = orr(_T_11) @[TL_Err.scala 41:55]
        node _T_13 = not(_T_12) @[TL_Err.scala 41:19]
        mask_chk <= _T_13 @[TL_Err.scala 41:16]
        node _T_14 = and(io.tl_i.a_mask, mask) @[TL_Err.scala 42:39]
        node _T_15 = orr(_T_14) @[TL_Err.scala 42:47]
        fulldata_chk <= _T_15 @[TL_Err.scala 42:20]
        skip @[TL_Err.scala 39:34]
      else : @[TL_Err.scala 43:41]
        node _T_16 = eq(io.tl_i.a_size, UInt<1>("h01")) @[TL_Err.scala 43:32]
        when _T_16 : @[TL_Err.scala 43:41]
          node _T_17 = bits(io.tl_i.a_address, 0, 0) @[TL_Err.scala 44:43]
          node _T_18 = not(_T_17) @[TL_Err.scala 44:24]
          addr_size_chk <= _T_18 @[TL_Err.scala 44:21]
          node _T_19 = bits(io.tl_i.a_address, 1, 1) @[TL_Err.scala 45:40]
          node _T_20 = and(io.tl_i.a_mask, UInt<2>("h03")) @[TL_Err.scala 45:63]
          node _T_21 = orr(_T_20) @[TL_Err.scala 45:76]
          node _T_22 = not(_T_21) @[TL_Err.scala 45:45]
          node _T_23 = and(io.tl_i.a_mask, UInt<4>("h0c")) @[TL_Err.scala 45:100]
          node _T_24 = orr(_T_23) @[TL_Err.scala 45:113]
          node _T_25 = not(_T_24) @[TL_Err.scala 45:82]
          node _T_26 = mux(_T_19, _T_22, _T_25) @[TL_Err.scala 45:22]
          mask_chk <= _T_26 @[TL_Err.scala 45:16]
          node _T_27 = bits(io.tl_i.a_address, 1, 1) @[TL_Err.scala 46:44]
          node _T_28 = bits(io.tl_i.a_mask, 3, 2) @[TL_Err.scala 46:63]
          node _T_29 = andr(_T_28) @[TL_Err.scala 46:69]
          node _T_30 = bits(io.tl_i.a_mask, 1, 0) @[TL_Err.scala 46:89]
          node _T_31 = andr(_T_30) @[TL_Err.scala 46:95]
          node _T_32 = mux(_T_27, _T_29, _T_31) @[TL_Err.scala 46:26]
          fulldata_chk <= _T_32 @[TL_Err.scala 46:20]
          skip @[TL_Err.scala 43:41]
        else : @[TL_Err.scala 47:41]
          node _T_33 = eq(io.tl_i.a_size, UInt<2>("h02")) @[TL_Err.scala 47:32]
          when _T_33 : @[TL_Err.scala 47:41]
            node _T_34 = bits(io.tl_i.a_address, 1, 0) @[TL_Err.scala 48:43]
            node _T_35 = orr(_T_34) @[TL_Err.scala 48:61]
            node _T_36 = not(_T_35) @[TL_Err.scala 48:24]
            addr_size_chk <= _T_36 @[TL_Err.scala 48:21]
            mask_chk <= UInt<1>("h01") @[TL_Err.scala 49:16]
            node _T_37 = bits(io.tl_i.a_mask, 3, 0) @[TL_Err.scala 50:37]
            node _T_38 = andr(_T_37) @[TL_Err.scala 50:43]
            fulldata_chk <= _T_38 @[TL_Err.scala 50:20]
            skip @[TL_Err.scala 47:41]
          else : @[TL_Err.scala 51:18]
            addr_size_chk <= UInt<1>("h00") @[TL_Err.scala 52:21]
            mask_chk <= UInt<1>("h00") @[TL_Err.scala 53:16]
            fulldata_chk <= UInt<1>("h00") @[TL_Err.scala 54:20]
            skip @[TL_Err.scala 51:18]
      skip @[TL_Err.scala 38:25]
    node _T_39 = and(addr_size_chk, mask_chk) @[TL_Err.scala 58:37]
    node _T_40 = or(op_get, op_partial) @[TL_Err.scala 58:60]
    node _T_41 = or(_T_40, fulldata_chk) @[TL_Err.scala 58:74]
    node _T_42 = and(_T_39, _T_41) @[TL_Err.scala 58:49]
    a_config_allowed <= _T_42 @[TL_Err.scala 58:20]
    node _T_43 = and(opcode_allowed, a_config_allowed) @[TL_Err.scala 60:32]
    node _T_44 = not(_T_43) @[TL_Err.scala 60:15]
    io.err_o <= _T_44 @[TL_Err.scala 60:12]
    
  module TL_SramAdapter : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, tl_o : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}, we_o : UInt<1>, addr_o : UInt<8>, wdata_o : UInt<32>, wmask_o : UInt<1>[4], flip rdata_i : UInt<32>}
    
    wire a_ack : UInt<1> @[TL_SramAdapter.scala 19:19]
    wire d_ack : UInt<1> @[TL_SramAdapter.scala 20:19]
    wire rdata : UInt<32> @[TL_SramAdapter.scala 22:19]
    wire rdata_fetch : UInt<32> @[TL_SramAdapter.scala 27:25]
    rdata_fetch <= io.rdata_i @[TL_SramAdapter.scala 28:15]
    reg error : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_SramAdapter.scala 29:22]
    wire err_internal : UInt<1> @[TL_SramAdapter.scala 31:26]
    wire addr_align_err : UInt<1> @[TL_SramAdapter.scala 32:28]
    wire tl_err : UInt<1> @[TL_SramAdapter.scala 33:20]
    reg reqId : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[TL_SramAdapter.scala 35:22]
    reg reqSz : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[TL_SramAdapter.scala 36:22]
    reg respOp : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[TL_SramAdapter.scala 37:23]
    wire rd_req : UInt<1> @[TL_SramAdapter.scala 39:20]
    wire wr_req : UInt<1> @[TL_SramAdapter.scala 40:20]
    reg outstanding : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_SramAdapter.scala 42:28]
    node _T = and(io.tl_i.a_valid, io.tl_o.a_ready) @[TL_SramAdapter.scala 45:28]
    a_ack <= _T @[TL_SramAdapter.scala 45:9]
    node _T_1 = and(io.tl_o.d_valid, io.tl_i.d_ready) @[TL_SramAdapter.scala 46:28]
    d_ack <= _T_1 @[TL_SramAdapter.scala 46:9]
    node _T_2 = eq(io.tl_i.a_opcode, UInt<3>("h00")) @[TL_SramAdapter.scala 48:41]
    node _T_3 = eq(io.tl_i.a_opcode, UInt<3>("h01")) @[TL_SramAdapter.scala 48:91]
    node _T_4 = or(_T_2, _T_3) @[TL_SramAdapter.scala 48:70]
    node _T_5 = and(a_ack, _T_4) @[TL_SramAdapter.scala 48:19]
    wr_req <= _T_5 @[TL_SramAdapter.scala 48:10]
    node _T_6 = eq(io.tl_i.a_opcode, UInt<3>("h04")) @[TL_SramAdapter.scala 49:40]
    node _T_7 = and(a_ack, _T_6) @[TL_SramAdapter.scala 49:19]
    rd_req <= _T_7 @[TL_SramAdapter.scala 49:10]
    node _T_8 = eq(err_internal, UInt<1>("h00")) @[TL_SramAdapter.scala 51:24]
    node _T_9 = and(wr_req, _T_8) @[TL_SramAdapter.scala 51:21]
    io.we_o <= _T_9 @[TL_SramAdapter.scala 51:11]
    node _T_10 = bits(io.tl_i.a_address, 7, 2) @[TL_SramAdapter.scala 52:37]
    node _T_11 = cat(_T_10, UInt<2>("h00")) @[Cat.scala 29:58]
    io.addr_o <= _T_11 @[TL_SramAdapter.scala 52:13]
    io.wdata_o <= io.tl_i.a_data @[TL_SramAdapter.scala 53:14]
    node _T_12 = bits(io.tl_i.a_mask, 0, 0) @[TL_SramAdapter.scala 55:35]
    node _T_13 = bits(_T_12, 0, 0) @[TL_SramAdapter.scala 55:45]
    io.wmask_o[0] <= _T_13 @[TL_SramAdapter.scala 55:18]
    node _T_14 = bits(io.tl_i.a_mask, 1, 1) @[TL_SramAdapter.scala 55:35]
    node _T_15 = bits(_T_14, 0, 0) @[TL_SramAdapter.scala 55:45]
    io.wmask_o[1] <= _T_15 @[TL_SramAdapter.scala 55:18]
    node _T_16 = bits(io.tl_i.a_mask, 2, 2) @[TL_SramAdapter.scala 55:35]
    node _T_17 = bits(_T_16, 0, 0) @[TL_SramAdapter.scala 55:45]
    io.wmask_o[2] <= _T_17 @[TL_SramAdapter.scala 55:18]
    node _T_18 = bits(io.tl_i.a_mask, 3, 3) @[TL_SramAdapter.scala 55:35]
    node _T_19 = bits(_T_18, 0, 0) @[TL_SramAdapter.scala 55:45]
    io.wmask_o[3] <= _T_19 @[TL_SramAdapter.scala 55:18]
    when a_ack : @[TL_SramAdapter.scala 58:15]
      outstanding <= UInt<1>("h01") @[TL_SramAdapter.scala 59:17]
      reqId <= io.tl_i.a_source @[TL_SramAdapter.scala 60:11]
      reqSz <= io.tl_i.a_size @[TL_SramAdapter.scala 61:11]
      node _T_20 = mux(rd_req, UInt<3>("h01"), UInt<3>("h00")) @[TL_SramAdapter.scala 62:18]
      respOp <= _T_20 @[TL_SramAdapter.scala 62:12]
      error <= err_internal @[TL_SramAdapter.scala 63:11]
      skip @[TL_SramAdapter.scala 58:15]
    else : @[TL_SramAdapter.scala 64:22]
      when d_ack : @[TL_SramAdapter.scala 64:22]
        outstanding <= UInt<1>("h00") @[TL_SramAdapter.scala 65:17]
        skip @[TL_SramAdapter.scala 64:22]
    node _T_21 = bits(outstanding, 0, 0) @[TL_SramAdapter.scala 68:26]
    when _T_21 : @[TL_SramAdapter.scala 68:30]
      node _T_22 = bits(error, 0, 0) @[TL_SramAdapter.scala 69:30]
      node _T_23 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
      node _T_24 = mux(_T_22, _T_23, io.rdata_i) @[TL_SramAdapter.scala 69:17]
      rdata <= _T_24 @[TL_SramAdapter.scala 69:11]
      skip @[TL_SramAdapter.scala 68:30]
    else : @[TL_SramAdapter.scala 70:16]
      rdata <= UInt<1>("h00") @[TL_SramAdapter.scala 71:11]
      skip @[TL_SramAdapter.scala 70:16]
    node _T_25 = eq(outstanding, UInt<1>("h00")) @[TL_SramAdapter.scala 74:44]
    node _T_26 = mux(UInt<1>("h01"), UInt<1>("h01"), _T_25) @[TL_SramAdapter.scala 74:25]
    io.tl_o.a_ready <= _T_26 @[TL_SramAdapter.scala 74:19]
    io.tl_o.d_valid <= outstanding @[TL_SramAdapter.scala 75:19]
    io.tl_o.d_opcode <= respOp @[TL_SramAdapter.scala 76:20]
    io.tl_o.d_param <= UInt<1>("h00") @[TL_SramAdapter.scala 77:19]
    io.tl_o.d_size <= reqSz @[TL_SramAdapter.scala 78:18]
    io.tl_o.d_source <= reqId @[TL_SramAdapter.scala 79:20]
    io.tl_o.d_sink <= UInt<1>("h00") @[TL_SramAdapter.scala 80:18]
    node _T_27 = mux(UInt<1>("h01"), rdata_fetch, rdata) @[TL_SramAdapter.scala 81:24]
    io.tl_o.d_data <= _T_27 @[TL_SramAdapter.scala 81:18]
    io.tl_o.d_error <= error @[TL_SramAdapter.scala 82:19]
    node _T_28 = or(addr_align_err, tl_err) @[TL_SramAdapter.scala 84:34]
    err_internal <= _T_28 @[TL_SramAdapter.scala 84:16]
    when wr_req : @[TL_SramAdapter.scala 86:16]
      node _T_29 = bits(io.tl_i.a_address, 1, 0) @[TL_SramAdapter.scala 87:40]
      node _T_30 = orr(_T_29) @[TL_SramAdapter.scala 87:46]
      addr_align_err <= _T_30 @[TL_SramAdapter.scala 87:20]
      skip @[TL_SramAdapter.scala 86:16]
    else : @[TL_SramAdapter.scala 88:16]
      addr_align_err <= UInt<1>("h00") @[TL_SramAdapter.scala 89:20]
      skip @[TL_SramAdapter.scala 88:16]
    inst tlErr of TL_Err_1 @[TL_SramAdapter.scala 93:21]
    tlErr.clock <= clock
    tlErr.reset <= reset
    tlErr.io.tl_i.d_ready <= io.tl_i.d_ready @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_data <= io.tl_i.a_data @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_mask <= io.tl_i.a_mask @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_address <= io.tl_i.a_address @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_source <= io.tl_i.a_source @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_size <= io.tl_i.a_size @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_param <= io.tl_i.a_param @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_opcode <= io.tl_i.a_opcode @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_valid <= io.tl_i.a_valid @[TL_SramAdapter.scala 94:17]
    tl_err <= tlErr.io.err_o @[TL_SramAdapter.scala 95:10]
    
  module TL_Err_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, err_o : UInt<1>}
    
    wire opcode_allowed : UInt<1> @[TL_Err.scala 11:28]
    wire op_get : UInt<1> @[TL_Err.scala 12:20]
    wire op_partial : UInt<1> @[TL_Err.scala 13:24]
    wire op_full : UInt<1> @[TL_Err.scala 14:21]
    wire a_config_allowed : UInt<1> @[TL_Err.scala 15:30]
    node _T = and(opcode_allowed, a_config_allowed) @[TL_Err.scala 17:32]
    node _T_1 = eq(_T, UInt<1>("h00")) @[TL_Err.scala 17:15]
    io.err_o <= _T_1 @[TL_Err.scala 17:12]
    node _T_2 = eq(io.tl_i.a_opcode, UInt<3>("h04")) @[TL_Err.scala 19:30]
    op_get <= _T_2 @[TL_Err.scala 19:10]
    node _T_3 = eq(io.tl_i.a_opcode, UInt<3>("h01")) @[TL_Err.scala 20:34]
    op_partial <= _T_3 @[TL_Err.scala 20:14]
    node _T_4 = eq(io.tl_i.a_opcode, UInt<3>("h00")) @[TL_Err.scala 21:31]
    op_full <= _T_4 @[TL_Err.scala 21:11]
    node _T_5 = or(op_get, op_partial) @[TL_Err.scala 23:28]
    node _T_6 = or(_T_5, op_full) @[TL_Err.scala 23:42]
    opcode_allowed <= _T_6 @[TL_Err.scala 23:18]
    wire addr_size_chk : UInt<1> @[TL_Err.scala 28:27]
    wire mask_chk : UInt<1> @[TL_Err.scala 29:22]
    wire fulldata_chk : UInt<1> @[TL_Err.scala 30:26]
    wire mask : UInt<4> @[TL_Err.scala 32:18]
    node _T_7 = bits(io.tl_i.a_address, 1, 0) @[TL_Err.scala 33:36]
    node _T_8 = dshl(UInt<1>("h01"), _T_7) @[TL_Err.scala 33:16]
    mask <= _T_8 @[TL_Err.scala 33:8]
    addr_size_chk <= UInt<1>("h00") @[TL_Err.scala 34:17]
    mask_chk <= UInt<1>("h00") @[TL_Err.scala 35:12]
    fulldata_chk <= UInt<1>("h00") @[TL_Err.scala 36:16]
    when io.tl_i.a_valid : @[TL_Err.scala 38:25]
      node _T_9 = eq(io.tl_i.a_size, UInt<1>("h00")) @[TL_Err.scala 39:25]
      when _T_9 : @[TL_Err.scala 39:34]
        addr_size_chk <= UInt<1>("h01") @[TL_Err.scala 40:21]
        node _T_10 = not(mask) @[TL_Err.scala 41:40]
        node _T_11 = and(io.tl_i.a_mask, _T_10) @[TL_Err.scala 41:37]
        node _T_12 = orr(_T_11) @[TL_Err.scala 41:55]
        node _T_13 = not(_T_12) @[TL_Err.scala 41:19]
        mask_chk <= _T_13 @[TL_Err.scala 41:16]
        node _T_14 = and(io.tl_i.a_mask, mask) @[TL_Err.scala 42:39]
        node _T_15 = orr(_T_14) @[TL_Err.scala 42:47]
        fulldata_chk <= _T_15 @[TL_Err.scala 42:20]
        skip @[TL_Err.scala 39:34]
      else : @[TL_Err.scala 43:41]
        node _T_16 = eq(io.tl_i.a_size, UInt<1>("h01")) @[TL_Err.scala 43:32]
        when _T_16 : @[TL_Err.scala 43:41]
          node _T_17 = bits(io.tl_i.a_address, 0, 0) @[TL_Err.scala 44:43]
          node _T_18 = not(_T_17) @[TL_Err.scala 44:24]
          addr_size_chk <= _T_18 @[TL_Err.scala 44:21]
          node _T_19 = bits(io.tl_i.a_address, 1, 1) @[TL_Err.scala 45:40]
          node _T_20 = and(io.tl_i.a_mask, UInt<2>("h03")) @[TL_Err.scala 45:63]
          node _T_21 = orr(_T_20) @[TL_Err.scala 45:76]
          node _T_22 = not(_T_21) @[TL_Err.scala 45:45]
          node _T_23 = and(io.tl_i.a_mask, UInt<4>("h0c")) @[TL_Err.scala 45:100]
          node _T_24 = orr(_T_23) @[TL_Err.scala 45:113]
          node _T_25 = not(_T_24) @[TL_Err.scala 45:82]
          node _T_26 = mux(_T_19, _T_22, _T_25) @[TL_Err.scala 45:22]
          mask_chk <= _T_26 @[TL_Err.scala 45:16]
          node _T_27 = bits(io.tl_i.a_address, 1, 1) @[TL_Err.scala 46:44]
          node _T_28 = bits(io.tl_i.a_mask, 3, 2) @[TL_Err.scala 46:63]
          node _T_29 = andr(_T_28) @[TL_Err.scala 46:69]
          node _T_30 = bits(io.tl_i.a_mask, 1, 0) @[TL_Err.scala 46:89]
          node _T_31 = andr(_T_30) @[TL_Err.scala 46:95]
          node _T_32 = mux(_T_27, _T_29, _T_31) @[TL_Err.scala 46:26]
          fulldata_chk <= _T_32 @[TL_Err.scala 46:20]
          skip @[TL_Err.scala 43:41]
        else : @[TL_Err.scala 47:41]
          node _T_33 = eq(io.tl_i.a_size, UInt<2>("h02")) @[TL_Err.scala 47:32]
          when _T_33 : @[TL_Err.scala 47:41]
            node _T_34 = bits(io.tl_i.a_address, 1, 0) @[TL_Err.scala 48:43]
            node _T_35 = orr(_T_34) @[TL_Err.scala 48:61]
            node _T_36 = not(_T_35) @[TL_Err.scala 48:24]
            addr_size_chk <= _T_36 @[TL_Err.scala 48:21]
            mask_chk <= UInt<1>("h01") @[TL_Err.scala 49:16]
            node _T_37 = bits(io.tl_i.a_mask, 3, 0) @[TL_Err.scala 50:37]
            node _T_38 = andr(_T_37) @[TL_Err.scala 50:43]
            fulldata_chk <= _T_38 @[TL_Err.scala 50:20]
            skip @[TL_Err.scala 47:41]
          else : @[TL_Err.scala 51:18]
            addr_size_chk <= UInt<1>("h00") @[TL_Err.scala 52:21]
            mask_chk <= UInt<1>("h00") @[TL_Err.scala 53:16]
            fulldata_chk <= UInt<1>("h00") @[TL_Err.scala 54:20]
            skip @[TL_Err.scala 51:18]
      skip @[TL_Err.scala 38:25]
    node _T_39 = and(addr_size_chk, mask_chk) @[TL_Err.scala 58:37]
    node _T_40 = or(op_get, op_partial) @[TL_Err.scala 58:60]
    node _T_41 = or(_T_40, fulldata_chk) @[TL_Err.scala 58:74]
    node _T_42 = and(_T_39, _T_41) @[TL_Err.scala 58:49]
    a_config_allowed <= _T_42 @[TL_Err.scala 58:20]
    node _T_43 = and(opcode_allowed, a_config_allowed) @[TL_Err.scala 60:32]
    node _T_44 = not(_T_43) @[TL_Err.scala 60:15]
    io.err_o <= _T_44 @[TL_Err.scala 60:12]
    
  module TL_SramAdapter_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, tl_o : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}, we_o : UInt<1>, addr_o : UInt<8>, wdata_o : UInt<32>, wmask_o : UInt<1>[4], flip rdata_i : UInt<32>}
    
    wire a_ack : UInt<1> @[TL_SramAdapter.scala 19:19]
    wire d_ack : UInt<1> @[TL_SramAdapter.scala 20:19]
    wire rdata : UInt<32> @[TL_SramAdapter.scala 22:19]
    wire rdata_fetch : UInt<32> @[TL_SramAdapter.scala 27:25]
    rdata_fetch <= io.rdata_i @[TL_SramAdapter.scala 28:15]
    reg error : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_SramAdapter.scala 29:22]
    wire err_internal : UInt<1> @[TL_SramAdapter.scala 31:26]
    wire addr_align_err : UInt<1> @[TL_SramAdapter.scala 32:28]
    wire tl_err : UInt<1> @[TL_SramAdapter.scala 33:20]
    reg reqId : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[TL_SramAdapter.scala 35:22]
    reg reqSz : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[TL_SramAdapter.scala 36:22]
    reg respOp : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[TL_SramAdapter.scala 37:23]
    wire rd_req : UInt<1> @[TL_SramAdapter.scala 39:20]
    wire wr_req : UInt<1> @[TL_SramAdapter.scala 40:20]
    reg outstanding : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_SramAdapter.scala 42:28]
    node _T = and(io.tl_i.a_valid, io.tl_o.a_ready) @[TL_SramAdapter.scala 45:28]
    a_ack <= _T @[TL_SramAdapter.scala 45:9]
    node _T_1 = and(io.tl_o.d_valid, io.tl_i.d_ready) @[TL_SramAdapter.scala 46:28]
    d_ack <= _T_1 @[TL_SramAdapter.scala 46:9]
    node _T_2 = eq(io.tl_i.a_opcode, UInt<3>("h00")) @[TL_SramAdapter.scala 48:41]
    node _T_3 = eq(io.tl_i.a_opcode, UInt<3>("h01")) @[TL_SramAdapter.scala 48:91]
    node _T_4 = or(_T_2, _T_3) @[TL_SramAdapter.scala 48:70]
    node _T_5 = and(a_ack, _T_4) @[TL_SramAdapter.scala 48:19]
    wr_req <= _T_5 @[TL_SramAdapter.scala 48:10]
    node _T_6 = eq(io.tl_i.a_opcode, UInt<3>("h04")) @[TL_SramAdapter.scala 49:40]
    node _T_7 = and(a_ack, _T_6) @[TL_SramAdapter.scala 49:19]
    rd_req <= _T_7 @[TL_SramAdapter.scala 49:10]
    node _T_8 = eq(err_internal, UInt<1>("h00")) @[TL_SramAdapter.scala 51:24]
    node _T_9 = and(wr_req, _T_8) @[TL_SramAdapter.scala 51:21]
    io.we_o <= _T_9 @[TL_SramAdapter.scala 51:11]
    node _T_10 = bits(io.tl_i.a_address, 7, 2) @[TL_SramAdapter.scala 52:37]
    node _T_11 = cat(_T_10, UInt<2>("h00")) @[Cat.scala 29:58]
    io.addr_o <= _T_11 @[TL_SramAdapter.scala 52:13]
    io.wdata_o <= io.tl_i.a_data @[TL_SramAdapter.scala 53:14]
    node _T_12 = bits(io.tl_i.a_mask, 0, 0) @[TL_SramAdapter.scala 55:35]
    node _T_13 = bits(_T_12, 0, 0) @[TL_SramAdapter.scala 55:45]
    io.wmask_o[0] <= _T_13 @[TL_SramAdapter.scala 55:18]
    node _T_14 = bits(io.tl_i.a_mask, 1, 1) @[TL_SramAdapter.scala 55:35]
    node _T_15 = bits(_T_14, 0, 0) @[TL_SramAdapter.scala 55:45]
    io.wmask_o[1] <= _T_15 @[TL_SramAdapter.scala 55:18]
    node _T_16 = bits(io.tl_i.a_mask, 2, 2) @[TL_SramAdapter.scala 55:35]
    node _T_17 = bits(_T_16, 0, 0) @[TL_SramAdapter.scala 55:45]
    io.wmask_o[2] <= _T_17 @[TL_SramAdapter.scala 55:18]
    node _T_18 = bits(io.tl_i.a_mask, 3, 3) @[TL_SramAdapter.scala 55:35]
    node _T_19 = bits(_T_18, 0, 0) @[TL_SramAdapter.scala 55:45]
    io.wmask_o[3] <= _T_19 @[TL_SramAdapter.scala 55:18]
    when a_ack : @[TL_SramAdapter.scala 58:15]
      outstanding <= UInt<1>("h01") @[TL_SramAdapter.scala 59:17]
      reqId <= io.tl_i.a_source @[TL_SramAdapter.scala 60:11]
      reqSz <= io.tl_i.a_size @[TL_SramAdapter.scala 61:11]
      node _T_20 = mux(rd_req, UInt<3>("h01"), UInt<3>("h00")) @[TL_SramAdapter.scala 62:18]
      respOp <= _T_20 @[TL_SramAdapter.scala 62:12]
      error <= err_internal @[TL_SramAdapter.scala 63:11]
      skip @[TL_SramAdapter.scala 58:15]
    else : @[TL_SramAdapter.scala 64:22]
      when d_ack : @[TL_SramAdapter.scala 64:22]
        outstanding <= UInt<1>("h00") @[TL_SramAdapter.scala 65:17]
        skip @[TL_SramAdapter.scala 64:22]
    node _T_21 = bits(outstanding, 0, 0) @[TL_SramAdapter.scala 68:26]
    when _T_21 : @[TL_SramAdapter.scala 68:30]
      node _T_22 = bits(error, 0, 0) @[TL_SramAdapter.scala 69:30]
      node _T_23 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
      node _T_24 = mux(_T_22, _T_23, io.rdata_i) @[TL_SramAdapter.scala 69:17]
      rdata <= _T_24 @[TL_SramAdapter.scala 69:11]
      skip @[TL_SramAdapter.scala 68:30]
    else : @[TL_SramAdapter.scala 70:16]
      rdata <= UInt<1>("h00") @[TL_SramAdapter.scala 71:11]
      skip @[TL_SramAdapter.scala 70:16]
    node _T_25 = eq(outstanding, UInt<1>("h00")) @[TL_SramAdapter.scala 74:44]
    node _T_26 = mux(UInt<1>("h00"), UInt<1>("h01"), _T_25) @[TL_SramAdapter.scala 74:25]
    io.tl_o.a_ready <= _T_26 @[TL_SramAdapter.scala 74:19]
    io.tl_o.d_valid <= outstanding @[TL_SramAdapter.scala 75:19]
    io.tl_o.d_opcode <= respOp @[TL_SramAdapter.scala 76:20]
    io.tl_o.d_param <= UInt<1>("h00") @[TL_SramAdapter.scala 77:19]
    io.tl_o.d_size <= reqSz @[TL_SramAdapter.scala 78:18]
    io.tl_o.d_source <= reqId @[TL_SramAdapter.scala 79:20]
    io.tl_o.d_sink <= UInt<1>("h00") @[TL_SramAdapter.scala 80:18]
    node _T_27 = mux(UInt<1>("h00"), rdata_fetch, rdata) @[TL_SramAdapter.scala 81:24]
    io.tl_o.d_data <= _T_27 @[TL_SramAdapter.scala 81:18]
    io.tl_o.d_error <= error @[TL_SramAdapter.scala 82:19]
    node _T_28 = or(addr_align_err, tl_err) @[TL_SramAdapter.scala 84:34]
    err_internal <= _T_28 @[TL_SramAdapter.scala 84:16]
    when wr_req : @[TL_SramAdapter.scala 86:16]
      node _T_29 = bits(io.tl_i.a_address, 1, 0) @[TL_SramAdapter.scala 87:40]
      node _T_30 = orr(_T_29) @[TL_SramAdapter.scala 87:46]
      addr_align_err <= _T_30 @[TL_SramAdapter.scala 87:20]
      skip @[TL_SramAdapter.scala 86:16]
    else : @[TL_SramAdapter.scala 88:16]
      addr_align_err <= UInt<1>("h00") @[TL_SramAdapter.scala 89:20]
      skip @[TL_SramAdapter.scala 88:16]
    inst tlErr of TL_Err_2 @[TL_SramAdapter.scala 93:21]
    tlErr.clock <= clock
    tlErr.reset <= reset
    tlErr.io.tl_i.d_ready <= io.tl_i.d_ready @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_data <= io.tl_i.a_data @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_mask <= io.tl_i.a_mask @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_address <= io.tl_i.a_address @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_source <= io.tl_i.a_source @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_size <= io.tl_i.a_size @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_param <= io.tl_i.a_param @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_opcode <= io.tl_i.a_opcode @[TL_SramAdapter.scala 94:17]
    tlErr.io.tl_i.a_valid <= io.tl_i.a_valid @[TL_SramAdapter.scala 94:17]
    tl_err <= tlErr.io.err_o @[TL_SramAdapter.scala 95:10]
    
  module TL_ErrResp : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_h_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, tl_d_o : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}}
    
    reg err_opcode : UInt<3>, clock with : (reset => (reset, UInt<3>("h04"))) @[TL_ErrResp.scala 12:27]
    reg err_source : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_ErrResp.scala 13:27]
    reg err_size : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_ErrResp.scala 14:25]
    reg err_reqPending : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_ErrResp.scala 15:31]
    reg err_rspPending : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TL_ErrResp.scala 16:31]
    node _T = and(io.tl_h_i.a_valid, io.tl_d_o.a_ready) @[TL_ErrResp.scala 18:26]
    when _T : @[TL_ErrResp.scala 18:48]
      err_reqPending <= UInt<1>("h01") @[TL_ErrResp.scala 21:20]
      err_source <= io.tl_h_i.a_source @[TL_ErrResp.scala 22:16]
      err_opcode <= io.tl_h_i.a_opcode @[TL_ErrResp.scala 23:16]
      err_size <= io.tl_h_i.a_size @[TL_ErrResp.scala 24:14]
      skip @[TL_ErrResp.scala 18:48]
    else : @[TL_ErrResp.scala 25:32]
      node _T_1 = eq(err_rspPending, UInt<1>("h00")) @[TL_ErrResp.scala 25:15]
      when _T_1 : @[TL_ErrResp.scala 25:32]
        err_reqPending <= UInt<1>("h00") @[TL_ErrResp.scala 27:20]
        skip @[TL_ErrResp.scala 25:32]
    node _T_2 = or(err_reqPending, err_rspPending) @[TL_ErrResp.scala 30:24]
    node _T_3 = eq(io.tl_h_i.d_ready, UInt<1>("h00")) @[TL_ErrResp.scala 30:46]
    node _T_4 = and(_T_2, _T_3) @[TL_ErrResp.scala 30:43]
    when _T_4 : @[TL_ErrResp.scala 30:66]
      err_rspPending <= UInt<1>("h01") @[TL_ErrResp.scala 33:20]
      skip @[TL_ErrResp.scala 30:66]
    else : @[TL_ErrResp.scala 34:16]
      err_rspPending <= UInt<1>("h00") @[TL_ErrResp.scala 35:20]
      skip @[TL_ErrResp.scala 34:16]
    node _T_5 = not(err_rspPending) @[TL_ErrResp.scala 38:24]
    node _T_6 = not(io.tl_h_i.d_ready) @[TL_ErrResp.scala 38:61]
    node _T_7 = and(err_reqPending, _T_6) @[TL_ErrResp.scala 38:59]
    node _T_8 = not(_T_7) @[TL_ErrResp.scala 38:42]
    node _T_9 = and(_T_5, _T_8) @[TL_ErrResp.scala 38:40]
    io.tl_d_o.a_ready <= _T_9 @[TL_ErrResp.scala 38:21]
    node _T_10 = or(err_reqPending, err_rspPending) @[TL_ErrResp.scala 39:39]
    io.tl_d_o.d_valid <= _T_10 @[TL_ErrResp.scala 39:21]
    node _T_11 = cat(UInt<4>("h0f"), UInt<4>("h0f")) @[Cat.scala 29:58]
    node _T_12 = cat(_T_11, _T_11) @[Cat.scala 29:58]
    node _T_13 = cat(_T_12, _T_12) @[Cat.scala 29:58]
    io.tl_d_o.d_data <= _T_13 @[TL_ErrResp.scala 40:20]
    io.tl_d_o.d_source <= err_source @[TL_ErrResp.scala 41:22]
    io.tl_d_o.d_sink <= UInt<1>("h00") @[TL_ErrResp.scala 42:20]
    io.tl_d_o.d_param <= UInt<1>("h00") @[TL_ErrResp.scala 43:21]
    io.tl_d_o.d_size <= err_size @[TL_ErrResp.scala 44:20]
    node _T_14 = eq(err_opcode, UInt<3>("h04")) @[TL_ErrResp.scala 45:40]
    node _T_15 = mux(_T_14, UInt<3>("h01"), UInt<3>("h00")) @[TL_ErrResp.scala 45:28]
    io.tl_d_o.d_opcode <= _T_15 @[TL_ErrResp.scala 45:22]
    io.tl_d_o.d_error <= UInt<1>("h01") @[TL_ErrResp.scala 46:21]
    
  module TLSocket1_N : 
    input clock : Clock
    input reset : Reset
    output io : {flip tl_h_i : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}, tl_h_o : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}, tl_d_o : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>}[2], flip tl_d_i : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>}[2], flip dev_sel : UInt<2>}
    
    wire tl_err_h_o : {a_valid : UInt<1>, a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<4>, a_address : UInt<32>, a_mask : UInt<4>, a_data : UInt<32>, d_ready : UInt<1>} @[TLSocket1_N.scala 19:24]
    wire tl_err_d_i : {d_valid : UInt<1>, d_opcode : UInt<3>, d_param : UInt<3>, d_size : UInt<2>, d_source : UInt<4>, d_sink : UInt<1>, d_data : UInt<32>, d_error : UInt<1>, a_ready : UInt<1>} @[TLSocket1_N.scala 21:24]
    io.tl_h_o.a_ready <= tl_err_d_i.a_ready @[TLSocket1_N.scala 26:13]
    io.tl_h_o.d_error <= tl_err_d_i.d_error @[TLSocket1_N.scala 26:13]
    io.tl_h_o.d_data <= tl_err_d_i.d_data @[TLSocket1_N.scala 26:13]
    io.tl_h_o.d_sink <= tl_err_d_i.d_sink @[TLSocket1_N.scala 26:13]
    io.tl_h_o.d_source <= tl_err_d_i.d_source @[TLSocket1_N.scala 26:13]
    io.tl_h_o.d_size <= tl_err_d_i.d_size @[TLSocket1_N.scala 26:13]
    io.tl_h_o.d_param <= tl_err_d_i.d_param @[TLSocket1_N.scala 26:13]
    io.tl_h_o.d_opcode <= tl_err_d_i.d_opcode @[TLSocket1_N.scala 26:13]
    io.tl_h_o.d_valid <= tl_err_d_i.d_valid @[TLSocket1_N.scala 26:13]
    node _T = eq(io.dev_sel, UInt<1>("h00")) @[TLSocket1_N.scala 29:62]
    node _T_1 = and(io.tl_h_i.a_valid, _T) @[TLSocket1_N.scala 29:47]
    io.tl_d_o[0].a_valid <= _T_1 @[TLSocket1_N.scala 29:26]
    io.tl_d_o[0].a_opcode <= io.tl_h_i.a_opcode @[TLSocket1_N.scala 30:27]
    io.tl_d_o[0].a_param <= io.tl_h_i.a_param @[TLSocket1_N.scala 31:26]
    io.tl_d_o[0].a_size <= io.tl_h_i.a_size @[TLSocket1_N.scala 32:25]
    io.tl_d_o[0].a_source <= io.tl_h_i.a_source @[TLSocket1_N.scala 33:27]
    io.tl_d_o[0].a_address <= io.tl_h_i.a_address @[TLSocket1_N.scala 34:28]
    io.tl_d_o[0].a_mask <= io.tl_h_i.a_mask @[TLSocket1_N.scala 35:25]
    io.tl_d_o[0].a_data <= io.tl_h_i.a_data @[TLSocket1_N.scala 36:25]
    io.tl_d_o[0].d_ready <= io.tl_h_i.d_ready @[TLSocket1_N.scala 37:26]
    node _T_2 = eq(io.dev_sel, UInt<1>("h01")) @[TLSocket1_N.scala 29:62]
    node _T_3 = and(io.tl_h_i.a_valid, _T_2) @[TLSocket1_N.scala 29:47]
    io.tl_d_o[1].a_valid <= _T_3 @[TLSocket1_N.scala 29:26]
    io.tl_d_o[1].a_opcode <= io.tl_h_i.a_opcode @[TLSocket1_N.scala 30:27]
    io.tl_d_o[1].a_param <= io.tl_h_i.a_param @[TLSocket1_N.scala 31:26]
    io.tl_d_o[1].a_size <= io.tl_h_i.a_size @[TLSocket1_N.scala 32:25]
    io.tl_d_o[1].a_source <= io.tl_h_i.a_source @[TLSocket1_N.scala 33:27]
    io.tl_d_o[1].a_address <= io.tl_h_i.a_address @[TLSocket1_N.scala 34:28]
    io.tl_d_o[1].a_mask <= io.tl_h_i.a_mask @[TLSocket1_N.scala 35:25]
    io.tl_d_o[1].a_data <= io.tl_h_i.a_data @[TLSocket1_N.scala 36:25]
    io.tl_d_o[1].d_ready <= io.tl_h_i.d_ready @[TLSocket1_N.scala 37:26]
    node _T_4 = eq(io.dev_sel, UInt<1>("h00")) @[TLSocket1_N.scala 46:21]
    when _T_4 : @[TLSocket1_N.scala 46:36]
      io.tl_h_o.a_ready <= io.tl_d_i[0].a_ready @[TLSocket1_N.scala 48:25]
      io.tl_h_o.d_valid <= io.tl_d_i[0].d_valid @[TLSocket1_N.scala 49:25]
      io.tl_h_o.d_opcode <= io.tl_d_i[0].d_opcode @[TLSocket1_N.scala 50:26]
      io.tl_h_o.d_param <= io.tl_d_i[0].d_param @[TLSocket1_N.scala 51:25]
      io.tl_h_o.d_size <= io.tl_d_i[0].d_size @[TLSocket1_N.scala 52:24]
      io.tl_h_o.d_source <= io.tl_d_i[0].d_source @[TLSocket1_N.scala 53:26]
      io.tl_h_o.d_sink <= io.tl_d_i[0].d_sink @[TLSocket1_N.scala 54:24]
      io.tl_h_o.d_data <= io.tl_d_i[0].d_data @[TLSocket1_N.scala 55:24]
      io.tl_h_o.d_error <= io.tl_d_i[0].d_error @[TLSocket1_N.scala 56:25]
      skip @[TLSocket1_N.scala 46:36]
    node _T_5 = eq(io.dev_sel, UInt<1>("h01")) @[TLSocket1_N.scala 46:21]
    when _T_5 : @[TLSocket1_N.scala 46:36]
      io.tl_h_o.a_ready <= io.tl_d_i[1].a_ready @[TLSocket1_N.scala 48:25]
      io.tl_h_o.d_valid <= io.tl_d_i[1].d_valid @[TLSocket1_N.scala 49:25]
      io.tl_h_o.d_opcode <= io.tl_d_i[1].d_opcode @[TLSocket1_N.scala 50:26]
      io.tl_h_o.d_param <= io.tl_d_i[1].d_param @[TLSocket1_N.scala 51:25]
      io.tl_h_o.d_size <= io.tl_d_i[1].d_size @[TLSocket1_N.scala 52:24]
      io.tl_h_o.d_source <= io.tl_d_i[1].d_source @[TLSocket1_N.scala 53:26]
      io.tl_h_o.d_sink <= io.tl_d_i[1].d_sink @[TLSocket1_N.scala 54:24]
      io.tl_h_o.d_data <= io.tl_d_i[1].d_data @[TLSocket1_N.scala 55:24]
      io.tl_h_o.d_error <= io.tl_d_i[1].d_error @[TLSocket1_N.scala 56:25]
      skip @[TLSocket1_N.scala 46:36]
    node _T_6 = eq(io.dev_sel, UInt<2>("h02")) @[TLSocket1_N.scala 62:58]
    node _T_7 = and(io.tl_h_i.a_valid, _T_6) @[TLSocket1_N.scala 62:43]
    tl_err_h_o.a_valid <= _T_7 @[TLSocket1_N.scala 62:22]
    tl_err_h_o.a_opcode <= io.tl_h_i.a_opcode @[TLSocket1_N.scala 63:23]
    tl_err_h_o.a_param <= io.tl_h_i.a_param @[TLSocket1_N.scala 64:22]
    tl_err_h_o.a_size <= io.tl_h_i.a_size @[TLSocket1_N.scala 65:21]
    tl_err_h_o.a_source <= io.tl_h_i.a_source @[TLSocket1_N.scala 66:23]
    tl_err_h_o.a_address <= io.tl_h_i.a_address @[TLSocket1_N.scala 67:24]
    tl_err_h_o.a_mask <= io.tl_h_i.a_mask @[TLSocket1_N.scala 68:21]
    tl_err_h_o.a_data <= io.tl_h_i.a_data @[TLSocket1_N.scala 69:21]
    tl_err_h_o.d_ready <= io.tl_h_i.d_ready @[TLSocket1_N.scala 70:22]
    inst tl_errResp of TL_ErrResp @[TLSocket1_N.scala 72:26]
    tl_errResp.clock <= clock
    tl_errResp.reset <= reset
    tl_errResp.io.tl_h_i.d_ready <= tl_err_h_o.d_ready @[TLSocket1_N.scala 73:24]
    tl_errResp.io.tl_h_i.a_data <= tl_err_h_o.a_data @[TLSocket1_N.scala 73:24]
    tl_errResp.io.tl_h_i.a_mask <= tl_err_h_o.a_mask @[TLSocket1_N.scala 73:24]
    tl_errResp.io.tl_h_i.a_address <= tl_err_h_o.a_address @[TLSocket1_N.scala 73:24]
    tl_errResp.io.tl_h_i.a_source <= tl_err_h_o.a_source @[TLSocket1_N.scala 73:24]
    tl_errResp.io.tl_h_i.a_size <= tl_err_h_o.a_size @[TLSocket1_N.scala 73:24]
    tl_errResp.io.tl_h_i.a_param <= tl_err_h_o.a_param @[TLSocket1_N.scala 73:24]
    tl_errResp.io.tl_h_i.a_opcode <= tl_err_h_o.a_opcode @[TLSocket1_N.scala 73:24]
    tl_errResp.io.tl_h_i.a_valid <= tl_err_h_o.a_valid @[TLSocket1_N.scala 73:24]
    tl_err_d_i.a_ready <= tl_errResp.io.tl_d_o.a_ready @[TLSocket1_N.scala 74:14]
    tl_err_d_i.d_error <= tl_errResp.io.tl_d_o.d_error @[TLSocket1_N.scala 74:14]
    tl_err_d_i.d_data <= tl_errResp.io.tl_d_o.d_data @[TLSocket1_N.scala 74:14]
    tl_err_d_i.d_sink <= tl_errResp.io.tl_d_o.d_sink @[TLSocket1_N.scala 74:14]
    tl_err_d_i.d_source <= tl_errResp.io.tl_d_o.d_source @[TLSocket1_N.scala 74:14]
    tl_err_d_i.d_size <= tl_errResp.io.tl_d_o.d_size @[TLSocket1_N.scala 74:14]
    tl_err_d_i.d_param <= tl_errResp.io.tl_d_o.d_param @[TLSocket1_N.scala 74:14]
    tl_err_d_i.d_opcode <= tl_errResp.io.tl_d_o.d_opcode @[TLSocket1_N.scala 74:14]
    tl_err_d_i.d_valid <= tl_errResp.io.tl_d_o.d_valid @[TLSocket1_N.scala 74:14]
    
  module ShaheenTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rx_i : UInt<1>, flip gpio_i : UInt<4>, gpio_o : UInt<16>}
    
    inst uart_ctrl of UartController @[ShaheenTop.scala 68:51]
    uart_ctrl.clock <= clock
    uart_ctrl.reset <= reset
    inst core of Core @[ShaheenTop.scala 69:51]
    core.clock <= clock
    core.reset <= reset
    inst iccm of InstMem @[ShaheenTop.scala 70:51]
    iccm.clock <= clock
    iccm.reset <= reset
    inst dccm of DataMem @[ShaheenTop.scala 71:51]
    dccm.clock <= clock
    dccm.reset <= reset
    inst gpio of Gpio @[ShaheenTop.scala 72:51]
    gpio.clock <= clock
    gpio.reset <= reset
    inst core_iccm_tl_host of TL_HostAdapter @[ShaheenTop.scala 73:51]
    core_iccm_tl_host.clock <= clock
    core_iccm_tl_host.reset <= reset
    inst core_loadStore_tl_host of TL_HostAdapter_1 @[ShaheenTop.scala 74:51]
    core_loadStore_tl_host.clock <= clock
    core_loadStore_tl_host.reset <= reset
    inst iccm_tl_device of TL_SramAdapter @[ShaheenTop.scala 75:51]
    iccm_tl_device.clock <= clock
    iccm_tl_device.reset <= reset
    inst dccm_tl_device of TL_SramAdapter_1 @[ShaheenTop.scala 76:51]
    dccm_tl_device.clock <= clock
    dccm_tl_device.reset <= reset
    inst tl_switch_1to2 of TLSocket1_N @[ShaheenTop.scala 77:51]
    tl_switch_1to2.clock <= clock
    tl_switch_1to2.reset <= reset
    wire instr_we : UInt<1> @[ShaheenTop.scala 80:49]
    wire instr_wdata : UInt<32> @[ShaheenTop.scala 81:49]
    wire instr_addr : UInt<32> @[ShaheenTop.scala 82:49]
    reg rx_data_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ShaheenTop.scala 85:52]
    reg rx_addr_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ShaheenTop.scala 86:52]
    reg reset_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[ShaheenTop.scala 87:52]
    uart_ctrl.io.rxd <= io.rx_i @[ShaheenTop.scala 89:36]
    reg state_reg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ShaheenTop.scala 91:52]
    node _T = bits(reset, 0, 0) @[ShaheenTop.scala 92:57]
    reset_reg <= _T @[ShaheenTop.scala 92:36]
    node _T_1 = eq(state_reg, UInt<2>("h00")) @[ShaheenTop.scala 95:18]
    when _T_1 : @[ShaheenTop.scala 95:28]
      node _T_2 = eq(reset_reg, UInt<1>("h01")) @[ShaheenTop.scala 97:20]
      node _T_3 = bits(reset, 0, 0) @[ShaheenTop.scala 97:46]
      node _T_4 = eq(_T_3, UInt<1>("h00")) @[ShaheenTop.scala 97:49]
      node _T_5 = and(_T_2, _T_4) @[ShaheenTop.scala 97:31]
      when _T_5 : @[ShaheenTop.scala 97:62]
        state_reg <= UInt<2>("h01") @[ShaheenTop.scala 99:36]
        skip @[ShaheenTop.scala 97:62]
      else : @[ShaheenTop.scala 101:18]
        state_reg <= UInt<2>("h00") @[ShaheenTop.scala 103:36]
        skip @[ShaheenTop.scala 101:18]
      instr_we <= UInt<1>("h01") @[ShaheenTop.scala 107:36]
      node _T_6 = shr(iccm_tl_device.io.addr_o, 2) @[ShaheenTop.scala 108:70]
      instr_addr <= _T_6 @[ShaheenTop.scala 108:36]
      instr_wdata is invalid @[ShaheenTop.scala 109:36]
      core.io.stall_core_i <= UInt<1>("h00") @[ShaheenTop.scala 110:36]
      uart_ctrl.io.isStalled <= UInt<1>("h00") @[ShaheenTop.scala 111:36]
      skip @[ShaheenTop.scala 95:28]
    else : @[ShaheenTop.scala 112:40]
      node _T_7 = eq(state_reg, UInt<2>("h01")) @[ShaheenTop.scala 112:25]
      when _T_7 : @[ShaheenTop.scala 112:40]
        when uart_ctrl.io.valid : @[ShaheenTop.scala 115:32]
          state_reg <= UInt<2>("h02") @[ShaheenTop.scala 117:36]
          skip @[ShaheenTop.scala 115:32]
        else : @[ShaheenTop.scala 119:36]
          when uart_ctrl.io.done : @[ShaheenTop.scala 119:36]
            state_reg <= UInt<2>("h03") @[ShaheenTop.scala 123:36]
            skip @[ShaheenTop.scala 119:36]
          else : @[ShaheenTop.scala 125:18]
            state_reg <= UInt<2>("h01") @[ShaheenTop.scala 129:36]
            skip @[ShaheenTop.scala 125:18]
        instr_we <= UInt<1>("h01") @[ShaheenTop.scala 132:36]
        instr_addr is invalid @[ShaheenTop.scala 133:36]
        instr_wdata is invalid @[ShaheenTop.scala 134:36]
        core.io.stall_core_i <= UInt<1>("h01") @[ShaheenTop.scala 135:36]
        uart_ctrl.io.isStalled <= UInt<1>("h01") @[ShaheenTop.scala 136:36]
        node _T_8 = mux(uart_ctrl.io.valid, uart_ctrl.io.rx_data_o, UInt<1>("h00")) @[ShaheenTop.scala 142:48]
        rx_data_reg <= _T_8 @[ShaheenTop.scala 142:36]
        node _T_9 = mux(uart_ctrl.io.valid, uart_ctrl.io.addr_o, UInt<1>("h00")) @[ShaheenTop.scala 143:48]
        rx_addr_reg <= _T_9 @[ShaheenTop.scala 143:36]
        skip @[ShaheenTop.scala 112:40]
      else : @[ShaheenTop.scala 145:41]
        node _T_10 = eq(state_reg, UInt<2>("h02")) @[ShaheenTop.scala 145:25]
        when _T_10 : @[ShaheenTop.scala 145:41]
          when uart_ctrl.io.done : @[ShaheenTop.scala 150:29]
            state_reg <= UInt<2>("h03") @[ShaheenTop.scala 152:36]
            skip @[ShaheenTop.scala 150:29]
          else : @[ShaheenTop.scala 154:18]
            state_reg <= UInt<2>("h01") @[ShaheenTop.scala 156:36]
            skip @[ShaheenTop.scala 154:18]
          instr_we <= UInt<1>("h00") @[ShaheenTop.scala 160:36]
          instr_wdata <= rx_data_reg @[ShaheenTop.scala 161:36]
          instr_addr <= rx_addr_reg @[ShaheenTop.scala 162:36]
          core.io.stall_core_i <= UInt<1>("h01") @[ShaheenTop.scala 164:36]
          uart_ctrl.io.isStalled <= UInt<1>("h01") @[ShaheenTop.scala 165:36]
          skip @[ShaheenTop.scala 145:41]
        else : @[ShaheenTop.scala 167:42]
          node _T_11 = eq(state_reg, UInt<2>("h03")) @[ShaheenTop.scala 167:25]
          when _T_11 : @[ShaheenTop.scala 167:42]
            instr_we <= UInt<1>("h01") @[ShaheenTop.scala 169:36]
            instr_wdata is invalid @[ShaheenTop.scala 170:36]
            node _T_12 = shr(iccm_tl_device.io.addr_o, 2) @[ShaheenTop.scala 171:70]
            instr_addr <= _T_12 @[ShaheenTop.scala 171:36]
            core.io.stall_core_i <= UInt<1>("h00") @[ShaheenTop.scala 172:36]
            uart_ctrl.io.isStalled <= UInt<1>("h00") @[ShaheenTop.scala 173:36]
            state_reg <= UInt<2>("h00") @[ShaheenTop.scala 174:36]
            skip @[ShaheenTop.scala 167:42]
          else : @[ShaheenTop.scala 176:16]
            instr_we <= UInt<1>("h01") @[ShaheenTop.scala 178:36]
            instr_wdata is invalid @[ShaheenTop.scala 179:36]
            instr_addr is invalid @[ShaheenTop.scala 180:36]
            core.io.stall_core_i is invalid @[ShaheenTop.scala 181:36]
            uart_ctrl.io.isStalled is invalid @[ShaheenTop.scala 182:36]
            skip @[ShaheenTop.scala 176:16]
    wire dev_sel : UInt<2> @[ShaheenTop.scala 191:49]
    node _T_13 = not(UInt<32>("h0fff")) @[ShaheenTop.scala 197:16]
    node _T_14 = and(core_loadStore_tl_host.io.tl_o.a_address, _T_13) @[ShaheenTop.scala 197:14]
    node _T_15 = eq(_T_14, UInt<32>("h040010000")) @[ShaheenTop.scala 197:44]
    when _T_15 : @[ShaheenTop.scala 197:76]
      dev_sel <= UInt<1>("h01") @[ShaheenTop.scala 199:36]
      skip @[ShaheenTop.scala 197:76]
    else : @[ShaheenTop.scala 201:82]
      node _T_16 = not(UInt<32>("h03fff")) @[ShaheenTop.scala 201:22]
      node _T_17 = and(core_loadStore_tl_host.io.tl_o.a_address, _T_16) @[ShaheenTop.scala 201:20]
      node _T_18 = eq(_T_17, UInt<32>("h010000000")) @[ShaheenTop.scala 201:50]
      when _T_18 : @[ShaheenTop.scala 201:82]
        dev_sel <= UInt<1>("h00") @[ShaheenTop.scala 203:36]
        skip @[ShaheenTop.scala 201:82]
      else : @[ShaheenTop.scala 205:16]
        dev_sel <= UInt<2>("h02") @[ShaheenTop.scala 208:36]
        skip @[ShaheenTop.scala 205:16]
    tl_switch_1to2.io.dev_sel <= dev_sel @[ShaheenTop.scala 216:36]
    tl_switch_1to2.io.tl_h_i.d_ready <= core_loadStore_tl_host.io.tl_o.d_ready @[ShaheenTop.scala 220:36]
    tl_switch_1to2.io.tl_h_i.a_data <= core_loadStore_tl_host.io.tl_o.a_data @[ShaheenTop.scala 220:36]
    tl_switch_1to2.io.tl_h_i.a_mask <= core_loadStore_tl_host.io.tl_o.a_mask @[ShaheenTop.scala 220:36]
    tl_switch_1to2.io.tl_h_i.a_address <= core_loadStore_tl_host.io.tl_o.a_address @[ShaheenTop.scala 220:36]
    tl_switch_1to2.io.tl_h_i.a_source <= core_loadStore_tl_host.io.tl_o.a_source @[ShaheenTop.scala 220:36]
    tl_switch_1to2.io.tl_h_i.a_size <= core_loadStore_tl_host.io.tl_o.a_size @[ShaheenTop.scala 220:36]
    tl_switch_1to2.io.tl_h_i.a_param <= core_loadStore_tl_host.io.tl_o.a_param @[ShaheenTop.scala 220:36]
    tl_switch_1to2.io.tl_h_i.a_opcode <= core_loadStore_tl_host.io.tl_o.a_opcode @[ShaheenTop.scala 220:36]
    tl_switch_1to2.io.tl_h_i.a_valid <= core_loadStore_tl_host.io.tl_o.a_valid @[ShaheenTop.scala 220:36]
    core_loadStore_tl_host.io.tl_i.a_ready <= tl_switch_1to2.io.tl_h_o.a_ready @[ShaheenTop.scala 224:36]
    core_loadStore_tl_host.io.tl_i.d_error <= tl_switch_1to2.io.tl_h_o.d_error @[ShaheenTop.scala 224:36]
    core_loadStore_tl_host.io.tl_i.d_data <= tl_switch_1to2.io.tl_h_o.d_data @[ShaheenTop.scala 224:36]
    core_loadStore_tl_host.io.tl_i.d_sink <= tl_switch_1to2.io.tl_h_o.d_sink @[ShaheenTop.scala 224:36]
    core_loadStore_tl_host.io.tl_i.d_source <= tl_switch_1to2.io.tl_h_o.d_source @[ShaheenTop.scala 224:36]
    core_loadStore_tl_host.io.tl_i.d_size <= tl_switch_1to2.io.tl_h_o.d_size @[ShaheenTop.scala 224:36]
    core_loadStore_tl_host.io.tl_i.d_param <= tl_switch_1to2.io.tl_h_o.d_param @[ShaheenTop.scala 224:36]
    core_loadStore_tl_host.io.tl_i.d_opcode <= tl_switch_1to2.io.tl_h_o.d_opcode @[ShaheenTop.scala 224:36]
    core_loadStore_tl_host.io.tl_i.d_valid <= tl_switch_1to2.io.tl_h_o.d_valid @[ShaheenTop.scala 224:36]
    dccm_tl_device.io.tl_i.d_ready <= tl_switch_1to2.io.tl_d_o[0].d_ready @[ShaheenTop.scala 229:36]
    dccm_tl_device.io.tl_i.a_data <= tl_switch_1to2.io.tl_d_o[0].a_data @[ShaheenTop.scala 229:36]
    dccm_tl_device.io.tl_i.a_mask <= tl_switch_1to2.io.tl_d_o[0].a_mask @[ShaheenTop.scala 229:36]
    dccm_tl_device.io.tl_i.a_address <= tl_switch_1to2.io.tl_d_o[0].a_address @[ShaheenTop.scala 229:36]
    dccm_tl_device.io.tl_i.a_source <= tl_switch_1to2.io.tl_d_o[0].a_source @[ShaheenTop.scala 229:36]
    dccm_tl_device.io.tl_i.a_size <= tl_switch_1to2.io.tl_d_o[0].a_size @[ShaheenTop.scala 229:36]
    dccm_tl_device.io.tl_i.a_param <= tl_switch_1to2.io.tl_d_o[0].a_param @[ShaheenTop.scala 229:36]
    dccm_tl_device.io.tl_i.a_opcode <= tl_switch_1to2.io.tl_d_o[0].a_opcode @[ShaheenTop.scala 229:36]
    dccm_tl_device.io.tl_i.a_valid <= tl_switch_1to2.io.tl_d_o[0].a_valid @[ShaheenTop.scala 229:36]
    tl_switch_1to2.io.tl_d_i[0].a_ready <= dccm_tl_device.io.tl_o.a_ready @[ShaheenTop.scala 233:36]
    tl_switch_1to2.io.tl_d_i[0].d_error <= dccm_tl_device.io.tl_o.d_error @[ShaheenTop.scala 233:36]
    tl_switch_1to2.io.tl_d_i[0].d_data <= dccm_tl_device.io.tl_o.d_data @[ShaheenTop.scala 233:36]
    tl_switch_1to2.io.tl_d_i[0].d_sink <= dccm_tl_device.io.tl_o.d_sink @[ShaheenTop.scala 233:36]
    tl_switch_1to2.io.tl_d_i[0].d_source <= dccm_tl_device.io.tl_o.d_source @[ShaheenTop.scala 233:36]
    tl_switch_1to2.io.tl_d_i[0].d_size <= dccm_tl_device.io.tl_o.d_size @[ShaheenTop.scala 233:36]
    tl_switch_1to2.io.tl_d_i[0].d_param <= dccm_tl_device.io.tl_o.d_param @[ShaheenTop.scala 233:36]
    tl_switch_1to2.io.tl_d_i[0].d_opcode <= dccm_tl_device.io.tl_o.d_opcode @[ShaheenTop.scala 233:36]
    tl_switch_1to2.io.tl_d_i[0].d_valid <= dccm_tl_device.io.tl_o.d_valid @[ShaheenTop.scala 233:36]
    gpio.io.tl_i.d_ready <= tl_switch_1to2.io.tl_d_o[1].d_ready @[ShaheenTop.scala 238:36]
    gpio.io.tl_i.a_data <= tl_switch_1to2.io.tl_d_o[1].a_data @[ShaheenTop.scala 238:36]
    gpio.io.tl_i.a_mask <= tl_switch_1to2.io.tl_d_o[1].a_mask @[ShaheenTop.scala 238:36]
    gpio.io.tl_i.a_address <= tl_switch_1to2.io.tl_d_o[1].a_address @[ShaheenTop.scala 238:36]
    gpio.io.tl_i.a_source <= tl_switch_1to2.io.tl_d_o[1].a_source @[ShaheenTop.scala 238:36]
    gpio.io.tl_i.a_size <= tl_switch_1to2.io.tl_d_o[1].a_size @[ShaheenTop.scala 238:36]
    gpio.io.tl_i.a_param <= tl_switch_1to2.io.tl_d_o[1].a_param @[ShaheenTop.scala 238:36]
    gpio.io.tl_i.a_opcode <= tl_switch_1to2.io.tl_d_o[1].a_opcode @[ShaheenTop.scala 238:36]
    gpio.io.tl_i.a_valid <= tl_switch_1to2.io.tl_d_o[1].a_valid @[ShaheenTop.scala 238:36]
    tl_switch_1to2.io.tl_d_i[1].a_ready <= gpio.io.tl_o.a_ready @[ShaheenTop.scala 242:36]
    tl_switch_1to2.io.tl_d_i[1].d_error <= gpio.io.tl_o.d_error @[ShaheenTop.scala 242:36]
    tl_switch_1to2.io.tl_d_i[1].d_data <= gpio.io.tl_o.d_data @[ShaheenTop.scala 242:36]
    tl_switch_1to2.io.tl_d_i[1].d_sink <= gpio.io.tl_o.d_sink @[ShaheenTop.scala 242:36]
    tl_switch_1to2.io.tl_d_i[1].d_source <= gpio.io.tl_o.d_source @[ShaheenTop.scala 242:36]
    tl_switch_1to2.io.tl_d_i[1].d_size <= gpio.io.tl_o.d_size @[ShaheenTop.scala 242:36]
    tl_switch_1to2.io.tl_d_i[1].d_param <= gpio.io.tl_o.d_param @[ShaheenTop.scala 242:36]
    tl_switch_1to2.io.tl_d_i[1].d_opcode <= gpio.io.tl_o.d_opcode @[ShaheenTop.scala 242:36]
    tl_switch_1to2.io.tl_d_i[1].d_valid <= gpio.io.tl_o.d_valid @[ShaheenTop.scala 242:36]
    core_iccm_tl_host.io.req_i <= core.io.instr_req_o @[ShaheenTop.scala 247:36]
    core_iccm_tl_host.io.addr_i <= core.io.instr_addr_o @[ShaheenTop.scala 248:36]
    core_iccm_tl_host.io.we_i <= UInt<1>("h00") @[ShaheenTop.scala 249:36]
    core_iccm_tl_host.io.wdata_i <= UInt<1>("h00") @[ShaheenTop.scala 250:36]
    core_iccm_tl_host.io.be_i <= UInt<4>("h0f") @[ShaheenTop.scala 251:36]
    iccm_tl_device.io.tl_i.d_ready <= core_iccm_tl_host.io.tl_o.d_ready @[ShaheenTop.scala 253:36]
    iccm_tl_device.io.tl_i.a_data <= core_iccm_tl_host.io.tl_o.a_data @[ShaheenTop.scala 253:36]
    iccm_tl_device.io.tl_i.a_mask <= core_iccm_tl_host.io.tl_o.a_mask @[ShaheenTop.scala 253:36]
    iccm_tl_device.io.tl_i.a_address <= core_iccm_tl_host.io.tl_o.a_address @[ShaheenTop.scala 253:36]
    iccm_tl_device.io.tl_i.a_source <= core_iccm_tl_host.io.tl_o.a_source @[ShaheenTop.scala 253:36]
    iccm_tl_device.io.tl_i.a_size <= core_iccm_tl_host.io.tl_o.a_size @[ShaheenTop.scala 253:36]
    iccm_tl_device.io.tl_i.a_param <= core_iccm_tl_host.io.tl_o.a_param @[ShaheenTop.scala 253:36]
    iccm_tl_device.io.tl_i.a_opcode <= core_iccm_tl_host.io.tl_o.a_opcode @[ShaheenTop.scala 253:36]
    iccm_tl_device.io.tl_i.a_valid <= core_iccm_tl_host.io.tl_o.a_valid @[ShaheenTop.scala 253:36]
    core_iccm_tl_host.io.tl_i.a_ready <= iccm_tl_device.io.tl_o.a_ready @[ShaheenTop.scala 254:36]
    core_iccm_tl_host.io.tl_i.d_error <= iccm_tl_device.io.tl_o.d_error @[ShaheenTop.scala 254:36]
    core_iccm_tl_host.io.tl_i.d_data <= iccm_tl_device.io.tl_o.d_data @[ShaheenTop.scala 254:36]
    core_iccm_tl_host.io.tl_i.d_sink <= iccm_tl_device.io.tl_o.d_sink @[ShaheenTop.scala 254:36]
    core_iccm_tl_host.io.tl_i.d_source <= iccm_tl_device.io.tl_o.d_source @[ShaheenTop.scala 254:36]
    core_iccm_tl_host.io.tl_i.d_size <= iccm_tl_device.io.tl_o.d_size @[ShaheenTop.scala 254:36]
    core_iccm_tl_host.io.tl_i.d_param <= iccm_tl_device.io.tl_o.d_param @[ShaheenTop.scala 254:36]
    core_iccm_tl_host.io.tl_i.d_opcode <= iccm_tl_device.io.tl_o.d_opcode @[ShaheenTop.scala 254:36]
    core_iccm_tl_host.io.tl_i.d_valid <= iccm_tl_device.io.tl_o.d_valid @[ShaheenTop.scala 254:36]
    iccm.io.csb_i <= UInt<1>("h00") @[ShaheenTop.scala 256:36]
    iccm.io.we_i <= instr_we @[ShaheenTop.scala 257:36]
    iccm.io.addr_i <= instr_addr @[ShaheenTop.scala 258:36]
    iccm.io.wdata_i <= instr_wdata @[ShaheenTop.scala 259:36]
    iccm_tl_device.io.rdata_i <= iccm.io.rdata_o @[ShaheenTop.scala 260:36]
    core.io.instr_rdata_i <= core_iccm_tl_host.io.rdata_o @[ShaheenTop.scala 262:36]
    core.io.instr_gnt_i <= core_iccm_tl_host.io.gnt_o @[ShaheenTop.scala 263:36]
    core.io.instr_rvalid_i <= core_iccm_tl_host.io.valid_o @[ShaheenTop.scala 264:36]
    core_loadStore_tl_host.io.req_i <= core.io.data_req_o @[ShaheenTop.scala 269:36]
    node _T_19 = asUInt(core.io.data_addr_o) @[ShaheenTop.scala 270:71]
    core_loadStore_tl_host.io.addr_i <= _T_19 @[ShaheenTop.scala 270:36]
    core_loadStore_tl_host.io.we_i <= core.io.data_we_o @[ShaheenTop.scala 271:36]
    node _T_20 = asUInt(core.io.data_wdata_o[0]) @[ShaheenTop.scala 272:72]
    node _T_21 = asUInt(core.io.data_wdata_o[1]) @[ShaheenTop.scala 272:72]
    node _T_22 = asUInt(core.io.data_wdata_o[2]) @[ShaheenTop.scala 272:72]
    node _T_23 = asUInt(core.io.data_wdata_o[3]) @[ShaheenTop.scala 272:72]
    node _T_24 = cat(_T_21, _T_20) @[ShaheenTop.scala 272:72]
    node _T_25 = cat(_T_23, _T_22) @[ShaheenTop.scala 272:72]
    node _T_26 = cat(_T_25, _T_24) @[ShaheenTop.scala 272:72]
    core_loadStore_tl_host.io.wdata_i <= _T_26 @[ShaheenTop.scala 272:36]
    node _T_27 = cat(core.io.data_be_o[1], core.io.data_be_o[0]) @[Cat.scala 29:58]
    node _T_28 = cat(core.io.data_be_o[3], core.io.data_be_o[2]) @[Cat.scala 29:58]
    node _T_29 = cat(_T_28, _T_27) @[Cat.scala 29:58]
    core_loadStore_tl_host.io.be_i <= _T_29 @[ShaheenTop.scala 273:36]
    node _T_30 = cat(dccm.io.rdata_o[1], dccm.io.rdata_o[0]) @[Cat.scala 29:58]
    node _T_31 = cat(dccm.io.rdata_o[3], dccm.io.rdata_o[2]) @[Cat.scala 29:58]
    node _T_32 = cat(_T_31, _T_30) @[Cat.scala 29:58]
    dccm_tl_device.io.rdata_i <= _T_32 @[ShaheenTop.scala 275:36]
    dccm.io.csb_i <= UInt<1>("h00") @[ShaheenTop.scala 277:36]
    node _T_33 = shr(dccm_tl_device.io.addr_o, 2) @[ShaheenTop.scala 278:70]
    dccm.io.addr_i <= _T_33 @[ShaheenTop.scala 278:36]
    node _T_34 = bits(dccm_tl_device.io.wdata_o, 7, 0) @[ShaheenTop.scala 280:70]
    dccm.io.wdata_i[0] <= _T_34 @[ShaheenTop.scala 280:36]
    node _T_35 = bits(dccm_tl_device.io.wdata_o, 15, 8) @[ShaheenTop.scala 281:70]
    dccm.io.wdata_i[1] <= _T_35 @[ShaheenTop.scala 281:36]
    node _T_36 = bits(dccm_tl_device.io.wdata_o, 23, 16) @[ShaheenTop.scala 282:70]
    dccm.io.wdata_i[2] <= _T_36 @[ShaheenTop.scala 282:36]
    node _T_37 = bits(dccm_tl_device.io.wdata_o, 31, 24) @[ShaheenTop.scala 283:70]
    dccm.io.wdata_i[3] <= _T_37 @[ShaheenTop.scala 283:36]
    node _T_38 = not(dccm_tl_device.io.we_o) @[ShaheenTop.scala 284:45]
    dccm.io.we_i <= _T_38 @[ShaheenTop.scala 284:36]
    dccm.io.wmask_i[0] <= dccm_tl_device.io.wmask_o[0] @[ShaheenTop.scala 285:36]
    dccm.io.wmask_i[1] <= dccm_tl_device.io.wmask_o[1] @[ShaheenTop.scala 285:36]
    dccm.io.wmask_i[2] <= dccm_tl_device.io.wmask_o[2] @[ShaheenTop.scala 285:36]
    dccm.io.wmask_i[3] <= dccm_tl_device.io.wmask_o[3] @[ShaheenTop.scala 285:36]
    node _T_39 = mux(UInt<1>("h00"), UInt<28>("h0fffffff"), UInt<28>("h00")) @[Bitwise.scala 72:12]
    node _T_40 = cat(_T_39, io.gpio_i) @[Cat.scala 29:58]
    gpio.io.cio_gpio_i <= _T_40 @[ShaheenTop.scala 288:36]
    node gpio_val = and(gpio.io.cio_gpio_o, gpio.io.cio_gpio_en_o) @[ShaheenTop.scala 289:64]
    node _T_41 = bits(gpio_val, 15, 0) @[ShaheenTop.scala 290:53]
    io.gpio_o <= _T_41 @[ShaheenTop.scala 290:36]
    node _T_42 = orr(gpio.io.intr_gpio_o) @[ShaheenTop.scala 293:68]
    core.io.irq_external_i <= _T_42 @[ShaheenTop.scala 293:36]
    core.io.data_gnt_i <= core_loadStore_tl_host.io.gnt_o @[ShaheenTop.scala 294:36]
    core.io.data_rvalid_i <= core_loadStore_tl_host.io.valid_o @[ShaheenTop.scala 295:36]
    node _T_43 = asSInt(core_loadStore_tl_host.io.rdata_o) @[ShaheenTop.scala 296:85]
    core.io.data_rdata_i <= _T_43 @[ShaheenTop.scala 296:36]
    
